cscope 15 /usr/local/src/astsrc1/allstar/astsrc-1.4.23-pre/trunk/asterisk/channels               0001107360
	@chan_usbradio.c

39 
	~"a°îisk.h
"

41 
ASTERISK_FILE_VERSION
(
__FILE__
, "$Revision: 535 $")

43 
	~<°dio.h
>

44 
	~<˘y≥.h
>

45 
	~<m©h.h
>

46 
	~<°rög.h
>

47 
	~<uni°d.h
>

48 
	~<sys/io.h
>

49 
	~<sys/io˘l.h
>

50 
	~<f˙é.h
>

51 
	~<sys/time.h
>

52 
	~<°dlib.h
>

53 
	~<î∫o.h
>

54 
	~<usb.h
>

55 
	~<£¨ch.h
>

56 
	~<löux/µdev.h
>

57 
	~<löux/∑Ω‹t.h
>

58 
	~<Æß/asoundlib.h
>

61 #ifde‡
RADIO_XPMRX


62 
	#HAVE_XPMRX
 1

	)

65 
	#CHAN_USBRADIO
 1

	)

66 
	#DEBUG_USBRADIO
 0

	)

67 
	#DEBUG_CAPTURES
 1

	)

68 
	#DEBUG_CAP_RX_OUT
 0

	)

69 
	#DEBUG_CAP_TX_OUT
 0

	)

70 
	#DEBUG_FILETEST
 0

	)

72 
	#RX_CAP_RAW_FILE
 "/tmp/rx_ˇp_ö.pcm"

	)

73 
	#RX_CAP_TRACE_FILE
 "/tmp/rx_åa˚.pcm"

	)

74 
	#RX_CAP_OUT_FILE
 "/tmp/rx_ˇp_out.pcm"

	)

76 
	#TX_CAP_RAW_FILE
 "/tmp/tx_ˇp_ö.pcm"

	)

77 
	#TX_CAP_TRACE_FILE
 "/tmp/tx_åa˚.pcm"

	)

78 
	#TX_CAP_OUT_FILE
 "/tmp/tx_ˇp_out.pcm"

	)

80 
	#MIXER_PARAM_MIC_PLAYBACK_SW
 "Mi¯Pœyback Swôch"

	)

81 
	#MIXER_PARAM_MIC_PLAYBACK_VOL
 "Mi¯Pœyback Vﬁume"

	)

82 
	#MIXER_PARAM_MIC_CAPTURE_SW
 "Mi¯C≠tuª Swôch"

	)

83 
	#MIXER_PARAM_MIC_CAPTURE_VOL
 "Mi¯C≠tuª Vﬁume"

	)

84 
	#MIXER_PARAM_MIC_BOOST
 "AutÿGaö C⁄åﬁ"

	)

85 
	#MIXER_PARAM_SPKR_PLAYBACK_SW
 "S≥akî Pœyback Swôch"

	)

86 
	#MIXER_PARAM_SPKR_PLAYBACK_VOL
 "S≥akî Pœyback Vﬁume"

	)

88 
	#DELIMCHR
 ','

	)

89 
	#QUOTECHR
 34

	)

91 
	#READERR_THRESHOLD
 50

	)

93 
	#DEFAULT_ECHO_MAX
 1000

	)

95 
	#PP_MASK
 0xbffc

	)

96 
	#PP_PORT
 "/dev/∑Ω‹t0"

	)

97 
	#PP_IOPORT
 0x378

	)

99 
	~"xpmr/xpmr.h
"

100 #ifde‡
HAVE_XPMRX


101 
	~"xpmrx/xpmrx.h
"

102 
	~"xpmrx/bôweight.h
"

106 
	#åa˚usb1
(
a
Ë{
¥ötf
á;}

	)

108 
	#åa˚usb1
(
a
)

	)

112 
	#åa˚usb2
(
a
Ë{
¥ötf
á;}

	)

114 
	#åa˚usb2
(
a
)

	)

117 #ifde‡
__löux


118 
	~<löux/soundˇrd.h
>

119 #ñi‡
deföed
(
__FªeBSD__
)

120 
	~<sys/soundˇrd.h
>

122 
	~<soundˇrd.h
>

125 
	~"a°îisk/lock.h
"

126 
	~"a°îisk/‰ame.h
"

127 
	~"a°îisk/loggî.h
"

128 
	~"a°îisk/ˇŒîid.h
"

129 
	~"a°îisk/ch™√l.h
"

130 
	~"a°îisk/moduÀ.h
"

131 
	~"a°îisk/›ti⁄s.h
"

132 
	~"a°îisk/pbx.h
"

133 
	~"a°îisk/c⁄fig.h
"

134 
	~"a°îisk/˛i.h
"

135 
	~"a°îisk/utûs.h
"

136 
	~"a°îisk/ˇu£s.h
"

137 
	~"a°îisk/ídün.h
"

138 
	~"a°îisk/°rögfõlds.h
"

139 
	~"a°îisk/ab°ø˘_jb.h
"

140 
	~"a°îisk/music⁄hﬁd.h
"

141 
	~"a°îisk/d•.h
"

143 #i‚def 
NEW_ASTERISK


146 
	~"busy.h
"

147 
	~"rögt⁄e.h
"

148 
	~"rög10.h
"

149 
	~"™swî.h
"

153 
	#C108_VENDOR_ID
 0x0d8c

	)

154 
	#C108_PRODUCT_ID
 0x000c

	)

155 
	#C108AH_PRODUCT_ID
 0x013c

	)

156 
	#C119_PRODUCT_ID
 0x0008

	)

157 
	#C119A_PRODUCT_ID
 0x013a

	)

158 
	#N1KDO_PRODUCT_ID
 0x6a00

	)

159 
	#C108_HID_INTERFACE
 3

	)

161 
	#HID_REPORT_GET
 0x01

	)

162 
	#HID_REPORT_SET
 0x09

	)

164 
	#HID_RT_INPUT
 0x01

	)

165 
	#HID_RT_OUTPUT
 0x02

	)

167 
	#EEPROM_START_ADDR
 6

	)

168 
	#EEPROM_END_ADDR
 63

	)

169 
	#EEPROM_PHYSICAL_LEN
 64

	)

170 
	#EEPROM_TEST_ADDR
 
EEPROM_END_ADDR


	)

171 
	#EEPROM_MAGIC_ADDR
 6

	)

172 
	#EEPROM_MAGIC
 34329

	)

173 
	#EEPROM_CS_ADDR
 62

	)

174 
	#EEPROM_RXMIXERSET
 8

	)

175 
	#EEPROM_TXMIXASET
 9

	)

176 
	#EEPROM_TXMIXBSET
 10

	)

177 
	#EEPROM_RXVOICEADJ
 11

	)

178 
	#EEPROM_RXCTCSSADJ
 13

	)

179 
	#EEPROM_TXCTCSSADJ
 15

	)

180 
	#EEPROM_RXSQUELCHADJ
 16

	)

183 
a°_jb_c⁄f
 
	gdeÁu…_jbc⁄f
 =

185 .
Êags
 = 0,

186 .
	gmax_size
 = -1,

187 .
	gªsync_thªshﬁd
 = -1,

188 .
	gim∂
 = "",

190 
a°_jb_c⁄f
 
	gglobÆ_jbc⁄f
;

300 
	#M_START
(
v¨
, 
vÆ
) \

301 *
__s
 = 
v¨
; *
__vÆ
 = 
vÆ
;

	)

302 
	#M_END
(
x
Ëx;

	)

303 
	#M_F
(
èg
, 
f
Ëi‡(!
	`°rˇ£cmp
((
__s
),Åag)Ë{ f; } 

	)

304 
	#M_BOOL
(
èg
, 
d°
Ë
	`M_F
—ag, (d°Ë
	`a°_åue
(
__vÆ
Ë)

	)

305 
	#M_UINT
(
èg
, 
d°
Ë
	`M_F
—ag, (d°Ë
	`°πoul
(
__vÆ
, 
NULL
, 0Ë)

	)

306 
	#M_STR
(
èg
, 
d°
Ë
	`M_F
—ag, 
	`a°_c›y_°rög
(d°, 
__vÆ
, (d°)))

	)

338 
	#FRAME_SIZE
 160

	)

339 
	#QUEUE_SIZE
 2

	)

341 #i‡
deföed
(
__FªeBSD__
)

342 
	#FRAGS
 0x8

	)

344 
	#FRAGS
 ( ( (6 * 5Ë<< 16 ) | 0x¯)

	)

351 
	#TEXT_SIZE
 256

	)

354 
	#TRYOPEN
 1

	)

356 
	#O_CLOSE
 0x444

	)

358 #i‡
deföed
–
__O≥nBSD__
 ) || deföed–
__NëBSD__
 )

359 
	#DEV_DSP
 "/dev/audio"

	)

361 
	#DEV_DSP
 "/dev/d•"

	)

364 #i‚de‡
MIN


365 
	#MIN
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

367 #i‚de‡
MAX


368 
	#MAX
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

371 *
	gc⁄fig
 = "usbradio.conf";

372 *
	gc⁄fig1
 = "usbradio_tune_%s.conf";

374 
FILE
 *
	g‰xˇ¥aw
 = 
NULL
, *
	g‰xˇ±ø˚
 = NULL, *
	g‰xouåaw
 = NULL;

375 
FILE
 *
	g·xˇ¥aw
 = 
NULL
, *
	g·xˇ±ø˚
 = NULL, *
	g·xouåaw
 = NULL;

377 *
	gusb_devi˚_li°
 = 
NULL
;

378 
	gusb_devi˚_li°_size
 = 0;

379 
AST_MUTEX_DEFINE_STATIC
(
usb_li°_lock
);

380 
AST_MUTEX_DEFINE_STATIC
(
usb_dev_lock
);

381 
AST_MUTEX_DEFINE_STATIC
(
µ_lock
);

383 
öt8_t
 
	gµ_vÆ
;

384 
öt8_t
 
	gµ_pul£mask
;

385 
öt8_t
 
	gµ_œ°mask
;

386 
	gµ_pul£timî
[32];

387 
	gha•p
;

388 
	gµfd
;

389 
	gµ‹t
[50];

390 
	gpba£
;

391 
	g°›pul£r
;

392 
	ghasout
;

393 
±hªad_t
 
	gpul£rid
;

395 
	gusbødio_debug
;

397 
	gusbødio_debug_Àvñ
 = 0;

400 íum {
	mRX_AUDIO_NONE
,
	mRX_AUDIO_SPEAKER
,
	mRX_AUDIO_FLAT
};

401 íum {
	mCD_IGNORE
,
	mCD_XPMR_NOISE
,
	mCD_XPMR_VOX
,
	mCD_HID
,
	mCD_HID_INVERT
,
	mCD_PP
,
	mCD_PP_INVERT
};

402 íum {
	mSD_IGNORE
,
	mSD_HID
,
	mSD_HID_INVERT
,
	mSD_XPMR
,
	mSD_PP
,
	mSD_PP_INVERT
};

403 íum {
	mRX_KEY_CARRIER
,
	mRX_KEY_CARRIER_CODE
};

404 íum {
	mTX_OUT_OFF
,
	mTX_OUT_VOICE
,
	mTX_OUT_LSD
,
	mTX_OUT_COMPOSITE
,
	mTX_OUT_AUX
};

405 íum {
	mTOC_NONE
,
	mTOC_PHASE
,
	mTOC_NOTONE
};

414 
	ssound
 {

415 
	möd
;

416 *
	mdesc
;

417 *
	md©a
;

418 
	md©Æí
;

419 
	mßm∂í
;

420 
	msûí˚Àn
;

421 
	mª≥©
;

424 #i‚def 
NEW_ASTERISK


426 
sound
 
	gsounds
[] = {

427 { 
AST_CONTROL_RINGING
, "RINGING", 
rögt⁄e
, (ringtone)/2, 16000, 32000, 1 },

428 { 
AST_CONTROL_BUSY
, "BUSY", 
busy
, (busy)/2, 4000, 4000, 1 },

429 { 
AST_CONTROL_CONGESTION
, "CONGESTION", 
busy
, (busy)/2, 2000, 2000, 1 },

430 { 
AST_CONTROL_RING
, "RING10", 
rög10
, (ring10)/2, 16000, 32000, 1 },

431 { 
AST_CONTROL_ANSWER
, "ANSWER", 
™swî
, (answer)/2, 2200, 0, 0 },

432 { -1, 
NULL
, 0, 0, 0, 0 },

437 
	susbecho
 {

438 
qñem
 *
	mq_f‹w
;

439 
qñem
 *
	mq_¥ev
;

440 
	md©a
[
FRAME_SIZE
];

450 
	sch™_usbødio_pvt
 {

451 
ch™_usbødio_pvt
 *
	m√xt
;

453 *
	m«me
;

454 #i‚def 
NEW_ASTERISK


462 
	mödex
;

463 
	m¢dcmd
[2];

464 
	mcursound
;

465 
	mßmp£¡
;

466 
	mnosound
;

469 
	mdevty≥
;

470 
	m±tkick
[2];

471 
	mtŸÆ_blocks
;

472 
	msounddev
;

473 íum { 
	mM_UNSET
, 
	mM_FULL
, 
	mM_READ
, 
	mM_WRITE
 } 
	mdu∂ex
;

474 
i16
 
	mcdMëhod
;

475 
	mautﬂnswî
;

476 
	mautoh™gup
;

477 
	mhook°©e
;

478 
	mu£dtmf
;

479 
	mqueuesize
;

480 
	m‰ags
;

482 
	mw¨√d
;

483 
	#WARN_u£d_blocks
 1

	)

484 
	#WARN_•ìd
 2

	)

485 
	#WARN_‰ag
 4

	)

486 
	mw_îr‹s
;

487 
timevÆ
 
	mœ°›í
;

489 
	movîridec⁄ãxt
;

490 
	mmuã
;

495 
	#BOOST_SCALE
 (1<<9)

	)

496 
	#BOOST_MAX
 40

	)

497 
	mboo°
;

498 
	mdevi˚num
;

499 
	mdev°r
[128];

500 
	m•krmax
;

501 
	mmicmax
;

503 #i‚def 
NEW_ASTERISK


504 
±hªad_t
 
	m°hªad
;

506 
±hªad_t
 
	mhidthªad
;

508 
	mdidpmπx
;

509 
	mnŸx˙t
;

510 
	m°›hid
;

511 
FILE
 *
	mhkickhid
;

513 
a°_ch™√l
 *
	mow√r
;

514 
	mext
[
AST_MAX_EXTENSION
];

515 
	m˘x
[
AST_MAX_CONTEXT
];

516 
	mœnguage
[
MAX_LANGUAGE
];

517 
	mcid_«me
[256];

518 
	mcid_num
[256];

519 
	mmohöãΩªt
[
MAX_MUSICCLASS
];

522 
	musbødio_wrôe_buf
[
FRAME_SIZE
 * 2 * 2 * 6];

523 
	musbødio_wrôe_buf_1
[
FRAME_SIZE
 * 2 * 2* 6];

525 
	musbødio_wrôe_d°
;

529 
	musbødio_ªad_buf
[
FRAME_SIZE
 * (2 * 12Ë+ 
AST_FRIENDLY_OFFSET
];

530 
	musbødio_ªad_buf_8k
[
FRAME_SIZE
 * 2 + 
AST_FRIENDLY_OFFSET
];

531 
	mªadpos
;

532 
a°_‰ame
 
	mªad_f
;

534 
	mdebugÀvñ
;

535 
	mødiodu∂ex
;

536 
	mw™ãïrom
;

538 
	måa˚ty≥
;

539 
	måa˚Àvñ
;

540 
	m¨ó
;

541 
	mΩäum
;

542 
	midÀöãrvÆ
;

543 
	mtu∫offs
;

544 
	mtx£âÀtime
;

545 
	mtxrxbœnkögtime
;

546 
	mukey
[48];

548 
	mœ°rx
;

549 
	mrxhidsq
;

550 
	mrxhid˘css
;

551 
	mrxˇºõrdëe˘
;

552 
	mrx˘cssdecode
;

553 
	mrxµsq
;

554 
	mrxµ˘css
;

556 
	mrxdcsdecode
;

557 
	mrxlsddecode
;

559 
	mrxkeyty≥
;

560 
	mrxkeyed
;

562 
	mœ°tx
;

563 
	mtxkeyed
;

564 
	mtxch™key
;

565 
	mtxã°key
;

567 
	mrx⁄˙t
;

568 
	mrx⁄dñay
;

570 
time_t
 
	mœ°hidtime
;

571 
a°_d•
 *
	md•
;

573 
t_pmr_ch™
 *
	mpmrCh™
;

575 
	mrx˝ußvî
;

576 
	mtx˝ußvî
;

578 
	mrxdemod
;

579 
	mrxgaö
;

580 
	mrxcdty≥
;

581 
	mrxsdty≥
;

582 
	mrxsquñchadj
;

583 
	mrxsqhy°
;

584 
	mrxsqvoxadj
;

585 
	mrxnoi£fûty≥
;

586 
	mrxsquñchdñay
;

587 
	mtxto˘y≥
;

589 
	mtx¥ñim
;

590 
	mtxlim⁄ly
;

591 
	mtx˘cssgaö
;

592 
	mtxmixa
;

593 
	mtxmixb
;

595 
	mövîçâ
;

597 
	mrx˘cs§ñax
;

598 
	mrx˘cssgaö
;

600 
	mtx˘cssdeÁu…
[16];

601 
	mrx˘css‰eqs
[512];

602 
	mtx˘css‰eqs
[512];

604 
	mtx˘css‰eq
[32];

605 
	mrx˘css‰eq
[32];

607 
	mnumrx˘css‰eqs
;

608 
	mnumtx˘css‰eqs
;

610 *
	mrx˘css
[
CTCSS_NUM_CODES
];

611 *
	mtx˘css
[
CTCSS_NUM_CODES
];

613 
	mtx‰eq
;

614 
	mrx‰eq
;

617 
	m£t_tx˘cssdeÁu…
[16];

618 
	m£t_tx˘css‰eq
[16];

619 
	m£t_rx˘css‰eq
[16];

621 
	m£t_numrx˘css‰eqs
;

622 
	m£t_numtx˘css‰eqs
;

624 
	m£t_rx˘css‰eqs
[16];

625 
	m£t_tx˘css‰eqs
[16];

627 *
	m£t_rx˘css
;

628 *
	m£t_tx˘css
;

630 
	m£t_tx‰eq
;

631 
	m£t_rx‰eq
;

633 
	mrx˘cssovîride
;

636 
	mrxmixî£t
;

637 
	mrxboo°£t
;

638 
	mtxboo°£t
;

639 
	mrxvoi˚adj
;

640 
	mrx˘csßdj
;

641 
	mtxmixa£t
;

642 
	mtxmixb£t
;

643 
	mtx˘csßdj
;

645 
	mechomode
;

646 
	mechoög
;

647 
a°_muãx_t
 
	mechﬁock
;

648 
qñem
 
	mechoq
;

649 
	mechomax
;

651 
	mhdwty≥
;

652 
	mhid_gpio_˘l
;

653 
	mhid_gpio_˘l_loc
;

654 
	mhid_io_c‹
;

655 
	mhid_io_c‹_loc
;

656 
	mhid_io_˘css
;

657 
	mhid_io_˘css_loc
;

658 
	mhid_io_±t
;

659 
	mhid_gpio_loc
;

660 
öt32_t
 
	mhid_gpio_vÆ
;

661 
öt32_t
 
	mvÆid_gpios
;

662 
öt32_t
 
	mgpio_£t
;

663 
öt32_t
 
	mœ°_gpios_ö
;

664 
	mhad_gpios_ö
;

665 
	mhid_gpio_pul£timî
[32];

666 
öt32_t
 
	mhid_gpio_pul£mask
;

667 
öt32_t
 
	mhid_gpio_œ°mask
;

669 
öt8_t
 
	mœ°_µ_ö
;

670 
	mhad_µ_ö
;

673 
	mrxˇ¥aw
:1;

674 
	mtxˇ¥aw
:1;

675 
	mtxˇp2
:1;

676 
	mrxˇp2
:1;

677 
	mrx∂m⁄
:1;

678 
	mªmŸed
:1;

679 
	mf‹˚txcode
:1;

680 
	mtxpﬁ¨ôy
:1;

681 
	mrxpﬁ¨ôy
:1;

682 
	mdc°xpﬁ¨ôy
:1;

683 
	mdc§xpﬁ¨ôy
:1;

684 
	mlsdtxpﬁ¨ôy
:1;

685 
	mlsdrxpﬁ¨ôy
:1;

686 
	mlo›back
:1;

687 
	mødiﬂ˘ive
:1;

688 }
	mb
;

689 
	mì¥om
[
EEPROM_PHYSICAL_LEN
];

690 
	mì¥om˘l
;

691 
a°_muãx_t
 
	mì¥omlock
;

693 
usb_dev_h™dÀ
 *
	musb_h™dÀ
;

694 
	mªadîrs
;

695 
	mhasusb
;

696 
	musbass
;

697 
timevÆ
 
	mt⁄ëime
;

698 
	mt⁄eÊag
;

699 
öt32_t
 
	mcur_gpios
;

700 *
	mgpios
[32];

701 *
	mµs
[32];

702 
a°_muãx_t
 
	musblock
;

706 
ch™_usbødio_pvt
 
	gusbødio_deÁu…
 = {

707 #i‚def 
NEW_ASTERISK


708 .
cursound
 = -1,

710 .
	gsounddev
 = -1,

711 .
	gdu∂ex
 = 
M_UNSET
,

712 .
	gautﬂnswî
 = 1,

713 .
	gautoh™gup
 = 1,

714 .
	gqueuesize
 = 
QUEUE_SIZE
,

715 .
	g‰ags
 = 
FRAGS
,

716 .
	gext
 = "s",

717 .
	g˘x
 = "default",

718 .
	gªadpos
 = 
AST_FRIENDLY_OFFSET
,

719 .
	gœ°›í
 = { 0, 0 },

720 .
	gboo°
 = 
BOOST_SCALE
,

721 .
	gw™ãïrom
 = 1,

722 .
	g¨ó
 = 0,

723 .
	gΩäum
 = 0,

724 .
	gu£dtmf
 = 1,

725 .
	grx⁄dñay
 = 0,

730 
°‹e_rxvoi˚adj
(
ch™_usbødio_pvt
 *
o
, *
s
);

731 
°‹e_rx˘csßdj
(
ch™_usbødio_pvt
 *
o
, *
s
);

732 
°‹e_txto˘y≥
(
ch™_usbødio_pvt
 *
o
, *
s
);

733 
hidhdwc⁄fig
(
ch™_usbødio_pvt
 *
o
);

734 
£t_tx˘css_Àvñ
(
ch™_usbødio_pvt
 *
o
);

735 
pmrdump
(
ch™_usbødio_pvt
 *
o
);

736 
mu…_£t
(
ch™_usbødio_pvt
 *
o
);

737 
mu…_ˇlc
(
vÆue
);

738 
mixî_wrôe
(
ch™_usbødio_pvt
 *
o
);

739 
tu√_rxöput
(
fd
, 
ch™_usbødio_pvt
 *
o
, 
£tsql
, 
Êag
);

740 
tu√_rxvoi˚
(
fd
, 
ch™_usbødio_pvt
 *
o
, 
Êag
);

741 
tu√_míusuµ‹t
(
fd
, 
ch™_usbødio_pvt
 *
o
, *
cmd
);

742 
tu√_rx˘css
(
fd
, 
ch™_usbødio_pvt
 *
o
, 
Êag
);

743 
tu√_txouçut
(
ch™_usbødio_pvt
 *
o
, 
vÆue
, 
fd
, 
Êag
);

744 
tu√_wrôe
(
ch™_usbødio_pvt
 *
o
);

746 *
	gusbødio_a˘ive
;

748 
£tf‹m©
(
ch™_usbødio_pvt
 *
o
, 
mode
);

750 
a°_ch™√l
 *
usbødio_ªque°
(c⁄° *
ty≥
, 
f‹m©
, *
d©a


751 , *
ˇu£
);

752 
usbødio_digô_begö
(
a°_ch™√l
 *
c
, 
digô
);

753 
usbødio_digô_íd
(
a°_ch™√l
 *
c
, 
digô
, 
duøti⁄
);

754 
usbødio_ãxt
(
a°_ch™√l
 *
c
, c⁄° *
ãxt
);

755 
usbødio_h™gup
(
a°_ch™√l
 *
c
);

756 
usbødio_™swî
(
a°_ch™√l
 *
c
);

757 
a°_‰ame
 *
usbødio_ªad
(
a°_ch™√l
 *
ch™
);

758 
usbødio_ˇŒ
(
a°_ch™√l
 *
c
, *
de°
, 
timeout
);

759 
usbødio_wrôe
(
a°_ch™√l
 *
ch™
, 
a°_‰ame
 *
f
);

760 
usbødio_ödiˇã
(
a°_ch™√l
 *
ch™
, 
c⁄d
, c⁄° *
d©a
, 
size_t
 
d©Æí
);

761 
usbødio_fixup
(
a°_ch™√l
 *
ﬁdch™
, a°_ch™√»*
√wch™
);

762 
usbødio_£t›ti⁄
(
a°_ch™√l
 *
ch™
, 
›ti⁄
, *
d©a
, 
d©Æí
);

763 
xpmr_c⁄fig
(
ch™_usbødio_pvt
 *
o
);

765 #if 
DEBUG_FILETEST
 == 1

766 
RxTe°It
(
ch™_usbødio_pvt
 *
o
);

769 
	gµöshi·
[] = {0,0,0,0,0,0,0,0,0,0,6,7,5,4,0,3};

771 
	gtdesc
[] = "USB (CM108) Radio Channel Driver";

773 c⁄° 
a°_ch™√l_ãch
 
	gusbødio_ãch
 = {

774 .
ty≥
 = "Radio",

775 .
	gdes¸ùti⁄
 = 
tdesc
,

776 .
	gˇ∑bûôõs
 = 
AST_FORMAT_SLINEAR
,

777 .
	gªque°î
 = 
usbødio_ªque°
,

778 .
	g£nd_digô_begö
 = 
usbødio_digô_begö
,

779 .
	g£nd_digô_íd
 = 
usbødio_digô_íd
,

780 .
	g£nd_ãxt
 = 
usbødio_ãxt
,

781 .
	gh™gup
 = 
usbødio_h™gup
,

782 .
	g™swî
 = 
usbødio_™swî
,

783 .
	gªad
 = 
usbødio_ªad
,

784 .
	gˇŒ
 = 
usbødio_ˇŒ
,

785 .
	gwrôe
 = 
usbødio_wrôe
,

786 .
	gödiˇã
 = 
usbødio_ödiˇã
,

787 .
	gfixup
 = 
usbødio_fixup
,

788 .
	g£t›ti⁄
 = 
usbødio_£t›ti⁄
,

795 
	$Ãound
(
x
)

797  (Ë((
x
 - (()x) >= 0.5f) ? ((()x) + 1) : (()x));

798 
	}
}

800 
	$ød_rxwaô
(
fd
,
ms
)

802 
fd_£t
 
fds
;

803 
timevÆ
 
tv
;

805 
	`FD_ZERO
(&
fds
);

806 
	`FD_SET
(
fd
,&
fds
);

807 
tv
.
tv_u£c
 = 
ms
 * 1000;

808 
tv
.
tv_£c
 = 0;

809 (
	`£À˘
(
fd
 + 1,&
fds
,
NULL
,NULL,&
tv
));

810 
	}
}

812 
	$h≠py_mswaô
(
fd
,
ms
, 
Êag
)

814 
i
;

816 i‡(!
Êag
)

818 
	`u¶ìp
(
ms
 * 1000);

821 
i
 = 0;

822 i‡(
ms
 >100Ë
i
 = 0; i < ms; i += 100)

824 
	`a°_˛i
(
fd
,"\r");

825 i‡(
	`ød_rxwaô
(
fd
,100)) (1);

827 i‡(
	`ød_rxwaô
(
fd
,
ms
 - 
i
)) (1);

828 
	`a°_˛i
(
fd
,"\r");

830 
	}
}

832 
	$µªad
()

834 
c
;

836 
c
 = 0;

837 i‡(
ha•p
 == 1)

839 i‡(
	`io˘l
(
µfd
, 
PPRSTATUS
, &
c
) == -1)

841 
	`a°_log
(
LOG_ERROR
,"U«bÀÅÿªadÖ∞dev %s\n",
µ‹t
);

842 
c
 = 0;

845 i‡(
ha•p
 == 2)

847 
c
 = 
	`öb
(
pba£
 + 1);

849 (
c
);

850 
	}
}

852 
	$µwrôe
(
c
)

854 i‡(
ha•p
 == 1)

856 i‡(
	`io˘l
(
µfd
, 
PPWDATA
, &
c
) == -1)

858 
	`a°_log
(
LOG_ERROR
,"U«bÀÅÿwrôêµ dev %s\n",
µ‹t
);

861 i‡(
ha•p
 == 2)

863 
	`outb
(
c
,
pba£
);

866 
	}
}

868 
	$make_•kr_∂ayback_vÆue
(
ch™_usbødio_pvt
 *
o
,
vÆ
)

870 
v
,
rv
;

872 
v
 = (
vÆ
 * 
o
->
•krmax
) / 1000;

874 i‡(
o
->
devty≥
 =
C108_PRODUCT_ID
Ë 
v
;

875 
rv
 = (
o
->
•krmax
 + 
	`Ãound
(20.0 * 
	`log10
(()(
v
 + 1) / ()(o->spkrmax + 1)) / 0.25));

876 i‡(
rv
 < 0)Ñv = 0;

877  
rv
;

878 
	}
}

886 
	$amixî_max
(
devnum
,*
∑øm
)

888 
rv
,
ty≥
;

889 
°r
[100];

890 
¢d_h˘l_t
 *
h˘l
;

891 
¢d_˘l_ñem_id_t
 *
id
;

892 
¢d_h˘l_ñem_t
 *
ñem
;

893 
¢d_˘l_ñem_öfo_t
 *
öfo
;

895 
	`•rötf
(
°r
,"hw:%d",
devnum
);

896 i‡(
	`¢d_h˘l_›í
(&
h˘l
, 
°r
, 0)) (-1);

897 
	`¢d_h˘l_lﬂd
(
h˘l
);

898 
	`¢d_˘l_ñem_id_Æloˇ
(&
id
);

899 
	`¢d_˘l_ñem_id_£t_öãrÁ˚
(
id
, 
SND_CTL_ELEM_IFACE_MIXER
);

900 
	`¢d_˘l_ñem_id_£t_«me
(
id
, 
∑øm
);

901 
ñem
 = 
	`¢d_h˘l_föd_ñem
(
h˘l
, 
id
);

902 i‡(!
ñem
)

904 
	`¢d_h˘l_˛o£
(
h˘l
);

907 
	`¢d_˘l_ñem_öfo_Æloˇ
(&
öfo
);

908 
	`¢d_h˘l_ñem_öfo
(
ñem
,
öfo
);

909 
ty≥
 = 
	`¢d_˘l_ñem_öfo_gë_ty≥
(
öfo
);

910 
rv
 = 0;

911 
ty≥
)

913 
SND_CTL_ELEM_TYPE_INTEGER
:

914 
rv
 = 
	`¢d_˘l_ñem_öfo_gë_max
(
öfo
);

916 
SND_CTL_ELEM_TYPE_BOOLEAN
:

917 
rv
 = 1;

920 
	`¢d_h˘l_˛o£
(
h˘l
);

921 (
rv
);

922 
	}
}

930 
	$£èmixî
(
devnum
,*
∑øm
, 
v1
, 
v2
)

932 
ty≥
;

933 
°r
[100];

934 
¢d_h˘l_t
 *
h˘l
;

935 
¢d_˘l_ñem_id_t
 *
id
;

936 
¢d_˘l_ñem_vÆue_t
 *
c⁄åﬁ
;

937 
¢d_h˘l_ñem_t
 *
ñem
;

938 
¢d_˘l_ñem_öfo_t
 *
öfo
;

940 
	`•rötf
(
°r
,"hw:%d",
devnum
);

941 i‡(
	`¢d_h˘l_›í
(&
h˘l
, 
°r
, 0)) (-1);

942 
	`¢d_h˘l_lﬂd
(
h˘l
);

943 
	`¢d_˘l_ñem_id_Æloˇ
(&
id
);

944 
	`¢d_˘l_ñem_id_£t_öãrÁ˚
(
id
, 
SND_CTL_ELEM_IFACE_MIXER
);

945 
	`¢d_˘l_ñem_id_£t_«me
(
id
, 
∑øm
);

946 
ñem
 = 
	`¢d_h˘l_föd_ñem
(
h˘l
, 
id
);

947 i‡(!
ñem
)

949 
	`¢d_h˘l_˛o£
(
h˘l
);

952 
	`¢d_˘l_ñem_öfo_Æloˇ
(&
öfo
);

953 
	`¢d_h˘l_ñem_öfo
(
ñem
,
öfo
);

954 
ty≥
 = 
	`¢d_˘l_ñem_öfo_gë_ty≥
(
öfo
);

955 
	`¢d_˘l_ñem_vÆue_Æloˇ
(&
c⁄åﬁ
);

956 
	`¢d_˘l_ñem_vÆue_£t_id
(
c⁄åﬁ
, 
id
);

957 
ty≥
)

959 
SND_CTL_ELEM_TYPE_INTEGER
:

960 
	`¢d_˘l_ñem_vÆue_£t_öãgî
(
c⁄åﬁ
, 0, 
v1
);

961 i‡(
v2
 > 0Ë
	`¢d_˘l_ñem_vÆue_£t_öãgî
(
c⁄åﬁ
, 1, v2);

963 
SND_CTL_ELEM_TYPE_BOOLEAN
:

964 
	`¢d_˘l_ñem_vÆue_£t_öãgî
(
c⁄åﬁ
, 0, (
v1
 != 0));

967 i‡(
	`¢d_h˘l_ñem_wrôe
(
ñem
, 
c⁄åﬁ
))

969 
	`¢d_h˘l_˛o£
(
h˘l
);

972 
	`¢d_h˘l_˛o£
(
h˘l
);

974 
	}
}

976 
	$hid_£t_ouçuts
(
usb_dev_h™dÀ
 *
h™dÀ
,

977 *
ouçuts
)

979 
	`u¶ìp
(1500);

980 
	`usb_c⁄åﬁ_msg
(
h™dÀ
,

981 
USB_ENDPOINT_OUT
 + 
USB_TYPE_CLASS
 + 
USB_RECIP_INTERFACE
,

982 
HID_REPORT_SET
,

983 0 + (
HID_RT_OUTPUT
 << 8),

984 
C108_HID_INTERFACE
,

985 (*)
ouçuts
, 4, 5000);

986 
	}
}

988 
	$hid_gë_öputs
(
usb_dev_h™dÀ
 *
h™dÀ
,

989 *
öputs
)

991 
	`u¶ìp
(1500);

992 
	`usb_c⁄åﬁ_msg
(
h™dÀ
,

993 
USB_ENDPOINT_IN
 + 
USB_TYPE_CLASS
 + 
USB_RECIP_INTERFACE
,

994 
HID_REPORT_GET
,

995 0 + (
HID_RT_INPUT
 << 8),

996 
C108_HID_INTERFACE
,

997 (*)
öputs
, 4, 5000);

998 
	}
}

1000 
	$ªad_ì¥om
(
usb_dev_h™dÀ
 *
h™dÀ
, 
addr
)

1002 
buf
[4];

1004 
buf
[0] = 0x80;

1005 
buf
[1] = 0;

1006 
buf
[2] = 0;

1007 
buf
[3] = 0x80 | (
addr
 & 0x3f);

1008 
	`hid_£t_ouçuts
(
h™dÀ
,
buf
);

1009 
	`mem£t
(
buf
,0,(buf));

1010 
	`hid_gë_öputs
(
h™dÀ
,
buf
);

1011 (
buf
[1] + (buf[2] << 8));

1012 
	}
}

1014 
	$wrôe_ì¥om
(
usb_dev_h™dÀ
 *
h™dÀ
, 
addr
,

1015 
d©a
)

1018 
buf
[4];

1020 
buf
[0] = 0x80;

1021 
buf
[1] = 
d©a
 & 0xff;

1022 
buf
[2] = 
d©a
 >> 8;

1023 
buf
[3] = 0xc0 | (
addr
 & 0x3f);

1024 
	`hid_£t_ouçuts
(
h™dÀ
,
buf
);

1025 
	}
}

1027 
	$gë_ì¥om
(
usb_dev_h™dÀ
 *
h™dÀ
,

1028 *
buf
)

1030 
i
;

1031 
cs
;

1033 
cs
 = 0xffff;

1034 
i
 = 
EEPROM_START_ADDR
; i < 
EEPROM_END_ADDR
; i++)

1036 
cs
 +
buf
[
i
] = 
	`ªad_ì¥om
(
h™dÀ
,i);

1038 (
cs
);

1039 
	}
}

1041 
	$put_ì¥om
(
usb_dev_h™dÀ
 *
h™dÀ
,*
buf
)

1043 
i
;

1044 
cs
;

1046 
cs
 = 0xffff;

1047 
buf
[
EEPROM_MAGIC_ADDR
] = 
EEPROM_MAGIC
;

1048 
i
 = 
EEPROM_START_ADDR
; i < 
EEPROM_CS_ADDR
; i++)

1050 
	`wrôe_ì¥om
(
h™dÀ
,
i
,
buf
[i]);

1051 
cs
 +
buf
[
i
];

1053 
buf
[
EEPROM_CS_ADDR
] = (65535 - 
cs
) + 1;

1054 
	`wrôe_ì¥om
(
h™dÀ
,
i
,
buf
[
EEPROM_CS_ADDR
]);

1055 
	}
}

1057 
usb_devi˚
 *
	$hid_devi˚_öô
(*
desúed_devi˚
)

1059 
usb_bus
 *usb_bus;

1060 
usb_devi˚
 *
dev
;

1061 
dev°r
[200],
°r
[200],
desdev
[200],*
˝
;

1062 
i
;

1063 
FILE
 *
Â
;

1065 
	`usb_öô
();

1066 
	`usb_föd_bus£s
();

1067 
	`usb_föd_devi˚s
();

1068 
usb_bus
 = 
usb_bus£s
;

1069 
usb_bus
;

1070 
usb_bus
 = usb_bus->
√xt
) {

1071 
dev
 = 
usb_bus
->
devi˚s
;

1072 
dev
;

1073 
dev
 = dev->
√xt
) {

1074 i‡((
dev
->
des¸ùt‹
.
idVíd‹


1075 =
C108_VENDOR_ID
) &&

1076 (((
dev
->
des¸ùt‹
.
idProdu˘
 & 0xfffcË=
C108_PRODUCT_ID
) ||

1077 (
dev
->
des¸ùt‹
.
idProdu˘
 =
C108AH_PRODUCT_ID
) ||

1078 (
dev
->
des¸ùt‹
.
idProdu˘
 =
C119A_PRODUCT_ID
) ||

1079 ((
dev
->
des¸ùt‹
.
idProdu˘
 & 0xff00Ë=
N1KDO_PRODUCT_ID
) ||

1080 (
dev
->
des¸ùt‹
.
idProdu˘
 =
C119_PRODUCT_ID
)))

1082 
	`•rötf
(
dev°r
,"%s/%s", 
usb_bus
->
dú«me
,
dev
->
fûíame
);

1083 
i
 = 0; i < 32; i++)

1085 
	`•rötf
(
°r
,"/¥oc/asound/ˇrd%d/usbbus",
i
);

1086 
Â
 = 
	`f›í
(
°r
,"r");

1087 i‡(!
Â
) ;

1088 i‡((!
	`fgës
(
desdev
,(desdevË- 1,
Â
)) || (!desdev[0]))

1090 
	`f˛o£
(
Â
);

1093 
	`f˛o£
(
Â
);

1094 i‡(
desdev
[
	`°æí
(desdev) - 1] == '\n')

1095 
desdev
[
	`°æí
(desdev) -1 ] = 0;

1096 i‡(
	`°rˇ£cmp
(
desdev
,
dev°r
)) ;

1097 i‡(
i
Ë
	`•rötf
(
°r
,"/sys/class/sound/dsp%d/device",i);

1098 
	`°r˝y
(
°r
,"/sys/class/sound/dsp/device");

1099 
	`mem£t
(
desdev
,0,(desdev));

1100 i‡(
	`ªadlök
(
°r
,
desdev
,(desdev) - 1) == -1)

1102 
	`•rötf
(
°r
,"/sys/˛ass/sound/c⁄åﬁC%d/devi˚",
i
);

1103 
	`mem£t
(
desdev
,0,(desdev));

1104 i‡(
	`ªadlök
(
°r
,
desdev
,(desdev) - 1) == -1) ;

1106 
˝
 = 
	`°ºchr
(
desdev
,'/');

1107 i‡(
˝
) *cp = 0; ;

1108 
˝
 = 
	`°ºchr
(
desdev
,'/');

1109 i‡(!
˝
) ;

1110 
˝
++;

1113 i‡(
i
 >= 32) ;

1114 i‡(!
	`°rcmp
(
˝
,
desúed_devi˚
)Ë 
dev
;

1119  
NULL
;

1120 
	}
}

1122 
	$hid_devi˚_mkli°
()

1124 
usb_bus
 *usb_bus;

1125 
usb_devi˚
 *
dev
;

1126 
dev°r
[200],
°r
[200],
desdev
[200],*
˝
;

1127 
i
;

1128 
FILE
 *
Â
;

1130 
	`a°_muãx_lock
(&
usb_li°_lock
);

1131 i‡(
usb_devi˚_li°
Ë
	`a°_‰ì
(usb_device_list);

1132 
usb_devi˚_li°
 = 
	`a°_mÆloc
(2);

1133 i‡(!
usb_devi˚_li°
)

1135 
	`a°_muãx_u∆ock
(&
usb_li°_lock
);

1138 
	`mem£t
(
usb_devi˚_li°
,0,2);

1140 
	`usb_öô
();

1141 
	`usb_föd_bus£s
();

1142 
	`usb_föd_devi˚s
();

1143 
usb_bus
 = 
usb_bus£s
;

1144 
usb_bus
;

1145 
usb_bus
 = usb_bus->
√xt
) {

1146 
dev
 = 
usb_bus
->
devi˚s
;

1147 
dev
;

1148 
dev
 = dev->
√xt
) {

1149 i‡((
dev
->
des¸ùt‹
.
idVíd‹


1150 =
C108_VENDOR_ID
) &&

1151 (((
dev
->
des¸ùt‹
.
idProdu˘
 & 0xfffcË=
C108_PRODUCT_ID
) ||

1152 (
dev
->
des¸ùt‹
.
idProdu˘
 =
C108AH_PRODUCT_ID
) ||

1153 (
dev
->
des¸ùt‹
.
idProdu˘
 =
C119A_PRODUCT_ID
) ||

1154 ((
dev
->
des¸ùt‹
.
idProdu˘
 & 0xff00Ë=
N1KDO_PRODUCT_ID
) ||

1155 (
dev
->
des¸ùt‹
.
idProdu˘
 =
C119_PRODUCT_ID
)))

1157 
	`•rötf
(
dev°r
,"%s/%s", 
usb_bus
->
dú«me
,
dev
->
fûíame
);

1158 
i
 = 0;i < 32; i++)

1160 
	`•rötf
(
°r
,"/¥oc/asound/ˇrd%d/usbbus",
i
);

1161 
Â
 = 
	`f›í
(
°r
,"r");

1162 i‡(!
Â
) ;

1163 i‡((!
	`fgës
(
desdev
,(desdevË- 1,
Â
)) || (!desdev[0]))

1165 
	`f˛o£
(
Â
);

1168 
	`f˛o£
(
Â
);

1169 i‡(
desdev
[
	`°æí
(desdev) - 1] == '\n')

1170 
desdev
[
	`°æí
(desdev) -1 ] = 0;

1171 i‡(
	`°rˇ£cmp
(
desdev
,
dev°r
)) ;

1172 i‡(
i
Ë
	`•rötf
(
°r
,"/sys/class/sound/dsp%d/device",i);

1173 
	`°r˝y
(
°r
,"/sys/class/sound/dsp/device");

1174 
	`mem£t
(
desdev
,0,(desdev));

1175 i‡(
	`ªadlök
(
°r
,
desdev
,(desdev) - 1) == -1)

1177 
	`•rötf
(
°r
,"/sys/˛ass/sound/c⁄åﬁC%d/devi˚",
i
);

1178 
	`mem£t
(
desdev
,0,(desdev));

1179 i‡(
	`ªadlök
(
°r
,
desdev
,(desdev) - 1) == -1) ;

1181 
˝
 = 
	`°ºchr
(
desdev
,'/');

1182 i‡(
˝
) *cp = 0; ;

1183 
˝
 = 
	`°ºchr
(
desdev
,'/');

1184 i‡(!
˝
) ;

1185 
˝
++;

1188 i‡(
i
 >= 32)

1190 
	`a°_muãx_u∆ock
(&
usb_li°_lock
);

1193 
usb_devi˚_li°
 = 
	`a°_ªÆloc
(usb_device_list,

1194 
usb_devi˚_li°_size
 + 2 +

1195 
	`°æí
(
˝
));

1196 i‡(!
usb_devi˚_li°
)

1198 
	`a°_muãx_u∆ock
(&
usb_li°_lock
);

1201 
usb_devi˚_li°_size
 +
	`°æí
(
˝
) + 2;

1202 
i
 = 0;

1203 
usb_devi˚_li°
[
i
])

1205 
i
 +
	`°æí
(
usb_devi˚_li°
 + i) + 1;

1207 
	`°rˇt
(
usb_devi˚_li°
 + 
i
,
˝
);

1208 
usb_devi˚_li°
[
	`°æí
(
˝
Ë+ 
i
 + 1] = 0;

1213 
	`a°_muãx_u∆ock
(&
usb_li°_lock
);

1215 
	}
}

1218 
	$usb_gë_usbdev
(*
dev°r
)

1220 
i
;

1221 
°r
[200],
desdev
[200],*
˝
;

1223 
i
 = 0;i < 32; i++)

1225 i‡(
i
Ë
	`•rötf
(
°r
,"/sys/class/sound/dsp%d/device",i);

1226 
	`°r˝y
(
°r
,"/sys/class/sound/dsp/device");

1227 
	`mem£t
(
desdev
,0,(desdev));

1228 i‡(
	`ªadlök
(
°r
,
desdev
,(desdev) - 1) == -1)

1230 
	`•rötf
(
°r
,"/sys/˛ass/sound/c⁄åﬁC%d/devi˚",
i
);

1231 
	`mem£t
(
desdev
,0,(desdev));

1232 i‡(
	`ªadlök
(
°r
,
desdev
,(desdev) - 1) == -1) ;

1234 
˝
 = 
	`°ºchr
(
desdev
,'/');

1235 i‡(
˝
) *cp = 0; ;

1236 
˝
 = 
	`°ºchr
(
desdev
,'/');

1237 i‡(!
˝
) ;

1238 
˝
++;

1239 i‡(!
	`°rˇ£cmp
(
˝
,
dev°r
)) ;

1241 i‡(
i
 >= 32)  -1;

1242  
i
;

1244 
	}
}

1246 
	$usb_li°_check
(*
dev°r
)

1249 *
s
 = 
usb_devi˚_li°
;

1251 i‡(!
s
) (0);

1252 *
s
)

1254 i‡(!
	`°rˇ£cmp
(
s
,
dev°r
)) (1);

1255 
s
 +
	`°æí
(s) + 1;

1258 
	}
}

1261 
	$hidhdwc⁄fig
(
ch™_usbødio_pvt
 *
o
)

1263 
i
;

1270 if(
o
->
hdwty≥
==1)

1272 
o
->
hid_gpio_˘l
 = 8;

1273 
o
->
hid_gpio_˘l_loc
 = 2;

1274 
o
->
hid_io_c‹
 = 4;

1275 
o
->
hid_io_c‹_loc
 = 1;

1276 
o
->
hid_io_˘css
 = 2;

1277 
o
->
hid_io_˘css_loc
 = 1;

1278 
o
->
hid_io_±t
 = 8;

1279 
o
->
hid_gpio_loc
 = 1;

1280 
o
->
vÆid_gpios
 = 1;

1282 if(
o
->
hdwty≥
==0)

1284 
o
->
hid_gpio_˘l
 = 4;

1285 
o
->
hid_gpio_˘l_loc
 = 2;

1286 
o
->
hid_io_c‹
 = 2;

1287 
o
->
hid_io_c‹_loc
 = 0;

1288 
o
->
hid_io_˘css
 = 1;

1289 
o
->
hid_io_˘css_loc
 = 0;

1290 
o
->
hid_io_±t
 = 4;

1291 
o
->
hid_gpio_loc
 = 1;

1292 
o
->
vÆid_gpios
 = 0xfb;

1294 if(
o
->
hdwty≥
==2)

1296 
o
->
hid_gpio_˘l
 = 4;

1297 
o
->
hid_gpio_˘l_loc
 = 2;

1298 
o
->
hid_io_c‹
 = 2;

1299 
o
->
hid_io_c‹_loc
 = 0;

1300 
o
->
hid_io_˘css
 = 1;

1301 
o
->
hid_io_˘css_loc
 = 0;

1302 
o
->
hid_io_±t
 = 4;

1303 
o
->
hid_gpio_loc
 = 1;

1304 
o
->
vÆid_gpios
 = 0;

1306 if(
o
->
hdwty≥
==3)

1308 
o
->
hid_gpio_˘l
 = 0x0c;

1309 
o
->
hid_gpio_˘l_loc
 = 2;

1310 
o
->
hid_io_c‹
 = 2;

1311 
o
->
hid_io_c‹_loc
 = 0;

1312 
o
->
hid_io_˘css
 = 2;

1313 
o
->
hid_io_˘css_loc
 = 1;

1314 
o
->
hid_io_±t
 = 4;

1315 
o
->
hid_gpio_loc
 = 1;

1316 
o
->
vÆid_gpios
 = 1;

1318 
o
->
hid_gpio_vÆ
 = 0;

1319 
i
 = 0; i < 32; i++)

1322 i‡(!
o
->
gpios
[
i
]) ;

1324 i‡(
	`°∫ˇ£cmp
(
o
->
gpios
[
i
],"out",3)) ;

1326 i‡((1 << 
i
Ë& 
o
->
hid_io_±t
)

1328 
	`a°_log
(
LOG_ERROR
,"You c™'à•ecify gpio%d, sö˚ it†thêPTT!!!\n",
i
 + 1);

1332 i‡(!(
o
->
vÆid_gpios
 & (1 << 
i
)))

1334 
	`a°_log
(
LOG_ERROR
,"You c™'à•ecify gpio%d, iài†nŸ vÆid i¿thi†c⁄figuøti⁄\n",
i
 + 1);

1337 
o
->
hid_gpio_˘l
 |(1 << 
i
);

1339 i‡(!
	`°rˇ£cmp
(
o
->
gpios
[
i
],"out1")Ëo->
hid_gpio_vÆ
 |= (1 << i);

1342 
	}
}

1345 
	$kick±t
(
ch™_usbødio_pvt
 *
o
)

1347 
c
 = 0;

1349 i‡(!
o
) ;

1350 i‡(!
o
->
±tkick
) ;

1351 
	`wrôe
(
o
->
±tkick
[1],&
c
,1);

1352 
	}
}

1357 
ch™_usbødio_pvt
 *
	$föd_desc
(*
dev
)

1359 
ch™_usbødio_pvt
 *
o
 = 
NULL
;

1361 i‡(!
dev
)

1362 
	`a°_log
(
LOG_WARNING
, "null dev\n");

1365 
o
 = 
usbødio_deÁu…
.
√xt
; o && o->
«me
 && 
dev
 && 
	`°rcmp
(o->name, dev) != 0; o = o->next);

1366 i‡(!
o
)

1368 
	`a°_log
(
LOG_WARNING
, "couldÇŸ föd <%s>\n", 
dev
 ? dev : "--no-device--");

1369  
NULL
;

1371  
o
;

1372 
	}
}

1374 
ch™_usbødio_pvt
 *
	$föd_desc_usb
(*
dev°r
)

1376 
ch™_usbødio_pvt
 *
o
 = 
NULL
;

1378 i‡(!
dev°r
)

1379 
	`a°_log
(
LOG_WARNING
, "null dev\n");

1381 
o
 = 
usbødio_deÁu…
.
√xt
; o && 
dev°r
 && 
	`°rcmp
(o->devstr, devstr) != 0; o = o->next);

1383  
o
;

1384 
	}
}

1386 *
	$pul£πhªad
(*
¨g
)

1388 
timevÆ
 
now
,
thí
;

1389 
i
,
j
,
k
;

1391 i‡(
ha•p
 =2Ë
	`i›îm
(
pba£
,2,1);

1392 
°›pul£r
 = 0;

1393 
µ_œ°mask
 = 0;

1394 
	`a°_muãx_lock
(&
µ_lock
);

1395 
	`µwrôe
(
µ_vÆ
);

1396 
	`a°_muãx_u∆ock
(&
µ_lock
);

1397 
thí
 = 
	`a°_tvnow
();

1398 !
°›pul£r
)

1400 
	`u¶ìp
(50000);

1401 
	`a°_muãx_lock
(&
µ_lock
);

1402 
now
 = 
	`a°_tvnow
();

1403 
j
 = 
	`a°_tvdiff_ms
(
now
,
thí
);

1404 
thí
 = 
now
;

1406 
µ_œ°mask
 = 
µ_pul£mask
;

1407 
µ_pul£mask
 = 0;

1408 
i
 = 2; i <= 9; i++)

1410 
k
 = 
µ_pul£timî
[
i
];

1411 i‡(
k
)

1413 
k
 -
j
;

1414 i‡(
k
 < 0) k = 0;

1415 
µ_pul£timî
[
i
] = 
k
;

1417 i‡(
k
Ë
µ_pul£mask
 |1 << (
i
 - 2);

1419 i‡(
µ_pul£mask
 !
µ_œ°mask
)

1421 
µ_vÆ
 ^
µ_œ°mask
 ^ 
µ_pul£mask
;

1422 
	`µwrôe
(
µ_vÆ
);

1424 
	`a°_muãx_u∆ock
(&
µ_lock
);

1426 
	`±hªad_exô
(0);

1427 
	}
}

1432 *
	$hidthªad
(*
¨g
)

1434 
buf
[4],
bufßve
[4],
keyed
;

1435 
œ°rx
, 
txtmp
, 
‚ame
[200], *
s
;

1436 
i
,
j
,
k
,
ªs
;

1437 
usb_devi˚
 *
usb_dev
;

1438 
usb_dev_h™dÀ
 *
usb_h™dÀ
;

1439 
ch™_usbødio_pvt
 *
o
 = (ch™_usbødio_pvà*Ë
¨g
,*
ao
,**
a›
;

1440 
timevÆ
 
to
,
thí
;

1441 
a°_c⁄fig
 *
cfg1
;

1442 
a°_v¨übÀ
 *
v
;

1443 
fd_£t
 
rfds
;

1445 
usb_dev
 = 
NULL
;

1446 
usb_h™dÀ
 = 
NULL
;

1448 i‡(
ha•p
 =2Ë
	`i›îm
(
pba£
,2,1);

1449 !
o
->
°›hid
)

1451 
	`time
(&
o
->
œ°hidtime
);

1452 
	`a°_muãx_lock
(&
usb_dev_lock
);

1453 
o
->
hasusb
 = 0;

1454 
o
->
usbass
 = 0;

1455 
o
->
devi˚num
 = 0;

1456 i‡(
usb_h™dÀ
Ë
	`usb_˛o£
(usb_handle);

1457 
usb_h™dÀ
 = 
NULL
;

1458 
usb_dev
 = 
NULL
;

1459 
	`hid_devi˚_mkli°
();

1460 
s
 = 
usb_devi˚_li°
; *s; s +
	`°æí
(s) + 1)

1462 
i
 = 
	`usb_gë_usbdev
(
s
);

1463 i‡(
i
 < 0) ;

1464 
usb_dev
 = 
	`hid_devi˚_öô
(
s
);

1465 i‡(
usb_dev
 =
NULL
) ;

1466 i‡((
usb_dev
->
des¸ùt‹
.
idProdu˘
 & 0xff00Ë!
N1KDO_PRODUCT_ID
) ;

1467 i‡(
o
->
ödex
 !(
usb_dev
->
des¸ùt‹
.
idProdu˘
 & 0xf)) ;

1468 
	`a°_log
(
LOG_NOTICE
,"N1KDOÖort %d, USB device %s usbradio channel %s\n",

1469 
usb_dev
->
des¸ùt‹
.
idProdu˘
 & 0xf,
s
,
o
->
«me
);

1470 
	`°r˝y
(
o
->
dev°r
,
s
);

1473 i‡((!
	`usb_li°_check
(
o
->
dev°r
)Ë|| (!
	`föd_desc_usb
(o->devstr)))

1475 
s
 = 
usb_devi˚_li°
; *s; s +
	`°æí
(s) + 1)

1477 i‡(!
	`föd_desc_usb
(
s
)) ;

1479 i‡(!*
s
)

1481 
	`a°_muãx_u∆ock
(&
usb_dev_lock
);

1482 
	`u¶ìp
(500000);

1485 
i
 = 
	`usb_gë_usbdev
(
s
);

1486 i‡(
i
 < 0)

1488 
	`a°_muãx_u∆ock
(&
usb_dev_lock
);

1489 
	`u¶ìp
(500000);

1492 
ao
 = 
usbødio_deÁu…
.
√xt
;áÿ&&áo->
«me
 ;áo =áo->next)

1494 i‡(
ao
->
usbass
 && (!
	`°rcmp
◊o->
dev°r
,
s
))) ;

1496 i‡(
ao
)

1498 
	`a°_muãx_u∆ock
(&
usb_dev_lock
);

1499 
	`u¶ìp
(500000);

1502 
	`a°_log
(
LOG_NOTICE
,"Assig√d USB devi˚ %†tÿusbødiÿch™√»%s\n",
s
,
o
->
«me
);

1503 
	`°r˝y
(
o
->
dev°r
,
s
);

1505 
i
 = 
	`usb_gë_usbdev
(
o
->
dev°r
);

1506 i‡(
i
 < 0)

1508 
	`a°_muãx_u∆ock
(&
usb_dev_lock
);

1509 
	`u¶ìp
(500000);

1512 
o
->
devi˚num
 = 
i
;

1513 
a›
 = &
usbødio_deÁu…
.
√xt
; *a› && (*a›)->
«me
 ;áop = &((*aop)->next))

1515 i‡(
	`°rcmp
((*(
a›
))->
«me
,
o
->name)) ;

1516 
o
->
√xt
 = (*(
a›
))->next;

1517 *
a›
 = 
o
;

1520 
o
->
usbass
 = 1;

1521 
usb_dev
 = 
	`hid_devi˚_öô
(
o
->
dev°r
);

1522 i‡(
usb_dev
 =
NULL
) {

1523 
	`u¶ìp
(500000);

1524 
	`a°_muãx_u∆ock
(&
usb_dev_lock
);

1527 
	`a°_muãx_u∆ock
(&
usb_dev_lock
);

1529 
o
->
micmax
 = 
	`amixî_max
(o->
devi˚num
,
MIXER_PARAM_MIC_CAPTURE_VOL
);

1530 
o
->
•krmax
 = 
	`amixî_max
(o->
devi˚num
,
MIXER_PARAM_SPKR_PLAYBACK_VOL
);

1532 
usb_h™dÀ
 = 
	`usb_›í
(
usb_dev
);

1533 i‡(
usb_h™dÀ
 =
NULL
) {

1534 
	`u¶ìp
(500000);

1537 i‡(
	`usb_˛aim_öãrÁ˚
(
usb_h™dÀ
,
C108_HID_INTERFACE
) < 0)

1539 i‡(
	`usb_dëach_kî√l_drivî_≈
(
usb_h™dÀ
,
C108_HID_INTERFACE
) < 0) {

1540 
	`a°_log
(
LOG_ERROR
,"NotábleÅo detachÅhe USB device\n");

1541 
	`u¶ìp
(500000);

1544 i‡(
	`usb_˛aim_öãrÁ˚
(
usb_h™dÀ
,
C108_HID_INTERFACE
) < 0) {

1545 
	`a°_log
(
LOG_ERROR
,"NotábleÅo claimÅhe USB device\n");

1546 
	`u¶ìp
(500000);

1550 
	`mem£t
(
buf
,0,(buf));

1551 
buf
[
o
->
hid_gpio_˘l_loc
] = o->
hid_gpio_˘l
;

1552 
buf
[
o
->
hid_gpio_loc
] = o->
hid_gpio_vÆ
;

1553 
	`hid_£t_ouçuts
(
usb_h™dÀ
,
buf
);

1554 
	`mem˝y
(
bufßve
,
buf
,(buf));

1555 i‡(
	`pùe
(
o
->
±tkick
) == -1)

1557 
	`a°_log
(
LOG_ERROR
,"NotábleÅo createÖipe\n");

1558 
	`±hªad_exô
(
NULL
);

1560 i‡((
usb_dev
->
des¸ùt‹
.
idProdu˘
 & 0xfffcË=
C108_PRODUCT_ID
)

1561 
o
->
devty≥
 = 
C108_PRODUCT_ID
;

1563 
o
->
devty≥
 = 
usb_dev
->
des¸ùt‹
.
idProdu˘
;

1564 
	`åa˚usb1
(("hidthªad: SèπögÇ‹mÆly o¿%s!!\n",
o
->
«me
));

1565 
œ°rx
 = 0;

1566 i‡(
›ti⁄_vîbo£
 > 1)

1568 
	`a°_muãx_lock
(&
usb_dev_lock
);

1569 
	`a°_vîbo£
(
VERBOSE_PREFIX_2
 "Së devi˚ %†tÿ%s\n",
o
->
dev°r
,o->
«me
);

1570 
	`a°_muãx_u∆ock
(&
usb_dev_lock
);

1572 if(
o
->
pmrCh™
==
NULL
)

1574 
t_pmr_ch™
 
tCh™
;

1577 
	`mem£t
(&
tCh™
,0,(
t_pmr_ch™
));

1579 
tCh™
.
pTxCodeDeÁu…
 = 
o
->
tx˘cssdeÁu…
;

1580 
tCh™
.
pRxCodeSrc
 = 
o
->
rx˘css‰eqs
;

1581 
tCh™
.
pTxCodeSrc
 = 
o
->
tx˘css‰eqs
;

1583 
tCh™
.
rxDemod
=
o
->
rxdemod
;

1584 
tCh™
.
rxCdTy≥
=
o
->
rxcdty≥
;

1585 
tCh™
.
rxSqVoxAdj
=
o
->
rxsqvoxadj
;

1587 i‡(
o
->
txlim⁄ly
)

1588 
tCh™
.
txMod
 = 1;

1589 i‡(
o
->
tx¥ñim
)

1590 
tCh™
.
txMod
 = 2;

1592 
tCh™
.
txMixA
 = 
o
->
txmixa
;

1593 
tCh™
.
txMixB
 = 
o
->
txmixb
;

1595 
tCh™
.
rxCpuSavî
=
o
->
rx˝ußvî
;

1596 
tCh™
.
txCpuSavî
=
o
->
tx˝ußvî
;

1598 
tCh™
.
b
.
rxpﬁ¨ôy
=
o
->b.rxpolarity;

1599 
tCh™
.
b
.
txpﬁ¨ôy
=
o
->b.txpolarity;

1601 
tCh™
.
b
.
dc§xpﬁ¨ôy
=
o
->b.dcsrxpolarity;

1602 
tCh™
.
b
.
dc°xpﬁ¨ôy
=
o
->b.dcstxpolarity;

1604 
tCh™
.
b
.
lsdrxpﬁ¨ôy
=
o
->b.lsdrxpolarity;

1605 
tCh™
.
b
.
lsdtxpﬁ¨ôy
=
o
->b.lsdtxpolarity;

1607 
tCh™
.
åa˚ty≥
=
o
->tracetype;

1608 
tCh™
.
åa˚Àvñ
=
o
->tracelevel;

1610 
tCh™
.
Ωäum
=
o
->rptnum;

1611 
tCh™
.
idÀöãrvÆ
=
o
->idleinterval;

1612 
tCh™
.
tu∫offs
=
o
->turnoffs;

1613 
tCh™
.
¨ó
=
o
->area;

1614 
tCh™
.
ukey
=
o
->ukey;

1615 
tCh™
.
«me
=
o
->name;

1616 
tCh™
.
b
.
txboo°
 = 
o
->
txboo°£t
;

1618 
o
->
pmrCh™
=
	`¸óãPmrCh™√l
(&
tCh™
,
FRAME_SIZE
);

1620 
o
->
pmrCh™
->
ødioDu∂ex
=o->
ødiodu∂ex
;

1621 
o
->
pmrCh™
->
b
.
lo›back
=0;

1622 
o
->
pmrCh™
->
b
.
ødiﬂ˘ive
=o->b.radioactive;

1623 
o
->
pmrCh™
->
tx£âÀtime
=o->txsettletime;

1624 
o
->
pmrCh™
->
txrxbœnkögtime
=o->txrxblankingtime;

1625 
o
->
pmrCh™
->
rxCpuSavî
=o->
rx˝ußvî
;

1626 
o
->
pmrCh™
->
txCpuSavî
=o->
tx˝ußvî
;

1628 *(
o
->
pmrCh™
->
¥xSquñchAdju°
) =

1629 ((999 - 
o
->
rxsquñchadj
) * 32767) / 1000;

1631 *(
o
->
pmrCh™
->
¥xVoi˚Adju°
)=o->
rxvoi˚adj
*
M_Q8
;

1632 *(
o
->
pmrCh™
->
¥xCtcssAdju°
)=o->
rx˘csßdj
*
M_Q8
;

1633 
o
->
pmrCh™
->
rxCtcss
->
ªœx
=o->
rx˘cs§ñax
;

1634 
o
->
pmrCh™
->
txTocTy≥
 = o->
txto˘y≥
;

1636 i‡–(
o
->
txmixa
 =
TX_OUT_LSD
) ||

1637 (
o
->
txmixa
 =
TX_OUT_COMPOSITE
) ||

1638 (
o
->
txmixb
 =
TX_OUT_LSD
) ||

1639 (
o
->
txmixb
 =
TX_OUT_COMPOSITE
))

1641 
	`£t_tx˘css_Àvñ
(
o
);

1644 if–(
o
->
txmixa
!=
TX_OUT_VOICE
Ë&& (o->
txmixb
!=TX_OUT_VOICE) &&

1645 (
o
->
txmixa
!=
TX_OUT_COMPOSITE
Ë&& (o->
txmixb
!=TX_OUT_COMPOSITE)

1648 
	`a°_log
(
LOG_ERROR
,"NoÅxvoice output configured.\n");

1651 if–
o
->
tx˘css‰eq
[0] &&

1652 
o
->
txmixa
!=
TX_OUT_LSD
 && o->txmixa!=
TX_OUT_COMPOSITE
 &&

1653 
o
->
txmixb
!=
TX_OUT_LSD
 && o->txmixb!=
TX_OUT_COMPOSITE


1656 
	`a°_log
(
LOG_ERROR
,"NoÅxtone output configured.\n");

1659 if(
o
->
b
.
ødiﬂ˘ive
)

1661 
ch™_usbødio_pvt
 *
ao
;

1662 
ao
 = 
usbødio_deÁu…
.
√xt
;áÿ&&áo->
«me
 ;áÿao->√xtÔo->
pmrCh™
->
b
.
ødiﬂ˘ive
=0;

1663 
usbødio_a˘ive
 = 
o
->
«me
;

1664 
o
->
pmrCh™
->
b
.
ødiﬂ˘ive
=1;

1665 
	`a°_log
(
LOG_NOTICE
,"ødiÿa˘ivê£àtÿ[%s]\n",
o
->
«me
);

1668 
	`xpmr_c⁄fig
(
o
);

1669 
	`mixî_wrôe
(
o
);

1670 
	`mu…_£t
(
o
);

1672 
	`¢¥ötf
(
‚ame
,(‚ameË- 1,
c⁄fig1
,
o
->
«me
);

1673 #ifdef 
NEW_ASTERISK


1674 
cfg1
 = 
	`a°_c⁄fig_lﬂd
(
‚ame
,
zîoÊag
);

1676 
cfg1
 = 
	`a°_c⁄fig_lﬂd
(
‚ame
);

1678 
o
->
rxmixî£t
 = 500;

1679 
o
->
txmixa£t
 = 500;

1680 
o
->
txmixb£t
 = 500;

1681 
o
->
rxvoi˚adj
 = 0.5;

1682 
o
->
rx˘csßdj
 = 0.5;

1683 
o
->
tx˘csßdj
 = 200;

1684 
o
->
rxsquñchadj
 = 500;

1685 i‡(
cfg1
) {

1686 
v
 = 
	`a°_v¨übÀ_brow£
(
cfg1
, 
o
->
«me
); v; v = v->
√xt
) {

1688 
	`M_START
((*)
v
->
«me
, (*)v->
vÆue
);

1689 
	`M_UINT
("rxmixî£t", 
o
->
rxmixî£t
)

1690 
	`M_UINT
("txmixa£t", 
o
->
txmixa£t
)

1691 
	`M_UINT
("txmixb£t", 
o
->
txmixb£t
)

1692 
	`M_F
("rxvoi˚adj",
	`°‹e_rxvoi˚adj
(
o
,(*)
v
->
vÆue
))

1693 
	`M_F
("rx˘csßdj",
	`°‹e_rx˘csßdj
(
o
,(*)
v
->
vÆue
))

1694 
	`M_UINT
("tx˘csßdj",
o
->
tx˘csßdj
);

1695 
	`M_UINT
("rxsquñchadj", 
o
->
rxsquñchadj
)

1696 
	`M_END
(;

1699 
	`a°_c⁄fig_de°roy
(
cfg1
);

1700 
	`a°_log
(
LOG_WARNING
,"LﬂdedÖ¨amëî†‰om %†f‹ devi˚ %†.\n",
‚ame
,
o
->
«me
);

1701 } 
	`a°_log
(
LOG_WARNING
,"Fûê%†nŸ found, devi˚ %†usög deÁu…Ö¨amëîs.\n",
‚ame
,
o
->
«me
);

1703 
	`mixî_wrôe
(
o
);

1704 
	`mu…_£t
(
o
);

1705 
	`£t_tx˘css_Àvñ
(
o
);

1706 
	`a°_muãx_lock
(&
o
->
ì¥omlock
);

1707 i‡(
o
->
w™ãïrom
Ëo->
ì¥om˘l
 = 1;

1708 
	`a°_muãx_u∆ock
(&
o
->
ì¥omlock
);

1709 
	`£tf‹m©
(
o
,
O_RDWR
);

1710 
o
->
hasusb
 = 1;

1711 
o
->
had_gpios_ö
 = 0;

1713 (!
o
->
°›hid
Ë&& o->
hasusb
)

1715 
to
.
tv_£c
 = 0;

1716 
to
.
tv_u£c
 = 50000;

1718 
	`FD_ZERO
(&
rfds
);

1719 
	`FD_SET
(
o
->
±tkick
[0],&
rfds
);

1720 
thí
 = 
	`a°_tvnow
();

1722 
ªs
 = 
	`a°_£À˘
(
o
->
±tkick
[0] + 1, &
rfds
, 
NULL
, NULL, &
to
);

1723 i‡(
ªs
 < 0) {

1724 
	`a°_log
(
LOG_WARNING
, "£À˘ faûed: %s\n", 
	`°ªº‹
(
î∫o
));

1725 
	`u¶ìp
(10000);

1728 i‡(
	`FD_ISSET
(
o
->
±tkick
[0],&
rfds
))

1730 
c
;

1732 
	`ªad
(
o
->
±tkick
[0],&
c
,1);

1734 if(
o
->
w™ãïrom
)

1736 
	`a°_muãx_lock
(&
o
->
ì¥omlock
);

1737 i‡(
o
->
ì¥om˘l
 == 1)

1740 i‡(!
	`gë_ì¥om
(
usb_h™dÀ
,
o
->
ì¥om
))

1742 i‡(
o
->
ì¥om
[
EEPROM_MAGIC_ADDR
] !
EEPROM_MAGIC
)

1744 
	`a°_log
(
LOG_NOTICE
,"UNSUCCESSFUL: EEPROM MAGIC NUMBER BAD o¿ch™√»%s\n",
o
->
«me
);

1748 
o
->
rxmixî£t
 = o->
ì¥om
[
EEPROM_RXMIXERSET
];

1749 
o
->
txmixa£t
 = o->
ì¥om
[
EEPROM_TXMIXASET
];

1750 
o
->
txmixb£t
 = o->
ì¥om
[
EEPROM_TXMIXBSET
];

1751 
	`mem˝y
(&
o
->
rxvoi˚adj
,&o->
ì¥om
[
EEPROM_RXVOICEADJ
],());

1752 
	`mem˝y
(&
o
->
rx˘csßdj
,&o->
ì¥om
[
EEPROM_RXCTCSSADJ
],());

1753 
o
->
tx˘csßdj
 = o->
ì¥om
[
EEPROM_TXCTCSSADJ
];

1754 
o
->
rxsquñchadj
 = o->
ì¥om
[
EEPROM_RXSQUELCHADJ
];

1755 
	`a°_log
(
LOG_NOTICE
,"EEPROM Lﬂded o¿ch™√»%s\n",
o
->
«me
);

1756 
	`mixî_wrôe
(
o
);

1757 
	`mu…_£t
(
o
);

1758 
	`£t_tx˘css_Àvñ
(
o
);

1763 
	`a°_log
(
LOG_NOTICE
,"USB Ad≠ã∏ha†nÿEEPROM in°ÆÀd o∏Checksum BAD o¿ch™√»%s\n",
o
->
«me
);

1765 
	`hid_£t_ouçuts
(
usb_h™dÀ
,
bufßve
);

1767 i‡(
o
->
ì¥om˘l
 == 2)

1769 
	`put_ì¥om
(
usb_h™dÀ
,
o
->
ì¥om
);

1770 
	`hid_£t_ouçuts
(
usb_h™dÀ
,
bufßve
);

1771 
	`a°_log
(
LOG_NOTICE
,"USB P¨amëî†wrôã¿tÿEEPROM o¿%s\n",
o
->
«me
);

1773 
o
->
ì¥om˘l
 = 0;

1774 
	`a°_muãx_u∆ock
(&
o
->
ì¥omlock
);

1776 
	`a°_muãx_lock
(&
o
->
usblock
);

1777 
buf
[
o
->
hid_gpio_˘l_loc
] = o->
hid_gpio_˘l
;

1778 
	`hid_gë_öputs
(
usb_h™dÀ
,
buf
);

1779 
keyed
 = !(
buf
[
o
->
hid_io_c‹_loc
] & o->
hid_io_c‹
);

1780 i‡(
keyed
 !
o
->
rxhidsq
)

1782 if(
o
->
debugÀvñ
)
	`¥ötf
("ch™_usbødio(Ëhidthªad: upd©êrxhidsq = %d\n",
keyed
);

1783 
o
->
rxhidsq
=
keyed
;

1785 
o
->
rxhid˘css
 =

1786 !(
buf
[
o
->
hid_io_˘css_loc
] & o->
hid_io_˘css
);

1787 
j
 = 
buf
[
o
->
hid_gpio_loc
];

1790 i‡(
o
->
devty≥
 =
C108AH_PRODUCT_ID
)

1792 
j
 |= 2;

1794 i‡(
buf
[
o
->
hid_io_c‹_loc
] & 0x10Ë
j
 &= ~2;

1796 
i
 = 0; i < 32; i++)

1799 i‡((
o
->
gpios
[
i
]Ë&& (!
	`°rˇ£cmp
(o->gpios[i],"in")) &&

1800 (
o
->
vÆid_gpios
 & (1 << 
i
))) ;

1801 
j
 &~(1 << 
i
);

1803 i‡((!
o
->
had_gpios_ö
Ë|| (o->
œ°_gpios_ö
 !
j
))

1805 
buf1
[100];

1806 
a°_‰ame
 
‰
;

1808 
i
 = 0; i < 32; i++)

1811 i‡(!
o
->
gpios
[
i
]) ;

1813 i‡(
	`°rˇ£cmp
(
o
->
gpios
[
i
],"in")) ;

1815 i‡(!(
o
->
vÆid_gpios
 & (1 << 
i
))) ;

1817 i‡((!
o
->
had_gpios_ö
Ë|| ((o->
œ°_gpios_ö
 & (1 << 
i
)Ë!(
j
 & (1 << i))))

1819 
	`•rötf
(
buf1
,"GPIO%d %d\n",
i
 + 1,(
j
 & (1 << i)) ? 1 : 0);

1820 
	`mem£t
(&
‰
,0,(fr));

1821 
‰
.
d©a
 = 
buf1
;

1822 
‰
.
d©Æí
 = 
	`°æí
(
buf1
);

1823 
‰
.
ßm∂es
 = 0;

1824 
‰
.
‰amëy≥
 = 
AST_FRAME_TEXT
;

1825 
‰
.
sub˛ass
 = 0;

1826 
‰
.
§c
 = "chan_usbradio";

1827 
‰
.
off£t
 = 0;

1828 
‰
.
mÆlocd
=0;

1829 
‰
.
dñivîy
.
tv_£c
 = 0;

1830 
‰
.
dñivîy
.
tv_u£c
 = 0;

1831 
	`a°_queue_‰ame
(
o
->
ow√r
,&
‰
);

1834 
o
->
had_gpios_ö
 = 1;

1835 
o
->
œ°_gpios_ö
 = 
j
;

1837 
	`a°_muãx_lock
(&
µ_lock
);

1838 
j
 = 
k
 = 
	`µªad
() ^ 0x80;

1839 
	`a°_muãx_u∆ock
(&
µ_lock
);

1840 
i
 = 10; i <= 15; i++)

1843 i‡((
o
->
µs
[
i
]Ë&& (!
	`°rˇ£cmp
(o->pps[i],"in")) &&

1844 (
PP_MASK
 & (1 << 
i
))) ;

1845 
j
 &~(1 << 
µöshi·
[
i
]);

1847 i‡((!
o
->
had_µ_ö
Ë|| (o->
œ°_µ_ö
 !
j
))

1849 
buf1
[100];

1850 
a°_‰ame
 
‰
;

1852 
i
 = 10; i <= 15; i++)

1855 i‡(!
o
->
µs
[
i
]) ;

1857 i‡(
	`°rˇ£cmp
(
o
->
µs
[
i
],"in")) ;

1859 i‡(!(
PP_MASK
 & (1 << 
i
))) ;

1861 i‡((!
o
->
had_µ_ö
Ë|| ((o->
œ°_µ_ö
 &

1862 (1 << 
µöshi·
[
i
])Ë!(
j
 & (1 <<Öpinshift[i]))))

1864 
	`•rötf
(
buf1
,"PP%d %d\n",
i
,(
j
 & (1 << 
µöshi·
[i])) ? 1 : 0);

1865 
	`mem£t
(&
‰
,0,(fr));

1866 
‰
.
d©a
 = 
buf1
;

1867 
‰
.
d©Æí
 = 
	`°æí
(
buf1
);

1868 
‰
.
ßm∂es
 = 0;

1869 
‰
.
‰amëy≥
 = 
AST_FRAME_TEXT
;

1870 
‰
.
sub˛ass
 = 0;

1871 
‰
.
§c
 = "chan_usbradio";

1872 
‰
.
off£t
 = 0;

1873 
‰
.
mÆlocd
=0;

1874 
‰
.
dñivîy
.
tv_£c
 = 0;

1875 
‰
.
dñivîy
.
tv_u£c
 = 0;

1876 
	`a°_queue_‰ame
(
o
->
ow√r
,&
‰
);

1879 
o
->
had_µ_ö
 = 1;

1880 
o
->
œ°_µ_ö
 = 
j
;

1882 
o
->
rxµsq
 = o->
rxµ˘css
 = 0;

1883 
i
 = 10; i <= 15; i++)

1885 i‡((
o
->
µs
[
i
]Ë&& (!
	`°rˇ£cmp
(o->pps[i],"cor")) &&

1886 (
PP_MASK
 & (1 << 
i
)))

1888 
j
 = 
k
 & (1 << 
µöshi·
[
i
]);

1889 i‡(
j
 !
o
->
rxµsq
)

1891 if(
o
->
debugÀvñ
)
	`¥ötf
("ch™_usbødio(Ëhidthªad: upd©êrxµsq = %d\n",
j
);

1892 
o
->
rxµsq
 = 
j
;

1895 i‡((
o
->
µs
[
i
]Ë&& (!
	`°rˇ£cmp
(o->pps[i],"ctcss")) &&

1896 (
PP_MASK
 & (1 << 
i
)))

1898 
o
->
rxµ˘css
 = 
k
 & (1 << 
µöshi·
[
i
]);

1902 
j
 = 
	`a°_tvdiff_ms
(
	`a°_tvnow
(),
thí
);

1904 
o
->
hid_gpio_œ°mask
 = o->
hid_gpio_pul£mask
;

1905 
o
->
hid_gpio_pul£mask
 = 0;

1906 
i
 = 0; i < 32; i++)

1908 
k
 = 
o
->
hid_gpio_pul£timî
[
i
];

1909 i‡(
k
)

1911 
k
 -
j
;

1912 i‡(
k
 < 0) k = 0;

1913 
o
->
hid_gpio_pul£timî
[
i
] = 
k
;

1915 i‡(
k
Ë
o
->
hid_gpio_pul£mask
 |1 << 
i
;

1917 i‡(
o
->
hid_gpio_pul£mask
 || o->
hid_gpio_œ°mask
)

1919 
buf
[
o
->
hid_gpio_loc
] = o->
hid_gpio_vÆ
 ^ o->
hid_gpio_pul£mask
;

1920 
buf
[
o
->
hid_gpio_˘l_loc
] = o->
hid_gpio_˘l
;

1921 
	`hid_£t_ouçuts
(
usb_h™dÀ
,
buf
);

1923 i‡(
o
->
gpio_£t
)

1925 
o
->
gpio_£t
 = 0;

1926 
buf
[
o
->
hid_gpio_loc
] = o->
hid_gpio_vÆ
 ^ o->
hid_gpio_pul£mask
;

1927 
buf
[
o
->
hid_gpio_˘l_loc
] = o->
hid_gpio_˘l
;

1928 
	`hid_£t_ouçuts
(
usb_h™dÀ
,
buf
);

1931 
txtmp
=
o
->
pmrCh™
->
txPâOut
;

1933 
k
 = 0;

1934 
i
 = 2; i <= 9; i++)

1937 i‡(!
o
->
µs
[
i
]) ;

1939 i‡(
	`°∫ˇ£cmp
(
o
->
µs
[
i
],"ptt",3)) ;

1940 
k
 |(1 << (
i
 - 2));

1942 i‡(
o
->
œ°tx
 !
txtmp
)

1944 
o
->
pmrCh™
->
txPâHid
=o->
œ°tx
 = 
txtmp
;

1945 if(
o
->
debugÀvñ
)
	`¥ötf
("hidthªad:Åx sëÅÿ%d\n",
txtmp
);

1946 
o
->
hid_gpio_vÆ
 &~o->
hid_io_±t
;

1947 
	`a°_muãx_lock
(&
µ_lock
);

1948 i‡(
k
Ë
µ_vÆ
 &= ~k;

1949 i‡(!
o
->
övîçâ
)

1951 i‡(
txtmp
)

1953 
buf
[
o
->
hid_gpio_loc
] = o->
hid_gpio_vÆ
 |o->
hid_io_±t
;

1954 i‡(
k
Ë
µ_vÆ
 |= k;

1959 i‡(!
txtmp
)

1961 
buf
[
o
->
hid_gpio_loc
] = o->
hid_gpio_vÆ
 |o->
hid_io_±t
;

1962 i‡(
k
Ë
µ_vÆ
 |= k;

1965 i‡(
k
Ë
	`µwrôe
(
µ_vÆ
);

1966 
	`a°_muãx_u∆ock
(&
µ_lock
);

1967 
buf
[
o
->
hid_gpio_loc
] = o->
hid_gpio_vÆ
 ^ o->
hid_gpio_pul£mask
;

1968 
buf
[
o
->
hid_gpio_˘l_loc
] = o->
hid_gpio_˘l
;

1969 
	`mem˝y
(
bufßve
,
buf
,(buf));

1970 
	`hid_£t_ouçuts
(
usb_h™dÀ
,
buf
);

1972 
	`time
(&
o
->
œ°hidtime
);

1973 
	`a°_muãx_u∆ock
(&
o
->
usblock
);

1975 
txtmp
=
o
->
pmrCh™
->
txPâOut
 = 0;

1976 
o
->
œ°tx
 = 0;

1977 
	`a°_muãx_lock
(&
o
->
usblock
);

1978 
o
->
hid_gpio_vÆ
 = ~o->
hid_io_±t
;

1979 i‡(
o
->
övîçâ
Ëo->
hid_gpio_vÆ
 |o->
hid_io_±t
;

1980 
buf
[
o
->
hid_gpio_loc
] = o->
hid_gpio_vÆ
 ^ o->
hid_gpio_pul£mask
;

1981 
buf
[
o
->
hid_gpio_˘l_loc
] = o->
hid_gpio_˘l
;

1982 
	`hid_£t_ouçuts
(
usb_h™dÀ
,
buf
);

1983 
	`a°_muãx_u∆ock
(&
o
->
usblock
);

1985 
txtmp
=
o
->
pmrCh™
->
txPâOut
 = 0;

1986 
o
->
œ°tx
 = 0;

1987 i‡(
usb_h™dÀ
)

1989 
	`a°_muãx_lock
(&
o
->
usblock
);

1990 
o
->
hid_gpio_vÆ
 = ~o->
hid_io_±t
;

1991 i‡(
o
->
övîçâ
Ëo->
hid_gpio_vÆ
 |o->
hid_io_±t
;

1992 
buf
[
o
->
hid_gpio_loc
] = o->
hid_gpio_vÆ
;

1993 
buf
[
o
->
hid_gpio_˘l_loc
] = o->
hid_gpio_˘l
;

1994 
	`hid_£t_ouçuts
(
usb_h™dÀ
,
buf
);

1995 
	`a°_muãx_lock
(&
o
->
usblock
);

1997 
	`±hªad_exô
(0);

1998 
	}
}

2010 *
	$a°_ext_˘x
(c⁄° *
§c
, **
ext
, **
˘x
)

2012 
ch™_usbødio_pvt
 *
o
 = 
	`föd_desc
(
usbødio_a˘ive
);

2014 i‡(
o
 =
NULL
 || 
ext
 =NULL || 
˘x
 == NULL)

2015  
NULL
;

2017 *
ext
 = *
˘x
 = 
NULL
;

2019 i‡(
§c
 && *src != '\0')

2020 *
ext
 = 
	`a°_°rdup
(
§c
);

2022 i‡(*
ext
 =
NULL
)

2023  
NULL
;

2025 i‡(!
o
->
ovîridec⁄ãxt
) {

2027 *
˘x
 = 
	`°ºchr
(*
ext
, '@');

2028 i‡(*
˘x
)

2029 *(*
˘x
)++ = '\0';

2032  *
ext
;

2033 
	}
}

2039 
	$u£d_blocks
(
ch™_usbødio_pvt
 *
o
)

2041 
audio_buf_öfo
 
öfo
;

2043 i‡(
	`io˘l
(
o
->
sounddev
, 
SNDCTL_DSP_GETOSPACE
, &
öfo
)) {

2044 i‡(!(
o
->
w¨√d
 & 
WARN_u£d_blocks
)) {

2045 
	`a°_log
(
LOG_WARNING
, "ErrorÑeading output space\n");

2046 
o
->
w¨√d
 |
WARN_u£d_blocks
;

2051 i‡(
o
->
tŸÆ_blocks
 == 0) {

2053 
	`a°_log
(
LOG_WARNING
, "‰agtŸÆ %d sizê%dávaû %d\n", 
öfo
.
‰ag°ŸÆ
, info.
‰agsize
, info.
‰agmíts
);

2054 
o
->
tŸÆ_blocks
 = 
öfo
.
‰agmíts
;

2057  
o
->
tŸÆ_blocks
 - 
öfo
.
‰agmíts
;

2058 
	}
}

2061 
	$soundˇrd_wrôe‰ame
(
ch™_usbødio_pvt
 *
o
, *
d©a
)

2063 
ªs
;

2065 i‡(
o
->
sounddev
 < 0)

2066 
	`£tf‹m©
(
o
, 
O_RDWR
);

2067 i‡(
o
->
sounddev
 < 0)

2072 if(!
o
->
pmrCh™
->
txPâIn
 && !o->pmrCh™->
txPâOut
)

2082 
ªs
 = 
	`u£d_blocks
(
o
);

2083 i‡(
ªs
 > 
o
->
queuesize
) {

2085 i‡(
o
->
w_îr‹s
++ =0 && (
usbødio_debug
 & 0x4))

2086 
	`a°_log
(
LOG_WARNING
, "wrôe: u£d %d block†(%d)\n", 
ªs
, 
o
->
w_îr‹s
);

2089 
o
->
w_îr‹s
 = 0;

2091  
	`wrôe
(
o
->
sounddev
, ((*Ë
d©a
), 
FRAME_SIZE
 * 2 * 12);

2092 
	}
}

2094 #i‚def 
NEW_ASTERISK


2106 
	$£nd_sound
(
ch™_usbødio_pvt
 *
o
)

2108 
my‰ame
[
FRAME_SIZE
];

2109 
ofs
, 
l
, 
°¨t
;

2110 
l_ßmp£¡
 = 
o
->
ßmp£¡
;

2111 
sound
 *
s
;

2113 i‡(
o
->
cursound
 < 0)

2116 
s
 = &
sounds
[
o
->
cursound
];

2118 
ofs
 = 0; of†< 
FRAME_SIZE
; of†+
l
) {

2119 
l
 = 
s
->
ßm∂í
 - 
l_ßmp£¡
;

2120 i‡(
l
 > 0) {

2121 
°¨t
 = 
l_ßmp£¡
 % 
s
->
d©Æí
;

2122 i‡(
l
 > 
FRAME_SIZE
 - 
ofs
)

2123 
l
 = 
FRAME_SIZE
 - 
ofs
;

2124 i‡(
l
 > 
s
->
d©Æí
 - 
°¨t
)

2125 
l
 = 
s
->
d©Æí
 - 
°¨t
;

2126 
	`bc›y
(
s
->
d©a
 + 
°¨t
, 
my‰ame
 + 
ofs
, 
l
 * 2);

2128 
	`a°_log
(
LOG_WARNING
, "£nd_sound sound %d/%d o‡%d i¡ÿ%d\n", 
l_ßmp£¡
, 
l
, 
s
->
ßm∂í
, 
ofs
);

2129 
l_ßmp£¡
 +
l
;

2131 c⁄° 
sûí˚
[
FRAME_SIZE
] = { 0, };

2133 
l
 +
s
->
sûí˚Àn
;

2134 i‡(
l
 > 0) {

2135 i‡(
l
 > 
FRAME_SIZE
 - 
ofs
)

2136 
l
 = 
FRAME_SIZE
 - 
ofs
;

2137 
	`bc›y
(
sûí˚
, 
my‰ame
 + 
ofs
, 
l
 * 2);

2138 
l_ßmp£¡
 +
l
;

2140 i‡(
s
->
ª≥©
 == 0) {

2141 
o
->
cursound
 = -1;

2142 
o
->
nosound
 = 0;

2143 i‡(
ofs
 < 
FRAME_SIZE
)

2144 
	`bc›y
(
sûí˚
, 
my‰ame
 + 
ofs
, (
FRAME_SIZE
 - ofs) * 2);

2146 
l_ßmp£¡
 = 0;

2150 
l
 = 
	`soundˇrd_wrôe‰ame
(
o
, 
my‰ame
);

2151 i‡(
l
 > 0)

2152 
o
->
ßmp£¡
 = 
l_ßmp£¡
;

2153 
	}
}

2155 *
	$sound_thªad
(*
¨g
)

2157 
ign
[4096];

2158 
ch™_usbødio_pvt
 *
o
 = (ch™_usbødio_pvà*Ë
¨g
;

2164 
	`ªad
(
o
->
sounddev
, 
ign
, (ign));

2166 
fd_£t
 
rfds
, 
wfds
;

2167 
maxfd
, 
ªs
;

2169 
	`FD_ZERO
(&
rfds
);

2170 
	`FD_ZERO
(&
wfds
);

2171 
	`FD_SET
(
o
->
¢dcmd
[0], &
rfds
);

2172 
maxfd
 = 
o
->
¢dcmd
[0];

2173 i‡(
o
->
cursound
 > -1 && o->
sounddev
 < 0)

2174 
	`£tf‹m©
(
o
, 
O_RDWR
);

2175 i‡(
o
->
cursound
 =-1 && o->
ow√r
 =
NULL
)

2177 
	`£tf‹m©
(
o
, 
O_CLOSE
);

2179 i‡(
o
->
sounddev
 > -1) {

2180 i‡(!
o
->
ow√r
) {

2181 
	`FD_SET
(
o
->
sounddev
, &
rfds
);

2182 
maxfd
 = 
	`MAX
(
o
->
sounddev
, maxfd);

2184 i‡(
o
->
cursound
 > -1) {

2185 
	`FD_SET
(
o
->
sounddev
, &
wfds
);

2186 
maxfd
 = 
	`MAX
(
o
->
sounddev
, maxfd);

2190 
ªs
 = 
	`a°_£À˘
(
maxfd
 + 1, &
rfds
, &
wfds
, 
NULL
, NULL);

2191 i‡(
ªs
 < 1) {

2192 
	`a°_log
(
LOG_WARNING
, "£À˘ faûed: %s\n", 
	`°ªº‹
(
î∫o
));

2193 
	`¶ìp
(1);

2196 i‡(
	`FD_ISSET
(
o
->
¢dcmd
[0], &
rfds
)) {

2198 
i
, 
wh©
 = -1;

2200 
	`ªad
(
o
->
¢dcmd
[0], &
wh©
, (what));

2201 
i
 = 0; 
sounds
[i].
öd
 != -1; i++) {

2202 i‡(
sounds
[
i
].
öd
 =
wh©
) {

2203 
o
->
cursound
 = 
i
;

2204 
o
->
ßmp£¡
 = 0;

2205 
o
->
nosound
 = 1;

2209 i‡(
sounds
[
i
].
öd
 == -1)

2210 
	`a°_log
(
LOG_WARNING
, "övÆid sound index: %d\n", 
wh©
);

2212 i‡(
o
->
sounddev
 > -1) {

2213 i‡(
	`FD_ISSET
(
o
->
sounddev
, &
rfds
))

2214 
	`ªad
(
o
->
sounddev
, 
ign
, (ign));

2215 i‡(
	`FD_ISSET
(
o
->
sounddev
, &
wfds
))

2216 
	`£nd_sound
(
o
);

2219  
NULL
;

2220 
	}
}

2229 
	$£tf‹m©
(
ch™_usbødio_pvt
 *
o
, 
mode
)

2231 
fmt
, 
desúed
, 
ªs
, 
fd
;

2232 
devi˚
[100];

2234 i‡(
o
->
sounddev
 >= 0) {

2235 
	`io˘l
(
o
->
sounddev
, 
SNDCTL_DSP_RESET
, 0);

2236 
	`˛o£
(
o
->
sounddev
);

2237 
o
->
du∂ex
 = 
M_UNSET
;

2238 
o
->
sounddev
 = -1;

2240 i‡(
mode
 =
O_CLOSE
)

2242 
o
->
œ°›í
 = 
	`a°_tvnow
();

2243 
	`°r˝y
(
devi˚
,"/dev/dsp");

2244 i‡(
o
->
devi˚num
)

2245 
	`•rötf
(
devi˚
,"/dev/d•%d",
o
->
devi˚num
);

2246 
fd
 = 
o
->
sounddev
 = 
	`›í
(
devi˚
, 
mode
 | 
O_NONBLOCK
);

2247 i‡(
fd
 < 0) {

2248 
	`a°_log
(
LOG_WARNING
, "U«bÀÅÿª-›í DSP devi˚ %d (%s): %s\n", 
o
->
devi˚num
, o->
«me
, 
	`°ªº‹
(
î∫o
));

2251 i‡(
o
->
ow√r
)

2252 
o
->
ow√r
->
fds
[0] = 
fd
;

2254 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


2255 
fmt
 = 
AFMT_S16_LE
;

2257 
fmt
 = 
AFMT_S16_BE
;

2259 
ªs
 = 
	`io˘l
(
fd
, 
SNDCTL_DSP_SETFMT
, &
fmt
);

2260 i‡(
ªs
 < 0) {

2261 
	`a°_log
(
LOG_WARNING
, "UnableÅo set formatÅo 16-bit signed\n");

2264 
mode
) {

2265 
O_RDWR
:

2266 
ªs
 = 
	`io˘l
(
fd
, 
SNDCTL_DSP_SETDUPLEX
, 0);

2268 
ªs
 = 
	`io˘l
(
fd
, 
SNDCTL_DSP_GETCAPS
, &
fmt
);

2269 i‡(
ªs
 =0 && (
fmt
 & 
DSP_CAP_DUPLEX
)) {

2270 
o
->
du∂ex
 = 
M_FULL
;

2273 
O_WRONLY
:

2274 
o
->
du∂ex
 = 
M_WRITE
;

2276 
O_RDONLY
:

2277 
o
->
du∂ex
 = 
M_READ
;

2281 
fmt
 = 1;

2282 
ªs
 = 
	`io˘l
(
fd
, 
SNDCTL_DSP_STEREO
, &
fmt
);

2283 i‡(
ªs
 < 0) {

2284 
	`a°_log
(
LOG_WARNING
, "FailedÅo setáudio deviceÅo mono\n");

2287 
fmt
 = 
desúed
 = 48000;

2288 
ªs
 = 
	`io˘l
(
fd
, 
SNDCTL_DSP_SPEED
, &
fmt
);

2290 i‡(
ªs
 < 0) {

2291 
	`a°_log
(
LOG_WARNING
, "FailedÅo setáudio deviceÅo mono\n");

2294 i‡(
fmt
 !
desúed
) {

2295 i‡(!(
o
->
w¨√d
 & 
WARN_•ìd
)) {

2296 
	`a°_log
(
LOG_WARNING
,

2298 
desúed
, 
fmt
);

2299 
o
->
w¨√d
 |
WARN_•ìd
;

2306 i‡(
o
->
‰ags
) {

2307 
fmt
 = 
o
->
‰ags
;

2308 
ªs
 = 
	`io˘l
(
fd
, 
SNDCTL_DSP_SETFRAGMENT
, &
fmt
);

2309 i‡(
ªs
 < 0) {

2310 i‡(!(
o
->
w¨√d
 & 
WARN_‰ag
)) {

2311 
	`a°_log
(
LOG_WARNING
,

2313 
o
->
w¨√d
 |
WARN_‰ag
;

2318 
ªs
 = 
PCM_ENABLE_INPUT
 | 
PCM_ENABLE_OUTPUT
;

2319 
ªs
 = 
	`io˘l
(
fd
, 
SNDCTL_DSP_SETTRIGGER
, &res);

2322 
	}
}

2327 
	$usbødio_digô_begö
(
a°_ch™√l
 *
c
, 
digô
)

2330 
	}
}

2332 
	$usbødio_digô_íd
(
a°_ch™√l
 *
c
, 
digô
, 
duøti⁄
)

2335 
	`a°_vîbo£
(" << Console Received digit %c of duration %u ms >> \n",

2336 
digô
, 
duøti⁄
);

2338 
	}
}

2343 
	$usbødio_ãxt
(
a°_ch™√l
 *
c
, c⁄° *
ãxt
)

2345 
ch™_usbødio_pvt
 *
o
 = 
c
->
ãch_pvt
;

2346 
tx
,
rx
;

2347 
˙t
,
rxs
[16],
txs
[16],
tx∂
[16],
rx∂
[16];

2348 
pwr
,*
cmd
;

2350 i‡(
ha•p
 =2Ë
	`i›îm
(
pba£
,2,1);

2352 
cmd
 = 
	`Æloˇ
(
	`°æí
(
ãxt
) + 10);

2355 if(
o
->
debugÀvñ
)
	`a°_vîbo£
(" << C⁄sﬁêRe˚ived usbødiÿãxà%†>> \n", 
ãxt
);

2357 
˙t
=
	`ssˇnf
(
ãxt
,"%†%†%†%†%†%c",
cmd
,
rxs
,
txs
,
rx∂
,
tx∂
,&
pwr
);

2359 i‡(
	`°rcmp
(
cmd
,"SETCHAN")==0)

2361 
u8
 
ch™
;

2362 
ch™
=
	`°πod
(
rxs
,
NULL
);

2363 
	`µböout
(
ch™
);

2364 if(
o
->
debugÀvñ
)
	`a°_log
(
LOG_NOTICE
,"∑r£ usbødiÿSETCHAN cmd: %†ch™: %i\n",
ãxt
,
ch™
);

2368 i‡(
	`°rcmp
(
cmd
,"RXCTCSS")==0)

2370 
u8
 
x
;

2371 
x
 = 
	`°πod
(
rxs
,
NULL
);

2372 
o
->
rx˘cssovîride
 = !
x
;

2373 if(
o
->
debugÀvñ
)
	`a°_log
(
LOG_NOTICE
,"∑r£ usbødiÿRXCTCSS cmd: %s\n",
ãxt
);

2377 i‡(
	`°rcmp
(
cmd
,"TXCTCSS")==0)

2379 
u8
 
x
;

2380 
x
 = 
	`°πod
(
rxs
,
NULL
);

2381 i‡(
o
 && o->
pmrCh™
)

2382 
o
->
pmrCh™
->
b
.
txCtcssOff
=!
x
;

2383 if(
o
->
debugÀvñ
Ë
	`a°_log
(
LOG_NOTICE
,"∑r£ usbødiÿTXCTCSS cmd: %s\n",
ãxt
);

2387 i‡(
	`°rcmp
(
cmd
,"GPIO")==0)

2389 
i
,
j
;

2391 
˙t
=
	`ssˇnf
(
ãxt
,"%†%d %d",
cmd
,&
i
,&
j
);

2392 i‡(
˙t
 < 3)  0;

2393 i‡((
i
 < 1) || (i > 32))  0;

2394 
i
--;

2396 i‡(!(
o
->
vÆid_gpios
 & (1 << 
i
)))  0;

2397 
	`a°_muãx_lock
(&
o
->
usblock
);

2398 i‡(
j
 > 1)

2400 
o
->
hid_gpio_pul£timî
[
i
] = 
j
 - 1;

2405 
o
->
hid_gpio_pul£timî
[
i
] = 0;

2406 
o
->
hid_gpio_vÆ
 &~(1 << 
i
);

2407 i‡(
j
Ë
o
->
hid_gpio_vÆ
 |1 << 
i
;

2408 
o
->
gpio_£t
 = 1;

2410 
	`a°_muãx_u∆ock
(&
o
->
usblock
);

2411 
	`kick±t
(
o
);

2415 i‡(
	`°rcmp
(
cmd
,"PP")==0)

2417 
i
,
j
;

2419 
˙t
=
	`ssˇnf
(
ãxt
,"%†%d %d",
cmd
,&
i
,&
j
);

2420 i‡(
˙t
 < 3)  0;

2421 i‡((
i
 < 2) || (i > 9))  0;

2423 i‡(!(
PP_MASK
 & (1 << 
i
)))  0;

2424 
	`a°_muãx_lock
(&
µ_lock
);

2425 i‡(
j
 > 1)

2427 
µ_pul£timî
[
i
] = 
j
 - 1;

2432 
µ_pul£timî
[
i
] = 0;

2433 
µ_vÆ
 &~(1 << (
i
 - 2));

2434 i‡(
j
Ë
µ_vÆ
 |1 << (
i
 - 2);

2435 
	`µwrôe
(
µ_vÆ
);

2437 
	`a°_muãx_u∆ock
(&
µ_lock
);

2441 i‡(
˙t
 < 6)

2443 
	`a°_log
(
LOG_ERROR
,"C™nŸÖ¨£ usbødiÿãxt: %s\n",
ãxt
);

2448 if(
o
->
debugÀvñ
)
	`a°_vîbo£
(" << %†%†%†%†%†%¯>> \n", 
cmd
,
rxs
,
txs
,
rx∂
,
tx∂
,
pwr
);

2451 i‡(
	`°rcmp
(
cmd
,"SETFREQ")==0)

2453 if(
o
->
debugÀvñ
)
	`a°_log
(
LOG_NOTICE
,"∑r£ usbødiÿSETFREQ cmd: %s\n",
ãxt
);

2454 
tx
=
	`°πod
(
txs
,
NULL
);

2455 
rx
=
	`°πod
(
rxs
,
NULL
);

2456 
o
->
£t_tx‰eq
 = 
	`round
(
tx
 * ()1000000);

2457 
o
->
£t_rx‰eq
 = 
	`round
(
rx
 * ()1000000);

2458 
o
->
pmrCh™
->
txpowî
 = (
pwr
 == 'H');

2459 
	`°r˝y
(
o
->
£t_rx˘css‰eqs
,
rx∂
);

2460 
	`°r˝y
(
o
->
£t_tx˘css‰eqs
,
tx∂
);

2462 
o
->
b
.
ªmŸed
=1;

2463 
	`xpmr_c⁄fig
(
o
);

2466 
	`a°_log
(
LOG_ERROR
,"C™nŸÖ¨£ usbødiÿcmd: %s\n",
ãxt
);

2468 
	}
}

2471 
	$rög
(
ch™_usbødio_pvt
 *
o
, 
x
)

2473 #i‚def 
NEW_ASTERISK


2474 
	`wrôe
(
o
->
¢dcmd
[1], &
x
, (x));

2476 
	}
}

2481 
	$usbødio_ˇŒ
(
a°_ch™√l
 *
c
, *
de°
, 
timeout
)

2483 
ch™_usbødio_pvt
 *
o
 = 
c
->
ãch_pvt
;

2485 
o
->
°›hid
 = 0;

2486 
	`time
(&
o
->
œ°hidtime
);

2487 
	`a°_±hªad_¸óã_background
(&
o
->
hidthªad
, 
NULL
, hidthread, o);

2488 
	`a°_£t°©e
(
c
, 
AST_STATE_UP
);

2490 
	}
}

2495 
	$usbødio_™swî
(
a°_ch™√l
 *
c
)

2497 #i‚def 
NEW_ASTERISK


2498 
ch™_usbødio_pvt
 *
o
 = 
c
->
ãch_pvt
;

2501 
	`a°_£t°©e
(
c
, 
AST_STATE_UP
);

2502 #i‚def 
NEW_ASTERISK


2503 
o
->
cursound
 = -1;

2504 
o
->
nosound
 = 0;

2507 
	}
}

2509 
	$usbødio_h™gup
(
a°_ch™√l
 *
c
)

2511 
ch™_usbødio_pvt
 *
o
 = 
c
->
ãch_pvt
;

2514 #i‚def 
NEW_ASTERISK


2515 
o
->
cursound
 = -1;

2516 
o
->
nosound
 = 0;

2518 
c
->
ãch_pvt
 = 
NULL
;

2519 
o
->
ow√r
 = 
NULL
;

2520 
	`a°_moduÀ_uƒef
(
a°_moduÀ_öfo
->
£lf
);

2521 i‡(
o
->
hook°©e
) {

2522 i‡(
o
->
autﬂnswî
 || o->
autoh™gup
) {

2524 
o
->
hook°©e
 = 0;

2525 
	`£tf‹m©
(
o
, 
O_CLOSE
);

2528 
	`rög
(
o
, 
AST_CONTROL_CONGESTION
);

2531 
o
->
°›hid
 = 1;

2532 
	`±hªad_joö
(
o
->
hidthªad
,
NULL
);

2534 
	}
}

2538 
	$usbødio_wrôe
(
a°_ch™√l
 *
c
, 
a°_‰ame
 *
f
)

2540 
ch™_usbødio_pvt
 *
o
 = 
c
->
ãch_pvt
;

2542 
	`åa˚usb2
(("usbødio_wrôe(Ëo->nosound%i\n",
o
->
nosound
));

2544 #i‚def 
NEW_ASTERISK


2546 i‡(
o
->
nosound
)

2549 
o
->
cursound
 = -1;

2551 i‡(!
o
->
hasusb
)  0;

2559 #i‡
DEBUG_CAPTURES
 == 1

2560 i‡(
·xˇ¥aw
 && 
o
->
b
.
txˇ¥aw
)

2562 
i16
 
i
, 
tbuff
[
f
->
d©Æí
];

2563 
i
=0;i<
f
->
d©Æí
;i+=2)

2565 
tbuff
[
i
]((
i16
*)(
f
->
d©a
))[i/2];

2566 
tbuff
[
i
+1]
o
->
txkeyed
*
M_Q13
;

2568 
	`fwrôe
(
tbuff
,2,
f
->
d©Æí
,
·xˇ¥aw
);

2575 i‡(!
o
->
echoög
)

2577 
	`PmrTx
(
o
->
pmrCh™
,(
i16
*)
f
->
d©a
);

2578 
o
->
didpmπx
 = 1;

2581 
	}
}

2583 
a°_‰ame
 *
	$usbødio_ªad
(
a°_ch™√l
 *
c
)

2585 
ªs
, 
§c
, 
d©Æí
, 
ﬁd±tout
;

2586 
cd
,
sd
;

2587 
ch™_usbødio_pvt
 *
o
 = 
c
->
ãch_pvt
;

2588 
a°_‰ame
 *
f
 = &
o
->
ªad_f
,*
f1
;

2589 
a°_‰ame
 
wf
 = { 
AST_FRAME_CONTROL
 };

2590 
time_t
 
now
;

2592 
	`åa˚usb2
(("usbradio_read()\n"));

2594 i‡(
o
->
œ°hidtime
)

2596 
	`time
(&
now
);

2597 i‡((
now
 - 
o
->
œ°hidtime
) > 3)

2599 
	`a°_log
(
LOG_ERROR
,"HIDÖrocess has died or something!!\n");

2600  
NULL
;

2605 
	`bzîo
(
f
, (
a°_‰ame
));

2606 
f
->
‰amëy≥
 = 
AST_FRAME_NULL
;

2607 
f
->
§c
 = 
usbødio_ãch
.
ty≥
;

2610 i‡(!
o
->
hasusb
)

2612 i‡(
o
->
rxkeyed
)

2614 
o
->
œ°rx
 = 0;

2615 
o
->
rxkeyed
 = 0;

2617 
wf
.
sub˛ass
 = 
AST_CONTROL_RADIO_UNKEY
;

2618 
	`a°_queue_‰ame
(
o
->
ow√r
, &
wf
);

2620  
f
;

2623 i‡(!
o
->
echomode
)

2625 
qñem
 *
q
;

2627 
	`a°_muãx_lock
(&
o
->
echﬁock
);

2628 
o
->
echoög
 = 0;

2629 
o
->
echoq
.
q_f‹w
 != &o->echoq)

2631 
q
 = 
o
->
echoq
.
q_f‹w
;

2632 
	`ªmque
(
q
);

2633 
	`a°_‰ì
(
q
);

2635 
	`a°_muãx_u∆ock
(&
o
->
echﬁock
);

2638 i‡(
o
->
echomode
 && (!o->
rxkeyed
))

2640 
usbecho
 *
u
;

2642 
	`a°_muãx_lock
(&
o
->
echﬁock
);

2644 i‡(
o
->
echoq
.
q_f‹w
 != &o->echoq)

2646 
u
 = (
usbecho
 *Ë
o
->
echoq
.
q_f‹w
;

2647 
	`ªmque
((
qñem
 *)
u
);

2648 
	`PmrTx
(
o
->
pmrCh™
,
u
->
d©a
);

2649 
o
->
didpmπx
 = 1;

2650 
	`a°_‰ì
(
u
);

2651 
o
->
echoög
 = 1;

2652 } 
o
->
echoög
 = 0;

2653 
	`a°_muãx_u∆ock
(&
o
->
echﬁock
);

2656 
ªs
 = 
	`ªad
(
o
->
sounddev
, o->
usbødio_ªad_buf
 + o->
ªadpos
,

2657 (
o
->
usbødio_ªad_buf
Ë- o->
ªadpos
);

2658 i‡(
ªs
 < 0)

2660 i‡(
î∫o
 !
EAGAIN
)

2662 
o
->
ªadîrs
 = 0;

2663 
o
->
hasusb
 = 0;

2664  
f
;

2666 i‡(
o
->
ªadîrs
++ > 
READERR_THRESHOLD
)

2668 
	`a°_log
(
LOG_ERROR
,"Stuck USBÑód ch™√»[%s], un-°ickög it!\n",
o
->
«me
);

2669 
o
->
ªadîrs
 = 0;

2670 
o
->
hasusb
 = 0;

2671  
f
;

2673 i‡(
o
->
ªadîrs
 == 1)

2674 
	`a°_log
(
LOG_WARNING
,"Possibly stuck USBÑód ch™√l. [%s]\n",
o
->
«me
);

2675  
f
;

2677 i‡(
o
->
ªadîrs
Ë
	`a°_log
(
LOG_WARNING
,"N›e, USBÑód ch™√»[%s] wa¢'à°ucká·îáŒ.\n",o->
«me
);

2678 i‡(
o
->
devty≥
 !
C108_PRODUCT_ID
)

2680 *
•
 = (*Ë(
o
->
usbødio_ªad_buf
 + o->
ªadpos
);

2681 
v
;

2682 
i
;

2684 
i
 = 0; i < 
ªs
 / 2; i++)

2686 
v
 = (()*
•
) * 0.800;

2687 *
•
++ = (Ë
v
;

2690 
o
->
ªadîrs
 = 0;

2691 
o
->
ªadpos
 +
ªs
;

2692 i‡(
o
->
ªadpos
 < (o->
usbødio_ªad_buf
))

2693  
f
;

2695 i‡(
o
->
muã
)

2696  
f
;

2698 #i‡
DEBUG_CAPTURES
 == 1

2699 i‡(
o
->
b
.
rxˇ¥aw
 && 
‰xˇ¥aw
Ë
	`fwrôe
((o->
usbødio_ªad_buf
 + 
AST_FRIENDLY_OFFSET
),1,
FRAME_SIZE
 * 2 * 2 * 6,frxcapraw);

2703 if(
o
->
txkeyed
 || o->
txã°key
 || o->
echoög
)

2705 if(!
o
->
pmrCh™
->
txPâIn
)

2707 
o
->
pmrCh™
->
txPâIn
=1;

2708 if(
o
->
debugÀvñ
Ë
	`a°_log
(
LOG_NOTICE
,"txPâI¿%i, ch™ %s\n",o->
pmrCh™
->
txPâIn
,o->
ow√r
->
«me
);

2711 if(
o
->
pmrCh™
->
txPâIn
)

2713 
o
->
pmrCh™
->
txPâIn
=0;

2714 if(
o
->
debugÀvñ
Ë
	`a°_log
(
LOG_NOTICE
,"txPâI¿%i, ch™ %s\n",o->
pmrCh™
->
txPâIn
,o->
ow√r
->
«me
);

2716 
ﬁd±tout
 = 
o
->
pmrCh™
->
txPâOut
;

2718 i‡(
ﬁd±tout
 && (!
o
->
didpmπx
))

2720 i‡(
o
->
nŸx˙t
 > 1)

2722 
	`mem£t
(
o
->
usbødio_wrôe_buf_1
,0,(o->usbradio_write_buf_1));

2723 
	`PmrTx
(
o
->
pmrCh™
,(
i16
*)o->
usbødio_wrôe_buf_1
);

2724 } 
o
->
nŸx˙t
++;

2725 } 
o
->
nŸx˙t
 = 0;

2726 
o
->
didpmπx
 = 0;

2728 
	`PmrRx
–
o
->
pmrCh™
,

2729 (
i16
 *)(
o
->
usbødio_ªad_buf
 + 
AST_FRIENDLY_OFFSET
),

2730 (
i16
 *)(
o
->
usbødio_ªad_buf_8k
 + 
AST_FRIENDLY_OFFSET
),

2731 (
i16
 *)(
o
->
usbødio_wrôe_buf_1
));

2733 i‡(
ﬁd±tout
 !
o
->
pmrCh™
->
txPâOut
)

2735 if(
o
->
debugÀvñ
Ë
	`a°_log
(
LOG_NOTICE
,"txPâOuà%i, ch™ %s\n",o->
pmrCh™
->
txPâOut
,o->
ow√r
->
«me
);

2736 
	`kick±t
(
o
);

2740 i‡(!
·xouåaw
Ë·xouåaw = 
	`f›í
(
TX_CAP_OUT_FILE
,"w");

2741 i‡(
·xouåaw
Ë
	`fwrôe
(
o
->
usbødio_wrôe_buf_1
,1,
FRAME_SIZE
 * 2 * 6,ftxoutraw);

2744 #i‡
DEBUG_CAPTURES
 =1 && 
XPMR_DEBUG0
 == 1

2745 i‡(
o
->
b
.
txˇp2
 && 
·xˇ±ø˚
Ë
	`fwrôe
((o->
pmrCh™
->
±xDebug
),1,
FRAME_SIZE
 * 2 * 16,ftxcaptrace);

2749 
d©Æí
 = 
FRAME_SIZE
 * 24;

2750 
§c
 = 0;

2751 
§c
 < 
d©Æí
)

2754 
l
 = (
o
->
usbødio_wrôe_buf
Ë- o->
usbødio_wrôe_d°
;

2756 i‡(
d©Æí
 - 
§c
 >
l
)

2759 
	`mem˝y
(
o
->
usbødio_wrôe_buf
 + o->
usbødio_wrôe_d°
, o->
usbødio_wrôe_buf_1
 + 
§c
, 
l
);

2760 i‡(
o
->
devty≥
 !
C108_PRODUCT_ID
)

2762 *
•
 = (*Ë
o
->
usbødio_wrôe_buf
;

2763 
v
;

2764 
i
;

2766 
i
 = 0; i < 
l
 / 2; i++)

2768 
v
 = (()*
•
) * 1.10;

2769 i‡(
v
 > 32765.0) v = 32765.0;

2770 i‡(
v
 < -32765.0) v = -32765.0;

2771 *
•
++ = (Ë
v
;

2774 
	`soundˇrd_wrôe‰ame
(
o
, (*Ëo->
usbødio_wrôe_buf
);

2775 
§c
 +
l
;

2776 
o
->
usbødio_wrôe_d°
 = 0;

2781 
l
 = 
d©Æí
 - 
§c
;

2782 
	`mem˝y
(
o
->
usbødio_wrôe_buf
 + o->
usbødio_wrôe_d°
, o->
usbødio_wrôe_buf_1
 + 
§c
, 
l
);

2783 
§c
 +
l
;

2784 
o
->
usbødio_wrôe_d°
 +
l
;

2788 
FILE
 *
hI≈ut
;

2789 
i16
 
iBuff
[
FRAME_SIZE
*2*6];

2791 
o
->
pmrCh™
->
b
.
rxC≠tuª
=1;

2793 if(!
hI≈ut
)

2795 
hI≈ut
 = 
	`f›í
("/usr/src/xpmr/testdata/rx_in.pcm","r");

2796 if(!
hI≈ut
)

2798 
	`¥ötf
(" Input Data File Not Found.\n");

2803 if(0==
	`‰ód
((*)
iBuff
,2,
FRAME_SIZE
*2*6,
hI≈ut
))
exô
;

2805 
	`PmrRx
–
o
->
pmrCh™
,

2806 (
i16
 *)
iBuff
,

2807 (
i16
 *)(
o
->
usbødio_ªad_buf_8k
 + 
AST_FRIENDLY_OFFSET
));

2812 i‡(!
‰xouåaw
Ë‰xouåaw = 
	`f›í
(
RX_CAP_OUT_FILE
,"w");

2813 i‡(
‰xouåaw
Ë
	`fwrôe
((
o
->
usbødio_ªad_buf_8k
 + 
AST_FRIENDLY_OFFSET
),1,
FRAME_SIZE
 * 2,frxoutraw);

2816 #i‡
DEBUG_CAPTURES
 =1 && 
XPMR_DEBUG0
 == 1

2817 i‡(
‰xˇ±ø˚
 && 
o
->
b
.
rxˇp2
 && o->
pmrCh™
->b.
ødiﬂ˘ive
Ë
	`fwrôe
((o->pmrCh™->
¥xDebug
),1,
FRAME_SIZE
 * 2 * 16,frxcaptrace);

2820 
cd
 = 0;

2821 if(
o
->
rxcdty≥
==
CD_HID
 && (o->
pmrCh™
->
rxExtC¨rõrDëe˘
!=o->
rxhidsq
))

2822 
o
->
pmrCh™
->
rxExtC¨rõrDëe˘
=o->
rxhidsq
;

2824 if(
o
->
rxcdty≥
==
CD_HID_INVERT
 && (o->
pmrCh™
->
rxExtC¨rõrDëe˘
==o->
rxhidsq
))

2825 
o
->
pmrCh™
->
rxExtC¨rõrDëe˘
=!o->
rxhidsq
;

2827 if–(
o
->
rxcdty≥
==
CD_HID
 && o->
rxhidsq
) ||

2828 (
o
->
rxcdty≥
==
CD_HID_INVERT
 && !o->
rxhidsq
) ||

2829 (
o
->
rxcdty≥
==
CD_XPMR_NOISE
 && o->
pmrCh™
->
rxC¨rõrDëe˘
) ||

2830 (
o
->
rxcdty≥
==
CD_PP
 && o->
rxµsq
) ||

2831 (
o
->
rxcdty≥
==
CD_PP_INVERT
 && !o->
rxµsq
) ||

2832 (
o
->
rxcdty≥
==
CD_XPMR_VOX
 && o->
pmrCh™
->
rxC¨rõrDëe˘
) )

2834 i‡(!
o
->
pmrCh™
->
txPâOut
 || o->
ødiodu∂ex
)
cd
=1;

2838 
cd
=0;

2842 if(
cd
!=
o
->
rxˇºõrdëe˘
)

2844 
o
->
rxˇºõrdëe˘
=
cd
;

2845 if(
o
->
debugÀvñ
Ë
	`a°_log
(
LOG_NOTICE
,"rxˇºõrdëe˘ = %i, ch™ %s\n",
cd
,o->
ow√r
->
«me
);

2849 if(
o
->
pmrCh™
->
b
.
˘cssRxE«bÀ
 && o->pmrCh™->
rxCtcss
->
decode
!=o->
rx˘cssdecode
)

2851 if(
o
->
debugÀvñ
)
	`a°_log
(
LOG_NOTICE
,"rx˘cssdecodê%i, ch™ %s\n",o->
pmrCh™
->
rxCtcss
->
decode
,o->
ow√r
->
«me
);

2853 
o
->
rx˘cssdecode
=o->
pmrCh™
->
rxCtcss
->
decode
;

2854 
	`°r˝y
(
o
->
rx˘css‰eq
, o->
pmrCh™
->rxctcssfreq);

2857 #i‚de‡
HAVE_XPMRX


2858 if–!
o
->
pmrCh™
->
b
.
˘cssRxE«bÀ
 ||

2859 –
o
->
pmrCh™
->
b
.
˘cssRxE«bÀ
 &&

2860 
o
->
pmrCh™
->
rxCtcss
->
decode
>
CTCSS_NULL
 &&

2861 
o
->
pmrCh™
->
smode
==
SMODE_CTCSS
 )

2864 
sd
=1;

2868 
sd
=0;

2871 if–(!
o
->
pmrCh™
->
b
.
˘cssRxE«bÀ
 && !o->pmrCh™->b.
dcsRxE«bÀ
 && !o->pmrCh™->b.
lmrRxE«bÀ
) ||

2872 –
o
->
pmrCh™
->
b
.
˘cssRxE«bÀ
 &&

2873 
o
->
pmrCh™
->
rxCtcss
->
decode
>
CTCSS_NULL
 &&

2874 
o
->
pmrCh™
->
smode
==
SMODE_CTCSS
 ) ||

2875 –
o
->
pmrCh™
->
b
.
dcsRxE«bÀ
 &&

2876 
o
->
pmrCh™
->
decDcs
->
decode
 > 0 &&

2877 
o
->
pmrCh™
->
smode
==
SMODE_DCS
 )

2880 
sd
=1;

2884 
sd
=0;

2887 if(
o
->
pmrCh™
->
decDcs
->
decode
!=o->
rxdcsdecode
)

2889 if(
o
->
debugÀvñ
)
	`a°_log
(
LOG_NOTICE
,"rxdcsdecodê%s, ch™ %s\n",o->
pmrCh™
->
rx˘css‰eq
,o->
ow√r
->
«me
);

2891 
o
->
rxdcsdecode
=o->
pmrCh™
->
decDcs
->
decode
;

2892 
	`°r˝y
(
o
->
rx˘css‰eq
, o->
pmrCh™
->rxctcssfreq);

2895 if(
o
->
pmrCh™
->
Ωäum
 && (o->pmrCh™->
pLsdCé
->
cs
[o->pmrCh™->Ωäum].
b
.
rxkeyed
 !o->
rxlsddecode
))

2897 if(
o
->
debugÀvñ
)
	`a°_log
(
LOG_NOTICE
,"rxLSDecodê%s, ch™ %s\n",o->
pmrCh™
->
rx˘css‰eq
,o->
ow√r
->
«me
);

2898 
o
->
rxlsddecode
=o->
pmrCh™
->
pLsdCé
->
cs
[o->pmrCh™->
Ωäum
].
b
.
rxkeyed
;

2899 
	`°r˝y
(
o
->
rx˘css‰eq
, o->
pmrCh™
->rxctcssfreq);

2902 if–(
o
->
pmrCh™
->
Ωäum
>0 && o->pmrCh™->
smode
==
SMODE_LSD
 && o->pmrCh™->
pLsdCé
->
cs
[o->pmrCh™->Ωäum].
b
.
rxkeyed
)||

2903 (
o
->
pmrCh™
->
smode
==
SMODE_DCS
 && o->pmrCh™->
decDcs
->
decode
>0) )

2905 
sd
=1;

2908 if(
o
->
rxsdty≥
 =
SD_HID
Ë
sd
 = o->
rxhid˘css
;

2909 if(
o
->
rxsdty≥
 =
SD_HID_INVERT
Ë
sd
 = !o->
rxhid˘css
;

2910 if(
o
->
rxsdty≥
 =
SD_PP
Ë
sd
 = o->
rxµ˘css
;

2911 if(
o
->
rxsdty≥
 =
SD_PP_INVERT
Ë
sd
 = !o->
rxµ˘css
;

2912 i‡(
o
->
rx˘cssovîride
Ë
sd
 = 1;

2913 i‡–
cd
 && 
sd
)

2916 if(!
o
->
rxkeyed
 && o->
debugÀvñ
)
	`a°_log
(
LOG_NOTICE
,"o->rxkeyed = 1, ch™ %s\n", o->
ow√r
->
«me
);

2917 i‡(
o
->
rxkeyed
 || (o->
rx⁄˙t
 >o->
rx⁄dñay
))

2918 
o
->
rxkeyed
 = 1;

2919 
o
->
rx⁄˙t
++;

2924 if(
o
->
rxkeyed
 && o->
debugÀvñ
)
	`a°_log
(
LOG_NOTICE
,"o->rxkeyed = 0, ch™ %s\n",o->
ow√r
->
«me
);

2925 
o
->
rxkeyed
 = 0;

2926 
o
->
rx⁄˙t
 = 0;

2929 i‡(
o
->
echomode
 && o->
rxkeyed
 && (!o->
echoög
))

2931 
x
;

2932 
usbecho
 *
u
;

2934 
	`a°_muãx_lock
(&
o
->
echﬁock
);

2935 
x
 = 0;

2937 
u
 = (
usbecho
 *Ë
o
->
echoq
.
q_f‹w
;

2938 
u
 !(
usbecho
 *Ë&
o
->
echoq
; u = (usbechÿ*)u->
q_f‹w
Ë
x
++;

2939 i‡(
x
 < 
o
->
echomax
)

2941 
u
 = (
usbecho
 *Ë
	`a°_mÆloc
((usbecho));

2942 
	`mem£t
(
u
,0,(
usbecho
));

2943 
	`mem˝y
(
u
->
d©a
,(
o
->
usbødio_ªad_buf_8k
 + 
AST_FRIENDLY_OFFSET
),
FRAME_SIZE
 * 2);

2944 i‡(
u
 =
NULL
)

2946 
	`a°_log
(
LOG_ERROR
,"Cannot malloc\n");

2948 
	`ösque
((
qñem
 *)
u
,
o
->
echoq
.
q_back
);

2950 
	`a°_muãx_u∆ock
(&
o
->
echﬁock
);

2955 i‡(
o
->
œ°rx
 && (!o->
rxkeyed
))

2957 
o
->
œ°rx
 = 0;

2959 
wf
.
sub˛ass
 = 
AST_CONTROL_RADIO_UNKEY
;

2960 
	`a°_queue_‰ame
(
o
->
ow√r
, &
wf
);

2962 i‡((!
o
->
œ°rx
Ë&& (o->
rxkeyed
))

2964 
o
->
œ°rx
 = 1;

2966 
wf
.
sub˛ass
 = 
AST_CONTROL_RADIO_KEY
;

2967 if(
o
->
rx˘cssdecode
)

2969 
wf
.
d©a
 = 
o
->
rx˘css‰eq
;

2970 
wf
.
d©Æí
 = 
	`°æí
(
o
->
rx˘css‰eq
) + 1;

2971 
	`TRACEO
(1,("AST_CONTROL_RADIO_KEYÅext=%s\n",
o
->
rx˘css‰eq
));

2973 
	`a°_queue_‰ame
(
o
->
ow√r
, &
wf
);

2976 
o
->
ªadpos
 = 
AST_FRIENDLY_OFFSET
;

2977 i‡(
c
->
_°©e
 !
AST_STATE_UP
)

2978  
f
;

2980 
f
->
‰amëy≥
 = 
AST_FRAME_VOICE
;

2981 
f
->
sub˛ass
 = 
AST_FORMAT_SLINEAR
;

2982 
f
->
ßm∂es
 = 
FRAME_SIZE
;

2983 
f
->
d©Æí
 = 
FRAME_SIZE
 * 2;

2984 
f
->
d©a
 = 
o
->
usbødio_ªad_buf_8k
 + 
AST_FRIENDLY_OFFSET
;

2985 i‡(
o
->
boo°
 !
BOOST_SCALE
) {

2986 
i
, 
x
;

2987 
öt16_t
 *
p
 = (öt16_à*Ë
f
->
d©a
;

2988 
i
 = 0; i < 
f
->
ßm∂es
; i++) {

2989 
x
 = (
p
[
i
] * 
o
->
boo°
Ë/ 
BOOST_SCALE
;

2990 i‡(
x
 > 32767)

2991 
x
 = 32767;

2992 i‡(
x
 < -32768)

2993 
x
 = -32768;

2994 
p
[
i
] = 
x
;

2997 i‡(!
o
->
rxkeyed
Ë
	`mem£t
(
f
->
d©a
,0,f->
d©Æí
);

2998 
f
->
off£t
 = 
AST_FRIENDLY_OFFSET
;

2999 i‡(
o
->
u£dtmf
 && o->
d•
)

3001 
f1
 = 
	`a°_d•_¥o˚ss
(
c
,
o
->
d•
,
f
);

3002 i‡((
f1
->
‰amëy≥
 =
AST_FRAME_DTMF_END
) ||

3003 (
f1
->
‰amëy≥
 =
AST_FRAME_DTMF_BEGIN
))

3005 i‡((
f1
->
sub˛ass
 == 'm') || (f1->subclass == 'u'))

3007 
f1
->
‰amëy≥
 = 
AST_FRAME_NULL
;

3008 
f1
->
sub˛ass
 = 0;

3009 (
f1
);

3011 i‡(
f1
->
‰amëy≥
 =
AST_FRAME_DTMF_END
)

3013 
f1
->
Àn
 = 
	`a°_tvdiff_ms
(
	`a°_tvnow
(),
o
->
t⁄ëime
);

3014 i‡(
›ti⁄_vîbo£
)

3015 
	`a°_log
(
LOG_NOTICE
,"GŸ DTMF ch¨ %¯duøti⁄ %ld ms\n",
f1
->
sub˛ass
,f1->
Àn
);

3016 
o
->
t⁄eÊag
 = 0;

3018 i‡(
o
->
t⁄eÊag
)

3020 
	`a°_‰‰ì
(
f1
);

3021 
f1
 = 
NULL
;

3025 
o
->
t⁄ëime
 = 
	`a°_tvnow
();

3026 
o
->
t⁄eÊag
 = 1;

3029 i‡(
f1
) (f1);

3032 i‡–
o
->
pmrCh™
->
b
.
txCtcssRódy
 )

3034 
a°_‰ame
 
wf
 = { 
AST_FRAME_TEXT
 };

3035 
msg
[32];

3036 
	`mem£t
(
msg
,0,32);

3038 
	`•rötf
(
msg
,"c°x=%s",
o
->
pmrCh™
->
tx˘css‰eq
);

3039 if(
o
->
debugÀvñ
)

3041 
	`a°_log
(
LOG_NOTICE
,

3043 
o
->
«me
,o->
pmrCh™
->
tx˘css‰eq
);

3045 
o
->
pmrCh™
->
b
.
txCtcssRódy
 = 0;

3046 
wf
.
d©a
 = 
msg
;

3047 
wf
.
d©Æí
 = 
	`°æí
(
msg
) + 1;

3048 
	`a°_queue_‰ame
(
o
->
ow√r
, &
wf
);

3050  
f
;

3051 
	}
}

3053 
	$usbødio_fixup
(
a°_ch™√l
 *
ﬁdch™
, a°_ch™√»*
√wch™
)

3055 
ch™_usbødio_pvt
 *
o
 = 
√wch™
->
ãch_pvt
;

3056 
	`a°_log
(
LOG_WARNING
,"usbradio_fixup()\n");

3057 
o
->
ow√r
 = 
√wch™
;

3059 
	}
}

3061 
	$usbødio_ödiˇã
(
a°_ch™√l
 *
c
, 
c⁄d
, c⁄° *
d©a
, 
size_t
 
d©Æí
)

3063 
ch™_usbødio_pvt
 *
o
 = 
c
->
ãch_pvt
;

3064 
ªs
 = -1;

3066 
c⁄d
) {

3067 
AST_CONTROL_BUSY
:

3068 
AST_CONTROL_CONGESTION
:

3069 
AST_CONTROL_RINGING
:

3070 
ªs
 = 
c⁄d
;

3074 #i‚def 
NEW_ASTERISK


3075 
o
->
cursound
 = -1;

3076 
o
->
nosound
 = 0;

3080 
AST_CONTROL_VIDUPDATE
:

3081 
ªs
 = -1;

3083 
AST_CONTROL_HOLD
:

3084 
	`a°_vîbo£
(" << Console Has Been Placed on Hold >> \n");

3085 
	`a°_moh_°¨t
(
c
, 
d©a
, 
o
->
mohöãΩªt
);

3087 
AST_CONTROL_UNHOLD
:

3088 
	`a°_vîbo£
(" << Console Has Been Retrieved from Hold >> \n");

3089 
	`a°_moh_°›
(
c
);

3091 
AST_CONTROL_PROCEEDING
:

3092 
	`a°_vîbo£
(" << Call Proceeding... >> \n");

3093 
	`a°_moh_°›
(
c
);

3095 
AST_CONTROL_PROGRESS
:

3096 
	`a°_vîbo£
(" << Call Progress... >> \n");

3097 
	`a°_moh_°›
(
c
);

3099 
AST_CONTROL_RADIO_KEY
:

3100 
o
->
txkeyed
 = 1;

3101 if(
o
->
debugÀvñ
)
	`a°_vîbo£
("ch™_usbødiÿACRK dev=%† code=%†TX ON \n",o->
«me
,(*)
d©a
);

3102 if(
d©Æí
 && ((*)(
d©a
))[0]!='0')

3104 
o
->
b
.
f‹˚txcode
=1;

3105 
	`mem£t
(
o
->
£t_tx˘css‰eq
,0,16);

3106 
	`°∫˝y
(
o
->
£t_tx˘css‰eq
,
d©a
,16);

3107 
o
->
£t_tx˘css‰eq
[15]=0;

3108 
	`xpmr_c⁄fig
(
o
);

3111 
AST_CONTROL_RADIO_UNKEY
:

3112 
o
->
txkeyed
 = 0;

3113 if(
o
->
debugÀvñ
)
	`a°_vîbo£
("ch™_usbødiÿACRUK dev=%†TX OFF >> \n",o->
«me
);

3114 if(
o
->
b
.
f‹˚txcode
)

3116 
o
->
b
.
f‹˚txcode
=0;

3117 
o
->
pmrCh™
->
pTxCodeDeÁu…
 = o->
tx˘cssdeÁu…
;

3118 if(
o
->
debugÀvñ
)
	`a°_vîbo£
("ch™_usbødiÿdev=%†F‹˚d Tx Squñch CodêCLEARED\n",o->
«me
);

3122 
	`a°_log
(
LOG_WARNING
, "D⁄'àknow howÅÿdi•œy c⁄dôi⁄ %d o¿%s\n", 
c⁄d
, 
c
->
«me
);

3126 i‡(
ªs
 > -1)

3127 
	`rög
(
o
, 
ªs
);

3130 
	}
}

3132 
	$usbødio_£t›ti⁄
(
a°_ch™√l
 *
ch™
, 
›ti⁄
, *
d©a
, 
d©Æí
)

3134 *
˝
;

3135 
ch™_usbødio_pvt
 *
o
 = 
ch™
->
ãch_pvt
;

3138 i‡(!
d©a
 || (
d©Æí
 < 1)) {

3139 
î∫o
 = 
EINVAL
;

3143 
›ti⁄
) {

3144 
AST_OPTION_TONE_VERIFY
:

3145 
˝
 = (*Ë
d©a
;

3146 *
˝
) {

3148 
	`a°_log
(
LOG_DEBUG
, "Së o±i⁄ TONE VERIFY, mode: OFF(0Ë⁄ %s\n",
ch™
->
«me
);

3149 
o
->
u£dtmf
 = 1;

3152 
	`a°_log
(
LOG_DEBUG
, "Së o±i⁄ TONE VERIFY, mode: MUTECONF/MAX(2Ë⁄ %s\n",
ch™
->
«me
);

3153 
o
->
u£dtmf
 = 1;

3156 
	`a°_log
(
LOG_DEBUG
, "Së o±i⁄ TONE VERIFY, mode: DISABLE DETECT(3Ë⁄ %s\n",
ch™
->
«me
);

3157 
o
->
u£dtmf
 = 0;

3160 
	`a°_log
(
LOG_DEBUG
, "Së o±i⁄ TONE VERIFY, mode: OFF(0Ë⁄ %s\n",
ch™
->
«me
);

3161 
o
->
u£dtmf
 = 1;

3166 
î∫o
 = 0;

3168 
	}
}

3173 
a°_ch™√l
 *
	$usbødio_√w
(
ch™_usbødio_pvt
 *
o
, *
ext
, *
˘x
, 
°©e
)

3175 
a°_ch™√l
 *
c
;

3177 
c
 = 
	`a°_ch™√l_Æloc
(1, 
°©e
, 
o
->
cid_num
, o->
cid_«me
, "", 
ext
, 
˘x
, 0, "Radio/%s", o->
«me
);

3178 i‡(
c
 =
NULL
)

3179  
NULL
;

3180 
c
->
ãch
 = &
usbødio_ãch
;

3182 i‡(
o
->
sounddev
 < 0)

3183 
	`£tf‹m©
(
o
, 
O_RDWR
);

3185 
c
->
fds
[0] = 
o
->
sounddev
;

3186 
c
->
«tivef‹m©s
 = 
AST_FORMAT_SLINEAR
;

3187 
c
->
ªadf‹m©
 = 
AST_FORMAT_SLINEAR
;

3188 
c
->
wrôef‹m©
 = 
AST_FORMAT_SLINEAR
;

3189 
c
->
ãch_pvt
 = 
o
;

3191 i‡(!
	`a°_°æí_zîo
(
o
->
œnguage
))

3192 
	`a°_°rög_fõld_£t
(
c
, 
œnguage
, 
o
->language);

3195 
c
->
cid
.
cid_num
 = 
	`a°_°rdup
(
o
->cid_num);

3196 
c
->
cid
.
cid_™i
 = 
	`a°_°rdup
(
o
->
cid_num
);

3197 
c
->
cid
.
cid_«me
 = 
	`a°_°rdup
(
o
->cid_name);

3198 i‡(!
	`a°_°æí_zîo
(
ext
))

3199 
c
->
cid
.
cid_dnid
 = 
	`a°_°rdup
(
ext
);

3201 
o
->
ow√r
 = 
c
;

3202 
o
->
echoq
.
q_f‹w
 = o->echoq.
q_back
 = &o->echoq;

3203 
	`a°_muãx_öô
(&
o
->
echﬁock
);

3204 
	`a°_muãx_öô
(&
o
->
usblock
);

3205 
	`a°_moduÀ_ªf
(
a°_moduÀ_öfo
->
£lf
);

3206 
o
->
echomax
 = 
DEFAULT_ECHO_MAX
;

3207 
o
->
echomode
 = 0;

3208 
o
->
echoög
 = 0;

3209 
	`a°_jb_c⁄figuª
(
c
, &
globÆ_jbc⁄f
);

3210 i‡(
°©e
 !
AST_STATE_DOWN
) {

3211 i‡(
	`a°_pbx_°¨t
(
c
)) {

3212 
	`a°_log
(
LOG_WARNING
, "U«bÀÅÿ°¨àPBX o¿%s\n", 
c
->
«me
);

3213 
	`a°_h™gup
(
c
);

3214 
o
->
ow√r
 = 
c
 = 
NULL
;

3220  
c
;

3221 
	}
}

3224 
a°_ch™√l
 *
	$usbødio_ªque°
(c⁄° *
ty≥
, 
f‹m©
, *
d©a
, *
ˇu£
)

3226 
a°_ch™√l
 *
c
;

3227 
ch™_usbødio_pvt
 *
o
 = 
	`föd_desc
(
d©a
);

3229 
	`TRACEO
(1,("usbradio_request()\n"));

3233 
	`a°_log
(
LOG_WARNING
, "usbødio_ªque°Åy≥ <%s> d©®0x%∞<%s>\n", 
ty≥
, 
d©a
, (*) data);

3235 i‡(
o
 =
NULL
) {

3236 
	`a°_log
(
LOG_NOTICE
, "Devi˚ %†nŸ found\n", (*Ë
d©a
);

3238  
NULL
;

3240 i‡((
f‹m©
 & 
AST_FORMAT_SLINEAR
) == 0) {

3241 
	`a°_log
(
LOG_NOTICE
, "F‹m© 0x%x unsuµ‹ãd\n", 
f‹m©
);

3242  
NULL
;

3244 i‡(
o
->
ow√r
) {

3245 
	`a°_log
(
LOG_NOTICE
, "AÃódy havê®ˇŒ (ch™ %pË⁄Åhêusb ch™√l\n", 
o
->
ow√r
);

3246 *
ˇu£
 = 
AST_CAUSE_BUSY
;

3247  
NULL
;

3249 
c
 = 
	`usbødio_√w
(
o
, 
NULL
, NULL, 
AST_STATE_DOWN
);

3250 i‡(
c
 =
NULL
) {

3251 
	`a°_log
(
LOG_WARNING
, "UnableÅo createÇew usb channel\n");

3252  
NULL
;

3255 
o
->
b
.
ªmŸed
=0;

3256 
	`xpmr_c⁄fig
(
o
);

3258  
c
;

3259 
	}
}

3262 
	$c⁄sﬁe_key
(
fd
, 
¨gc
, *
¨gv
[])

3264 
ch™_usbødio_pvt
 *
o
 = 
	`föd_desc
(
usbødio_a˘ive
);

3266 i‡(
¨gc
 != 2)

3267  
RESULT_SHOWUSAGE
;

3268 
o
->
txã°key
 = 1;

3269  
RESULT_SUCCESS
;

3270 
	}
}

3273 
	$c⁄sﬁe_unkey
(
fd
, 
¨gc
, *
¨gv
[])

3275 
ch™_usbødio_pvt
 *
o
 = 
	`föd_desc
(
usbødio_a˘ive
);

3277 i‡(
¨gc
 != 2)

3278  
RESULT_SHOWUSAGE
;

3279 
o
->
txã°key
 = 0;

3280  
RESULT_SUCCESS
;

3281 
	}
}

3283 
	$usb_devi˚_sw≠
(
fd
,*
Ÿhî
)

3286 
d
;

3287 
tmp
[128];

3288 
ch™_usbødio_pvt
 *
p
 = 
NULL
,*
o
 = 
	`föd_desc
(
usbødio_a˘ive
);

3290 i‡(
o
 =
NULL
)  -1;

3291 i‡(!
Ÿhî
)  -1;

3292 
p
 = 
	`föd_desc
(
Ÿhî
);

3293 i‡(
p
 =
NULL
)

3295 
	`a°_˛i
(
fd
,"USB Devi˚ %†nŸ found\n",
Ÿhî
);

3298 i‡(
p
 =
o
)

3300 
	`a°_˛i
(
fd
,"You cant swapáctive device with itself!!\n");

3303 
	`a°_muãx_lock
(&
usb_dev_lock
);

3304 
	`°r˝y
(
tmp
,
p
->
dev°r
);

3305 
d
 = 
p
->
devi˚num
;

3306 
	`°r˝y
(
p
->
dev°r
,
o
->devstr);

3307 
p
->
devi˚num
 = 
o
->devicenum;

3308 
	`°r˝y
(
o
->
dev°r
,
tmp
);

3309 
o
->
devi˚num
 = 
d
;

3310 
o
->
hasusb
 = 0;

3311 
o
->
usbass
 = 0;

3312 
p
->
hasusb
 = 0;

3313 
o
->
usbass
 = 0;

3314 
	`a°_˛i
(
fd
,"USB Devices successfully swapped.\n");

3315 
	`a°_muãx_u∆ock
(&
usb_dev_lock
);

3317 
	}
}

3319 
	$tu√_Êash
(
fd
, 
ch™_usbødio_pvt
 *
o
, 
ötÊag
)

3321 
	#NFLASH
 3

	)

3323 
i
;

3325 i‡(
fd
 > 0)

3326 
	`a°_˛i
(
fd
,"USB Devi˚ Fœsh sèπög o¿ch™√»%s...\n",
o
->
«me
);

3327 
i
 = 0; i < 
NFLASH
; i++)

3329 
o
->
txã°key
=1;

3330 
o
->
pmrCh™
->
txPâIn
=1;

3331 
	`TxTe°T⁄e
(
o
->
pmrCh™
, 1);

3332 i‡((
fd
 > 0Ë&& 
ötÊag
)

3334 i‡(
	`h≠py_mswaô
(
fd
,1000,
ötÊag
))

3336 
o
->
pmrCh™
->
txPâIn
=0;

3337 
o
->
txã°key
=0;

3340 } 
	`u¶ìp
(1000000);

3341 
	`TxTe°T⁄e
(
o
->
pmrCh™
, 0);

3342 
o
->
pmrCh™
->
txPâIn
=0;

3343 
o
->
txã°key
=0;

3344 i‡(
i
 =(
NFLASH
 - 1)) ;

3345 i‡((
fd
 > 0Ë&& 
ötÊag
)

3347 i‡(
	`h≠py_mswaô
(
fd
,1500,
ötÊag
))

3349 
o
->
pmrCh™
->
txPâIn
=0;

3350 
o
->
txã°key
=0;

3353 } 
	`u¶ìp
(1500000);

3355 i‡(
fd
 > 0)

3356 
	`a°_˛i
(
fd
,"USB Devi˚ FœshÉndög o¿ch™√»%s...\n",
o
->
«me
);

3357 
o
->
pmrCh™
->
txPâIn
=0;

3358 
o
->
txã°key
=0;

3359 
	}
}

3361 
	$ødio_tu√
(
fd
, 
¨gc
, *
¨gv
[])

3363 
ch™_usbødio_pvt
 *
o
 = 
	`föd_desc
(
usbødio_a˘ive
);

3364 
i
=0;

3366 i‡((
¨gc
 < 2) || (argc > 4))

3367  
RESULT_SHOWUSAGE
;

3369 i‡(
¨gc
 == 2)

3371 
	`a°_˛i
(
fd
,"A˘ivêødiÿöãrÁ˚ i†[%s]\n",
usbødio_a˘ive
);

3372 
	`a°_muãx_lock
(&
usb_dev_lock
);

3373 
	`a°_˛i
(
fd
,"Devi˚ Såög i†%s\n",
o
->
dev°r
);

3374 
	`a°_muãx_u∆ock
(&
usb_dev_lock
);

3375 
	`a°_˛i
(
fd
,"C¨d i†%i\n",
	`usb_gë_usbdev
(
o
->
dev°r
));

3376 
	`a°_˛i
(
fd
,"Output A is currently setÅo ");

3377 if(
o
->
txmixa
==
TX_OUT_COMPOSITE
)
	`a°_˛i
(
fd
,"composite.\n");

3378 i‡(
o
->
txmixa
==
TX_OUT_VOICE
)
	`a°_˛i
(
fd
,"voice.\n");

3379 i‡(
o
->
txmixa
==
TX_OUT_LSD
)
	`a°_˛i
(
fd
,"tone.\n");

3380 i‡(
o
->
txmixa
==
TX_OUT_AUX
)
	`a°_˛i
(
fd
,"auxvoice.\n");

3381 
	`a°_˛i
(
fd
,"off.\n");

3383 
	`a°_˛i
(
fd
,"Output B is currently setÅo ");

3384 if(
o
->
txmixb
==
TX_OUT_COMPOSITE
)
	`a°_˛i
(
fd
,"composite.\n");

3385 i‡(
o
->
txmixb
==
TX_OUT_VOICE
)
	`a°_˛i
(
fd
,"voice.\n");

3386 i‡(
o
->
txmixb
==
TX_OUT_LSD
)
	`a°_˛i
(
fd
,"tone.\n");

3387 i‡(
o
->
txmixb
==
TX_OUT_AUX
)
	`a°_˛i
(
fd
,"auxvoice.\n");

3388 
	`a°_˛i
(
fd
,"off.\n");

3390 
	`a°_˛i
(
fd
,"Tx Voi˚ Levñ cuºíéy sëÅÿ%d\n",
o
->
txmixa£t
);

3391 
	`a°_˛i
(
fd
,"Tx T⁄êLevñ cuºíéy sëÅÿ%d\n",
o
->
tx˘csßdj
);

3392 
	`a°_˛i
(
fd
,"Rx Squñch cuºíéy sëÅÿ%d\n",
o
->
rxsquñchadj
);

3393  
RESULT_SHOWUSAGE
;

3396 
o
->
pmrCh™
->
b
.
tunög
=1;

3398 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"dump")Ë
	`pmrdump
(
o
);

3399 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"swap"))

3401 i‡(
¨gc
 > 3)

3403 
	`usb_devi˚_sw≠
(
fd
,
¨gv
[3]);

3404  
RESULT_SUCCESS
;

3406  
RESULT_SHOWUSAGE
;

3408 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"menu-support"))

3410 i‡(
¨gc
 > 3Ë
	`tu√_míusuµ‹t
(
fd
,
o
,
¨gv
[3]);

3411  
RESULT_SUCCESS
;

3414 i‡(!
o
->
hasusb
)

3416 
	`a°_˛i
(
fd
,"Devi˚ %†cuºíéyÇŸá˘ive\n",
o
->
«me
);

3417  
RESULT_SUCCESS
;

3420 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"rxnoi£")Ë
	`tu√_rxöput
(
fd
,
o
,0,0);

3421 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"rxvoi˚")Ë
	`tu√_rxvoi˚
(
fd
,
o
,0);

3422 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"rxt⁄e")Ë
	`tu√_rx˘css
(
fd
,
o
,0);

3423 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"flash"))

3425 
	`tu√_Êash
(
fd
,
o
,0);

3427 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"rxsquelch"))

3429 i‡(
¨gc
 == 3)

3431 
	`a°_˛i
(
fd
,"CuºíàSig«»Såígth i†%d\n",((32767-
o
->
pmrCh™
->
rxRssi
)*1000/32767));

3432 
	`a°_˛i
(
fd
,"CuºíàSquñch sëtög i†%d\n",
o
->
rxsquñchadj
);

3436 
i
 = 
	`©oi
(
¨gv
[3]);

3437 i‡((
i
 < 0Ë|| (ò> 999)Ë 
RESULT_SHOWUSAGE
;

3438 
	`a°_˛i
(
fd
,"Ch™ged Squñch sëtögÅÿ%d\n",
i
);

3439 
o
->
rxsquñchadj
 = 
i
;

3440 *(
o
->
pmrCh™
->
¥xSquñchAdju°
)((999 - 
i
) * 32767) / 1000;

3443 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"txvoice")) {

3444 
i
 = 0;

3446 if–(
o
->
txmixa
!=
TX_OUT_VOICE
Ë&& (o->
txmixb
!=TX_OUT_VOICE) &&

3447 (
o
->
txmixa
!=
TX_OUT_COMPOSITE
Ë&& (o->
txmixb
!=TX_OUT_COMPOSITE)

3450 
	`a°_log
(
LOG_ERROR
,"NoÅxvoice output configured.\n");

3452 i‡(
¨gc
 == 3)

3454 if((
o
->
txmixa
==
TX_OUT_VOICE
)||(o->txmixa==
TX_OUT_COMPOSITE
))

3455 
	`a°_˛i
(
fd
,"Cuºíàtxvoi˚ sëtög o¿Ch™√»A i†%d\n",
o
->
txmixa£t
);

3457 
	`a°_˛i
(
fd
,"Cuºíàtxvoi˚ sëtög o¿Ch™√»B i†%d\n",
o
->
txmixb£t
);

3461 
i
 = 
	`©oi
(
¨gv
[3]);

3462 i‡((
i
 < 0Ë|| (ò> 999)Ë 
RESULT_SHOWUSAGE
;

3464 if((
o
->
txmixa
==
TX_OUT_VOICE
)||(o->txmixa==
TX_OUT_COMPOSITE
))

3466 
o
->
txmixa£t
=
i
;

3467 
	`a°_˛i
(
fd
,"Ch™gedÅxvoi˚ sëtög o¿Ch™√»AÅÿ%d\n",
o
->
txmixa£t
);

3471 
o
->
txmixb£t
=
i
;

3472 
	`a°_˛i
(
fd
,"Ch™gedÅxvoi˚ sëtög o¿Ch™√»BÅÿ%d\n",
o
->
txmixb£t
);

3474 
	`mixî_wrôe
(
o
);

3475 
	`mu…_£t
(
o
);

3476 
	`a°_˛i
(
fd
,"Ch™ged Tx Voi˚ Ouçuà£âögÅÿ%d\n",
i
);

3478 
o
->
pmrCh™
->
b
.
txCtcssInhibô
=1;

3479 
	`tu√_txouçut
(
o
,
i
,
fd
,0);

3480 
o
->
pmrCh™
->
b
.
txCtcssInhibô
=0;

3482 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"txall")) {

3483 
i
 = 0;

3485 if–(
o
->
txmixa
!=
TX_OUT_VOICE
Ë&& (o->
txmixb
!=TX_OUT_VOICE) &&

3486 (
o
->
txmixa
!=
TX_OUT_COMPOSITE
Ë&& (o->
txmixb
!=TX_OUT_COMPOSITE)

3489 
	`a°_log
(
LOG_ERROR
,"NoÅxvoice output configured.\n");

3491 i‡(
¨gc
 == 3)

3493 if((
o
->
txmixa
==
TX_OUT_VOICE
)||(o->txmixa==
TX_OUT_COMPOSITE
))

3494 
	`a°_˛i
(
fd
,"Cuºíàtxvoi˚ sëtög o¿Ch™√»A i†%d\n",
o
->
txmixa£t
);

3496 
	`a°_˛i
(
fd
,"Cuºíàtxvoi˚ sëtög o¿Ch™√»B i†%d\n",
o
->
txmixb£t
);

3500 
i
 = 
	`©oi
(
¨gv
[3]);

3501 i‡((
i
 < 0Ë|| (ò> 999)Ë 
RESULT_SHOWUSAGE
;

3503 if((
o
->
txmixa
==
TX_OUT_VOICE
)||(o->txmixa==
TX_OUT_COMPOSITE
))

3505 
o
->
txmixa£t
=
i
;

3506 
	`a°_˛i
(
fd
,"Ch™gedÅxvoi˚ sëtög o¿Ch™√»AÅÿ%d\n",
o
->
txmixa£t
);

3510 
o
->
txmixb£t
=
i
;

3511 
	`a°_˛i
(
fd
,"Ch™gedÅxvoi˚ sëtög o¿Ch™√»BÅÿ%d\n",
o
->
txmixb£t
);

3513 
	`mixî_wrôe
(
o
);

3514 
	`mu…_£t
(
o
);

3515 
	`a°_˛i
(
fd
,"Ch™ged Tx Voi˚ Ouçuà£âögÅÿ%d\n",
i
);

3517 
	`tu√_txouçut
(
o
,
i
,
fd
,0);

3519 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"auxvoice")) {

3520 
i
 = 0;

3521 if–(
o
->
txmixa
!=
TX_OUT_AUX
Ë&& (o->
txmixb
!=TX_OUT_AUX))

3523 
	`a°_log
(
LOG_WARNING
,"Noáuxvoice output configured.\n");

3525 i‡(
¨gc
 == 3)

3527 if(
o
->
txmixa
==
TX_OUT_AUX
)

3528 
	`a°_˛i
(
fd
,"Cuºíàauxvoi˚ sëtög o¿Ch™√»A i†%d\n",
o
->
txmixa£t
);

3530 
	`a°_˛i
(
fd
,"Cuºíàauxvoi˚ sëtög o¿Ch™√»B i†%d\n",
o
->
txmixb£t
);

3534 
i
 = 
	`©oi
(
¨gv
[3]);

3535 i‡((
i
 < 0Ë|| (ò> 999)Ë 
RESULT_SHOWUSAGE
;

3536 if(
o
->
txmixa
==
TX_OUT_AUX
)

3538 
o
->
txmixb£t
=
i
;

3539 
	`a°_˛i
(
fd
,"Ch™gedáuxvoi˚ sëtög o¿Ch™√»AÅÿ%d\n",
o
->
txmixa£t
);

3543 
o
->
txmixb£t
=
i
;

3544 
	`a°_˛i
(
fd
,"Ch™gedáuxvoi˚ sëtög o¿Ch™√»BÅÿ%d\n",
o
->
txmixb£t
);

3546 
	`mixî_wrôe
(
o
);

3547 
	`mu…_£t
(
o
);

3551 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"txtone"))

3553 i‡(
¨gc
 == 3)

3554 
	`a°_˛i
(
fd
,"CuºíàTx CTCSS moduœti⁄ sëtög = %d\n",
o
->
tx˘csßdj
);

3557 
i
 = 
	`©oi
(
¨gv
[3]);

3558 i‡((
i
 < 0Ë|| (ò> 999)Ë 
RESULT_SHOWUSAGE
;

3559 
o
->
tx˘csßdj
 = 
i
;

3560 
	`£t_tx˘css_Àvñ
(
o
);

3561 
	`a°_˛i
(
fd
,"Ch™ged Tx CTCSS moduœti⁄ sëtögÅÿ%i\n",
i
);

3563 
o
->
txã°key
=1;

3564 
	`u¶ìp
(5000000);

3565 
o
->
txã°key
=0;

3567 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"nocap"))

3569 
	`a°_˛i
(
fd
,"Fûêˇ±uª (åa˚Ëwa†rx=%dÅx=%dándÇow off.\n",
o
->
b
.
rxˇp2
,o->b.
txˇp2
);

3570 
	`a°_˛i
(
fd
,"Fûêˇ±uª (øwË wa†rx=%dÅx=%dándÇow off.\n",
o
->
b
.
rxˇ¥aw
,o->b.
txˇ¥aw
);

3571 
o
->
b
.
rxˇ¥aw
=o->b.
txˇ¥aw
=o->b.
rxˇp2
=o->b.
txˇp2
=o->
pmrCh™
->b.
rxC≠tuª
=o->pmrCh™->b.
txC≠tuª
=0;

3572 i‡(
‰xˇ¥aw
Ë{ 
	`f˛o£
(‰xˇ¥aw); frxˇ¥aw = 
NULL
; }

3573 i‡(
‰xˇ±ø˚
Ë{ 
	`f˛o£
(‰xˇ±ø˚); frxˇ±ø˚ = 
NULL
; }

3574 i‡(
‰xouåaw
Ë{ 
	`f˛o£
(‰xouåaw); frxouåaw = 
NULL
; }

3575 i‡(
·xˇ¥aw
Ë{ 
	`f˛o£
(·xˇ¥aw); ftxˇ¥aw = 
NULL
; }

3576 i‡(
·xˇ±ø˚
Ë{ 
	`f˛o£
(·xˇ±ø˚); ftxˇ±ø˚ = 
NULL
; }

3577 i‡(
·xouåaw
Ë{ 
	`f˛o£
(·xouåaw); ftxouåaw = 
NULL
; }

3579 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"rxtracecap"))

3581 i‡(!
‰xˇ±ø˚
Ë‰xˇ±ø˚
	`f›í
(
RX_CAP_TRACE_FILE
,"w");

3582 
	`a°_˛i
(
fd
,"TraceÑx on.\n");

3583 
o
->
b
.
rxˇp2
=o->
pmrCh™
->b.
rxC≠tuª
=1;

3585 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"txtracecap"))

3587 i‡(!
·xˇ±ø˚
Ë·xˇ±ø˚
	`f›í
(
TX_CAP_TRACE_FILE
,"w");

3588 
	`a°_˛i
(
fd
,"TraceÅx on.\n");

3589 
o
->
b
.
txˇp2
=o->
pmrCh™
->b.
txC≠tuª
=1;

3591 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"rxcap"))

3593 i‡(!
‰xˇ¥aw
Ë‰xˇ¥aw = 
	`f›í
(
RX_CAP_RAW_FILE
,"w");

3594 
	`a°_˛i
(
fd
,"capÑxÑaw on.\n");

3595 
o
->
b
.
rxˇ¥aw
=1;

3597 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"txcap"))

3599 i‡(!
·xˇ¥aw
Ë·xˇ¥aw = 
	`f›í
(
TX_CAP_RAW_FILE
,"w");

3600 
	`a°_˛i
(
fd
,"capÅxÑaw on.\n");

3601 
o
->
b
.
txˇ¥aw
=1;

3603 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"save"))

3605 
	`tu√_wrôe
(
o
);

3606 
	`a°_˛i
(
fd
,"SavedÑadiÿtunög sëtög†tÿusbødio_tu√_%s.c⁄f\n",
o
->
«me
);

3608 i‡(!
	`°rˇ£cmp
(
¨gv
[2],"load"))

3610 
	`a°_muãx_lock
(&
o
->
ì¥omlock
);

3611 
o
->
ì¥om˘l
)

3613 
	`a°_muãx_u∆ock
(&
o
->
ì¥omlock
);

3614 
	`u¶ìp
(10000);

3615 
	`a°_muãx_lock
(&
o
->
ì¥omlock
);

3617 
o
->
ì¥om˘l
 = 1;

3618 
	`a°_muãx_u∆ock
(&
o
->
ì¥omlock
);

3620 
	`a°_˛i
(
fd
,"Reque°ögÜﬂdög o‡tunög sëtög†‰om EEPROM f‹ ch™√»%s\n",
o
->
«me
);

3624 
o
->
pmrCh™
->
b
.
tunög
=0;

3625  
RESULT_SHOWUSAGE
;

3627 
o
->
pmrCh™
->
b
.
tunög
=0;

3628  
RESULT_SUCCESS
;

3629 
	}
}

3636 
	$£t_tx˘css_Àvñ
(
ch™_usbødio_pvt
 *
o
)

3638 i‡(
o
->
txmixa
 =
TX_OUT_LSD
)

3641 
o
->
txmixa£t
=o->
tx˘csßdj
;

3642 
	`mixî_wrôe
(
o
);

3643 
	`mu…_£t
(
o
);

3645 i‡(
o
->
txmixb
 =
TX_OUT_LSD
)

3648 
o
->
txmixb£t
=o->
tx˘csßdj
;

3649 
	`mixî_wrôe
(
o
);

3650 
	`mu…_£t
(
o
);

3654 if(
o
->
pmrCh™
->
±xCtcssAdju°
){

3655 *
o
->
pmrCh™
->
±xCtcssAdju°
=(o->
tx˘csßdj
 * 
M_Q8
) / 1000;

3659 
	}
}

3663 
	$ødio_£t_debug
(
fd
, 
¨gc
, *
¨gv
[])

3665 
ch™_usbødio_pvt
 *
o
 = 
	`föd_desc
(
usbødio_a˘ive
);

3667 
o
->
debugÀvñ
=1;

3668 
	`a°_˛i
(
fd
,"usbradio debug on.\n");

3669  
RESULT_SUCCESS
;

3670 
	}
}

3672 
	$ødio_£t_debug_off
(
fd
, 
¨gc
, *
¨gv
[])

3674 
ch™_usbødio_pvt
 *
o
 = 
	`föd_desc
(
usbødio_a˘ive
);

3676 
o
->
debugÀvñ
=0;

3677 
	`a°_˛i
(
fd
,"usbradio debug off.\n");

3678  
RESULT_SUCCESS
;

3679 
	}
}

3681 
	$ødio_a˘ive
(
fd
, 
¨gc
, *
¨gv
[])

3683 i‡(
¨gc
 == 2)

3684 
	`a°_˛i
(
fd
, "A˘ivê(comm™dËUSB Radiÿdevi˚ i†[%s]\n", 
usbødio_a˘ive
);

3685 i‡(
¨gc
 != 3)

3686  
RESULT_SHOWUSAGE
;

3688 
ch™_usbødio_pvt
 *
o
;

3689 i‡(
	`°rcmp
(
¨gv
[2], "show") == 0) {

3690 
	`a°_muãx_lock
(&
usb_dev_lock
);

3691 
o
 = 
usbødio_deÁu…
.
√xt
; o; o = o->next)

3692 
	`a°_˛i
(
fd
, "device [%s]Éxistsás device=%s card=%d\n",

3693 
o
->
«me
,o->
dev°r
,
	`usb_gë_usbdev
(o->devstr));

3694 
	`a°_muãx_u∆ock
(&
usb_dev_lock
);

3695  
RESULT_SUCCESS
;

3697 
o
 = 
	`föd_desc
(
¨gv
[2]);

3698 i‡(
o
 =
NULL
)

3699 
	`a°_˛i
(
fd
, "Nÿdevi˚ [%s]Éxi°s\n", 
¨gv
[2]);

3702 
ch™_usbødio_pvt
 *
ao
;

3703 
ao
 = 
usbødio_deÁu…
.
√xt
;áÿ&&áo->
«me
 ;áo =áo->next)

3704 
ao
->
pmrCh™
->
b
.
ødiﬂ˘ive
=0;

3705 
usbødio_a˘ive
 = 
o
->
«me
;

3706 
o
->
pmrCh™
->
b
.
ødiﬂ˘ive
=1;

3707 
	`a°_˛i
(
fd
,"A˘ivê(comm™dËUSB Radiÿdevi˚ sëÅÿ[%s]\n",
usbødio_a˘ive
);

3710  
RESULT_SUCCESS
;

3711 
	}
}

3715 
	$ødio_£t_xpmr_debug
(
fd
, 
¨gc
, *
¨gv
[])

3717 
ch™_usbødio_pvt
 *
o
 = 
	`föd_desc
(
usbødio_a˘ive
);

3719 i‡(
¨gc
 == 4)

3721 
i
;

3722 
i
 = 
	`©oi
(
¨gv
[3]);

3723 i‡((
i
 >= 0) && (i <= 100))

3725 
o
->
pmrCh™
->
åa˚Àvñ
=
i
;

3729 
	`a°_˛i
(
fd
,"usbødiÿxdebug o¿åa˚Àvñ %i\n",
o
->
pmrCh™
->
åa˚Àvñ
);

3731  
RESULT_SUCCESS
;

3732 
	}
}

3735 
	gkey_ußge
[] =

3739 
	gunkey_ußge
[] =

3743 
	ga˘ive_ußge
[] =

3751 
	gødio_tu√_ußge
[] =

3764 #i‚def 
NEW_ASTERISK


3766 
a°_˛i_íåy
 
	g˛i_usbødio
[] = {

3767 { { "ødio", "key", 
NULL
 },

3768 
c⁄sﬁe_key
, "Simulate Rx Signal Present",

3769 
key_ußge
, 
NULL
, NULL},

3771 { { "ødio", "unkey", 
NULL
 },

3772 
c⁄sﬁe_unkey
, "Simulate Rx Signal Lusb",

3773 
unkey_ußge
, 
NULL
, NULL },

3775 { { "ødio", "tu√", 
NULL
 },

3776 
ødio_tu√
, "Radio Tune",

3777 
ødio_tu√_ußge
, 
NULL
, NULL },

3779 { { "ødio", "£t", "debug", 
NULL
 },

3780 
ødio_£t_debug
, "Radio Debug",

3781 
ødio_tu√_ußge
, 
NULL
, NULL },

3783 { { "ødio", "£t", "debug", "off", 
NULL
 },

3784 
ødio_£t_debug_off
, "Radio Debug",

3785 
ødio_tu√_ußge
, 
NULL
, NULL },

3787 { { "ødio", "a˘ive", 
NULL
 },

3788 
ødio_a˘ive
, "Change commanded device",

3789 
a˘ive_ußge
, 
NULL
, NULL },

3791 { { "ødio", "£t", "xdebug", 
NULL
 },

3792 
ødio_£t_xpmr_debug
, "Radio set xpmr debugÜevel",

3793 
a˘ive_ußge
, 
NULL
, NULL },

3802 
	$°‹e_ˇŒîid
(
ch™_usbødio_pvt
 *
o
, *
s
)

3804 
	`a°_ˇŒîid_•lô
(
s
, 
o
->
cid_«me
, (o->cid_«me), o->
cid_num
, (o->cid_num));

3805 
	}
}

3808 
	$°‹e_rxdemod
(
ch™_usbødio_pvt
 *
o
, *
s
)

3810 i‡(!
	`°rˇ£cmp
(
s
,"no")){

3811 
o
->
rxdemod
 = 
RX_AUDIO_NONE
;

3813 i‡(!
	`°rˇ£cmp
(
s
,"speaker")){

3814 
o
->
rxdemod
 = 
RX_AUDIO_SPEAKER
;

3816 i‡(!
	`°rˇ£cmp
(
s
,"flat")){

3817 
o
->
rxdemod
 = 
RX_AUDIO_FLAT
;

3820 
	`a°_log
(
LOG_WARNING
,"UƒecognizedÑxdemodÖ¨amëî: %s\n",
s
);

3824 
	}
}

3827 
	$°‹e_txmixa
(
ch™_usbødio_pvt
 *
o
, *
s
)

3829 i‡(!
	`°rˇ£cmp
(
s
,"no")){

3830 
o
->
txmixa
 = 
TX_OUT_OFF
;

3832 i‡(!
	`°rˇ£cmp
(
s
,"voice")){

3833 
o
->
txmixa
 = 
TX_OUT_VOICE
;

3835 i‡(!
	`°rˇ£cmp
(
s
,"tone")){

3836 
o
->
txmixa
 = 
TX_OUT_LSD
;

3838 i‡(!
	`°rˇ£cmp
(
s
,"composite")){

3839 
o
->
txmixa
 = 
TX_OUT_COMPOSITE
;

3841 i‡(!
	`°rˇ£cmp
(
s
,"auxvoice")){

3842 
o
->
txmixa
 = 
TX_OUT_AUX
;

3845 
	`a°_log
(
LOG_WARNING
,"UƒecognizedÅxmix®∑ømëî: %s\n",
s
);

3849 
	}
}

3851 
	$°‹e_txmixb
(
ch™_usbødio_pvt
 *
o
, *
s
)

3853 i‡(!
	`°rˇ£cmp
(
s
,"no")){

3854 
o
->
txmixb
 = 
TX_OUT_OFF
;

3856 i‡(!
	`°rˇ£cmp
(
s
,"voice")){

3857 
o
->
txmixb
 = 
TX_OUT_VOICE
;

3859 i‡(!
	`°rˇ£cmp
(
s
,"tone")){

3860 
o
->
txmixb
 = 
TX_OUT_LSD
;

3862 i‡(!
	`°rˇ£cmp
(
s
,"composite")){

3863 
o
->
txmixb
 = 
TX_OUT_COMPOSITE
;

3865 i‡(!
	`°rˇ£cmp
(
s
,"auxvoice")){

3866 
o
->
txmixb
 = 
TX_OUT_AUX
;

3869 
	`a°_log
(
LOG_WARNING
,"UƒecognizedÅxmixbÖ¨amëî: %s\n",
s
);

3873 
	}
}

3876 
	$°‹e_rxcdty≥
(
ch™_usbødio_pvt
 *
o
, *
s
)

3878 i‡(!
	`°rˇ£cmp
(
s
,"no")){

3879 
o
->
rxcdty≥
 = 
CD_IGNORE
;

3881 i‡(!
	`°rˇ£cmp
(
s
,"usb")){

3882 
o
->
rxcdty≥
 = 
CD_HID
;

3884 i‡(!
	`°rˇ£cmp
(
s
,"dsp")){

3885 
o
->
rxcdty≥
 = 
CD_XPMR_NOISE
;

3887 i‡(!
	`°rˇ£cmp
(
s
,"vox")){

3888 
o
->
rxcdty≥
 = 
CD_XPMR_VOX
;

3890 i‡(!
	`°rˇ£cmp
(
s
,"usbinvert")){

3891 
o
->
rxcdty≥
 = 
CD_HID_INVERT
;

3893 i‡(!
	`°rˇ£cmp
(
s
,"pp")){

3894 
o
->
rxcdty≥
 = 
CD_PP
;

3896 i‡(!
	`°rˇ£cmp
(
s
,"ppinvert")){

3897 
o
->
rxcdty≥
 = 
CD_PP_INVERT
;

3900 
	`a°_log
(
LOG_WARNING
,"UƒecognizedÑxcdty≥Ö¨amëî: %s\n",
s
);

3904 
	}
}

3907 
	$°‹e_rxsdty≥
(
ch™_usbødio_pvt
 *
o
, *
s
)

3909 i‡(!
	`°rˇ£cmp
(
s
,"no") || !strcasecmp(s,"SD_IGNORE")){

3910 
o
->
rxsdty≥
 = 
SD_IGNORE
;

3912 i‡(!
	`°rˇ£cmp
(
s
,"usb") || !strcasecmp(s,"SD_HID")){

3913 
o
->
rxsdty≥
 = 
SD_HID
;

3915 i‡(!
	`°rˇ£cmp
(
s
,"usbinvert") || !strcasecmp(s,"SD_HID_INVERT")){

3916 
o
->
rxsdty≥
 = 
SD_HID_INVERT
;

3918 i‡(!
	`°rˇ£cmp
(
s
,"dsp") || !strcasecmp(s,"SD_XPMR")){

3919 
o
->
rxsdty≥
 = 
SD_XPMR
;

3921 i‡(!
	`°rˇ£cmp
(
s
,"pp")) {

3922 
o
->
rxsdty≥
 = 
SD_PP
;

3924 i‡(!
	`°rˇ£cmp
(
s
,"ppinvert")) {

3925 
o
->
rxsdty≥
 = 
SD_PP_INVERT
;

3928 
	`a°_log
(
LOG_WARNING
,"UƒecognizedÑxsdty≥Ö¨amëî: %s\n",
s
);

3932 
	}
}

3936 
	$°‹e_rxgaö
(
ch™_usbødio_pvt
 *
o
, *
s
)

3938 
f
;

3939 
	`ssˇnf
(
s
,"%f",&
f
);

3940 
o
->
rxgaö
 = 
f
;

3942 
	}
}

3945 
	$°‹e_rxvoi˚adj
(
ch™_usbødio_pvt
 *
o
, *
s
)

3947 
f
;

3948 
	`ssˇnf
(
s
,"%f",&
f
);

3949 
o
->
rxvoi˚adj
 = 
f
;

3951 
	}
}

3954 
	$°‹e_rx˘csßdj
(
ch™_usbødio_pvt
 *
o
, *
s
)

3956 
f
;

3957 
	`ssˇnf
(
s
,"%f",&
f
);

3958 
o
->
rx˘csßdj
 = 
f
;

3960 
	}
}

3963 
	$°‹e_txto˘y≥
(
ch™_usbødio_pvt
 *
o
, *
s
)

3965 i‡(!
	`°rˇ£cmp
(
s
,"no") || !strcasecmp(s,"TOC_NONE")){

3966 
o
->
txto˘y≥
 = 
TOC_NONE
;

3968 i‡(!
	`°rˇ£cmp
(
s
,"phase") || !strcasecmp(s,"TOC_PHASE")){

3969 
o
->
txto˘y≥
 = 
TOC_PHASE
;

3971 i‡(!
	`°rˇ£cmp
(
s
,"notone") || !strcasecmp(s,"TOC_NOTONE")){

3972 
o
->
txto˘y≥
 = 
TOC_NOTONE
;

3975 
	`a°_log
(
LOG_WARNING
,"UƒecognizedÅxto˘y≥Ö¨amëî: %s\n",
s
);

3977 
	}
}

3980 
	$tu√_txouçut
(
ch™_usbødio_pvt
 *
o
, 
vÆue
, 
fd
, 
ötÊag
)

3982 
o
->
txã°key
=1;

3983 
o
->
pmrCh™
->
txPâIn
=1;

3984 
	`TxTe°T⁄e
(
o
->
pmrCh™
, 1);

3985 i‡(
fd
 > 0)

3987 
	`a°_˛i
(
fd
,"T⁄êouçuà°¨tög o¿ch™√»%s...\n",
o
->
«me
);

3988 i‡(
	`h≠py_mswaô
(
fd
,5000,
ötÊag
))

3990 
o
->
pmrCh™
->
txPâIn
=0;

3991 
o
->
txã°key
=0;

3993 } 
	`u¶ìp
(5000000);

3994 
	`TxTe°T⁄e
(
o
->
pmrCh™
, 0);

3995 i‡(
fd
 > 0Ë
	`a°_˛i
(fd,"T⁄êouçuàídög o¿ch™√»%s...\n",
o
->
«me
);

3996 
o
->
pmrCh™
->
txPâIn
=0;

3997 
o
->
txã°key
=0;

3998 
	}
}

4002 
	$tu√_rxöput
(
fd
, 
ch™_usbødio_pvt
 *
o
, 
£tsql
, 
ötÊag
)

4004 c⁄° 
£âögmö
=1;

4005 c⁄° 
£âög°¨t
=2;

4006 c⁄° 
maxåõs
=12;

4008 
suc˚ss
;

4009 
èrgë
;

4010 
tﬁî™˚
=2750;

4011 
£âög
=0, 
åõs
=0, 
tmpdiscÁ˘‹
, 
mós
, 
mó¢oi£
;

4012 
£âögmax
,
f
;

4014 if(
o
->
rxdemod
==
RX_AUDIO_SPEAKER
 && o->
rxcdty≥
==
CD_XPMR_NOISE
)

4016 
	`a°_˛i
(
fd
,"ERROR: usbradio.confÑxdemod=speaker vs. carrierfrom=dsp \n");

4019 if–
o
->
rxdemod
==
RX_AUDIO_FLAT
 )

4020 
èrgë
=27000;

4022 
èrgë
=23000;

4024 
£âögmax
 = 
o
->
micmax
;

4026 
o
->
pmrCh™
->
b
.
tunög
=1;

4028 
£âög
 = 
£âög°¨t
;

4030 
	`a°_˛i
(
fd
,"tu√Ñxnoi£ maxåõs=%i,Å¨gë=%i,Åﬁî™˚=%i\n",
maxåõs
,
èrgë
,
tﬁî™˚
);

4032 
åõs
<
maxåõs
)

4034 
	`£èmixî
(
o
->
devi˚num
,
MIXER_PARAM_MIC_CAPTURE_VOL
,
£âög
,0);

4035 
	`£èmixî
(
o
->
devi˚num
,
MIXER_PARAM_MIC_BOOST
,o->
rxboo°£t
,0);

4037 i‡(
	`h≠py_mswaô
(
fd
,100,
ötÊag
))

4039 
o
->
pmrCh™
->
b
.
tunög
=0;

4042 
o
->
pmrCh™
->
•sMósuª
->
sour˚
 = o->pmrCh™->
•sRx
->source;

4043 
o
->
pmrCh™
->
•sMósuª
->
discÁ˘‹
=2000;

4044 
o
->
pmrCh™
->
•sMósuª
->
íabÀd
=1;

4045 
o
->
pmrCh™
->
•sMósuª
->
amax
 = o->pmrCh™->•sMósuª->
amö
 = 0;

4046 i‡(
	`h≠py_mswaô
(
fd
,400,
ötÊag
))

4048 
o
->
pmrCh™
->
b
.
tunög
=0;

4051 
mós
=
o
->
pmrCh™
->
•sMósuª
->
≠ók
;

4052 
o
->
pmrCh™
->
•sMósuª
->
íabÀd
=0;

4054 if(!
mós
)meas++;

4055 
	`a°_˛i
(
fd
,"åõs=%i, sëtög=%i, mós=%i\n",
åõs
,
£âög
,
mós
);

4057 if–(
mós
<(
èrgë
-
tﬁî™˚
Ë|| mós>—¨gë+tﬁî™˚)Ë&& 
åõs
<=2){

4058 
f
=()(
£âög
*
èrgë
)/
mós
;

4059 
£âög
=()(
f
+0.5);

4061 if–
mós
<(
èrgë
-
tﬁî™˚
Ë&& 
åõs
>2){

4062 
£âög
++;

4064 if–
mós
>(
èrgë
+
tﬁî™˚
Ë&& 
åõs
>2){

4065 
£âög
--;

4067 if(
åõs
>5 && 
mós
>(
èrgë
-
tﬁî™˚
) && meas<(target+tolerance) )

4072 if(
£âög
<
£âögmö
)setting=settingmin;

4073 if(
£âög
>
£âögmax
)setting=settingmax;

4075 
åõs
++;

4080 
tmpdiscÁ˘‹
=
o
->
pmrCh™
->
•sRx
->
discÁ˘‹
;

4081 
o
->
pmrCh™
->
•sRx
->
discÁ˘‹
=(
i16
)2000;

4082 
o
->
pmrCh™
->
•sRx
->
discou¡îu
=o->pmrCh™->•sRx->
discou¡îl
=0;

4083 
o
->
pmrCh™
->
•sRx
->
amax
=o->pmrCh™->•sRx->
amö
=0;

4084 i‡(
	`h≠py_mswaô
(
fd
,200,
ötÊag
))

4086 
o
->
pmrCh™
->
b
.
tunög
=0;

4089 
mó¢oi£
=
o
->
pmrCh™
->
rxRssi
;

4092 
o
->
pmrCh™
->
•sRx
->
discÁ˘‹
=
tmpdiscÁ˘‹
;

4093 
o
->
pmrCh™
->
•sRx
->
discou¡îu
=o->pmrCh™->•sRx->
discou¡îl
=0;

4094 
o
->
pmrCh™
->
•sRx
->
amax
=o->pmrCh™->•sRx->
amö
=0;

4095 i‡(
	`h≠py_mswaô
(
fd
,200,
ötÊag
))

4097 
o
->
pmrCh™
->
b
.
tunög
=0;

4101 
	`a°_˛i
(
fd
,"DONEÅrõs=%i, sëtög=%i, mós=%i, sqnoi£=%i\n",
åõs
,

4102 ((
£âög
 * 1000Ë+ (
o
->
micmax
 / 2)Ë/ o->micmax,
mós
,
mó¢oi£
);

4104 if–
mós
<(
èrgë
-
tﬁî™˚
) || meas>(target+tolerance) ){

4105 
suc˚ss
=0;

4106 
	`a°_˛i
(
fd
,"ERROR: RX INPUT ADJUST FAILED.\n");

4108 
suc˚ss
=1;

4109 
	`a°_˛i
(
fd
,"INFO: RX INPUT ADJUST SUCCESS.\n");

4110 
o
->
rxmixî£t
=((
£âög
 * 1000Ë+ (o->
micmax
 / 2)) / o->micmax;

4112 if(
o
->
rxcdty≥
==
CD_XPMR_NOISE
)

4114 
n‹mRssi
=((32767-
o
->
pmrCh™
->
rxRssi
)*1000/32767);

4116 if((
mós
/(
mó¢oi£
/10))>26){

4117 
	`a°_˛i
(
fd
,"WARNING: Insufficient high frequencyÇoise fromÑeceiver.\n");

4118 
	`a°_˛i
(
fd
,"WARNING: Rx inputÖoint may be de-emphasizedándÇot flat.\n");

4119 
	`a°_˛i
(
fd
," usbradio.conf setting of 'carrierfrom=dsp'ÇotÑecommended.\n");

4123 
	`a°_˛i
(
fd
,"RxÇoise input seems sufficient for squelch.\n");

4125 i‡(
£tsql
)

4127 
o
->
rxsquñchadj
 = 
n‹mRssi
 + 150;

4128 i‡(
o
->
rxsquñchadj
 > 999) o->rxsquelchadj = 999;

4129 *(
o
->
pmrCh™
->
¥xSquñchAdju°
)((999 - o->
rxsquñchadj
) * 32767) / 1000;

4130 
	`a°_˛i
(
fd
,"Rx Squñch sëÅÿ%d (RSSI=%d).\n",
o
->
rxsquñchadj
,
n‹mRssi
);

4134 if(
o
->
rxsquñchadj
<
n‹mRssi
)

4136 
	`a°_˛i
(
fd
,"WARNING: RSSI=%òSQUELCH=%ò™d i†£àtoÿloo£.\n",
n‹mRssi
,
o
->
rxsquñchadj
);

4137 
	`a°_˛i
(
fd
," Use 'radioÅuneÑxsquelch'Åoádjust.\n");

4142 
o
->
pmrCh™
->
b
.
tunög
=0;

4143 
	}
}

4146 
	$do_rxdi•œy
(
fd
, 
ch™_usbødio_pvt
 *
o
)

4148 
j
,
waskeyed
,
mós
,
ncﬁs
 = 75;

4149 
°r
[256];

4151 
	`a°_˛i
(
fd
,"RX VOICE DISPLAY:\n");

4152 
	`a°_˛i
(
fd
," v -- 3KHz v -- 5KHz\n");

4154 if(!
o
->
pmrCh™
->
•sMósuª
)

4156 
	`a°_˛i
(
fd
,"ERROR: NO MEASURE BLOCK.\n");

4160 if(!
o
->
pmrCh™
->
•sMósuª
->
sour˚
 || !o->pmrCh™->
¥xVoi˚Adju°
 )

4162 
	`a°_˛i
(
fd
,"ERROR: NO SOURCE OR MEASURE SETTING.\n");

4166 
o
->
pmrCh™
->
•sMósuª
->
sour˚
=o->pmrCh™->
•sRxOut
->
sök
;

4168 
o
->
pmrCh™
->
•sMósuª
->
íabÀd
=1;

4169 
o
->
pmrCh™
->
•sMósuª
->
discÁ˘‹
=1000;

4171 
waskeyed
 = !
o
->
rxkeyed
;

4174 
o
->
pmrCh™
->
•sMósuª
->
amax
 =

4175 
o
->
pmrCh™
->
•sMósuª
->
amö
 = 0;

4176 i‡(
	`ød_rxwaô
(
fd
,100)) ;

4177 i‡(
o
->
rxkeyed
 !
waskeyed
)

4179 
j
 = 0; j < 
ncﬁs
; j++Ë
°r
[j] = ' ';

4180 
°r
[
j
] = 0;

4181 
	`a°_˛i
(
fd
," %†\r",
°r
);

4183 
waskeyed
 = 
o
->
rxkeyed
;

4184 i‡(!
o
->
rxkeyed
) {

4185 
	`a°_˛i
(
fd
,"\r");

4188 
mós
 = 
o
->
pmrCh™
->
•sMósuª
->
≠ók
;

4189 
j
 = 0; j < 
ncﬁs
; j++)

4191 
thªsh
 = (
mós
 * 
ncﬁs
) / 16384;

4192 i‡(
j
 < 
thªsh
Ë
°r
[j] = '=';

4193 i‡(
j
 =
thªsh
Ë
°r
[j] = '>';

4194 
°r
[
j
] = ' ';

4196 
°r
[
j
] = 0;

4197 
	`a°_˛i
(
fd
,"|%s|\r",
°r
);

4199 
o
->
pmrCh™
->
•sMósuª
->
íabÀd
=0;

4200 
	}
}

4202 
	$_míu_rxvoi˚
(
fd
, 
ch™_usbødio_pvt
 *
o
, *
°r
)

4204 
i
,
x
;

4205 
f
,
f1
;

4207 i‡(!
°r
[0])

4209 i‡(
o
->
rxdemod
 =
RX_AUDIO_FLAT
)

4210 
	`a°_˛i
(
fd
,"CuºíàRx voi˚ sëtög: %d\n",()((
o
->
rxvoi˚adj
 * 200.0) + .5));

4212 
	`a°_˛i
(
fd
,"CuºíàRx voi˚ sëtög: %d\n",
o
->
rxmixî£t
);

4215 
x
 = 0; 
°r
[x]; x++)

4217 i‡(!
	`isdigô
(
°r
[
x
])) ;

4219 i‡(
°r
[
x
] || (
	`ssˇnf
(°r,"%d",&
i
) < 1) || (i < 0) || (i > 999))

4221 
	`a°_˛i
(
fd
,"Entry Error, Rx voice settingÇot changed\n");

4224 i‡(
o
->
rxdemod
 =
RX_AUDIO_FLAT
)

4226 
o
->
rxvoi˚adj
=()
i
 / 200.0;

4230 
o
->
rxmixî£t
 = 
i
;

4231 
	`£èmixî
(
o
->
devi˚num
,
MIXER_PARAM_MIC_CAPTURE_VOL
,

4232 
o
->
rxmixî£t
 * o->
micmax
 / 1000,0);

4233 
	`£èmixî
(
o
->
devi˚num
,
MIXER_PARAM_MIC_BOOST
,o->
rxboo°£t
,0);

4235 
f
 = 1000.0 / (Ë
o
->
micmax
;

4236 
o
->
rxvoi˚adj
 = 0.5 + (
	`modff
(((Ë
i
Ë/ 
f
,&
f1
) * .093981);

4238 *(
o
->
pmrCh™
->
¥xVoi˚Adju°
)=o->
rxvoi˚adj
 * 
M_Q8
;

4239 
	`a°_˛i
(
fd
,"Ch™gedÑx voi˚ sëtögÅÿ%d\n",
i
);

4241 
	}
}

4243 
	$_míu_¥öt
(
fd
, 
ch™_usbødio_pvt
 *
o
)

4245 
	`a°_˛i
(
fd
,"A˘ivêødiÿöãrÁ˚ i†[%s]\n",
usbødio_a˘ive
);

4246 
	`a°_muãx_lock
(&
usb_dev_lock
);

4247 
	`a°_˛i
(
fd
,"Devi˚ Såög i†%s\n",
o
->
dev°r
);

4248 
	`a°_muãx_u∆ock
(&
usb_dev_lock
);

4249 
	`a°_˛i
(
fd
,"C¨d i†%i\n",
	`usb_gë_usbdev
(
o
->
dev°r
));

4250 
	`a°_˛i
(
fd
,"Output A is currently setÅo ");

4251 if(
o
->
txmixa
==
TX_OUT_COMPOSITE
)
	`a°_˛i
(
fd
,"composite.\n");

4252 i‡(
o
->
txmixa
==
TX_OUT_VOICE
)
	`a°_˛i
(
fd
,"voice.\n");

4253 i‡(
o
->
txmixa
==
TX_OUT_LSD
)
	`a°_˛i
(
fd
,"tone.\n");

4254 i‡(
o
->
txmixa
==
TX_OUT_AUX
)
	`a°_˛i
(
fd
,"auxvoice.\n");

4255 
	`a°_˛i
(
fd
,"off.\n");

4257 
	`a°_˛i
(
fd
,"Output B is currently setÅo ");

4258 if(
o
->
txmixb
==
TX_OUT_COMPOSITE
)
	`a°_˛i
(
fd
,"composite.\n");

4259 i‡(
o
->
txmixb
==
TX_OUT_VOICE
)
	`a°_˛i
(
fd
,"voice.\n");

4260 i‡(
o
->
txmixb
==
TX_OUT_LSD
)
	`a°_˛i
(
fd
,"tone.\n");

4261 i‡(
o
->
txmixb
==
TX_OUT_AUX
)
	`a°_˛i
(
fd
,"auxvoice.\n");

4262 
	`a°_˛i
(
fd
,"off.\n");

4264 
	`a°_˛i
(
fd
,"Tx Voi˚ Levñ cuºíéy sëÅÿ%d\n",
o
->
txmixa£t
);

4265 
	`a°_˛i
(
fd
,"Tx T⁄êLevñ cuºíéy sëÅÿ%d\n",
o
->
tx˘csßdj
);

4266 
	`a°_˛i
(
fd
,"Rx Squñch cuºíéy sëÅÿ%d\n",
o
->
rxsquñchadj
);

4268 
	}
}

4270 
	$_míu_rxsquñch
(
fd
, 
ch™_usbødio_pvt
 *
o
, *
°r
)

4272 
i
,
x
;

4274 i‡(!
°r
[0])

4276 
	`a°_˛i
(
fd
,"CuºíàSig«»Såígth i†%d\n",((32767-
o
->
pmrCh™
->
rxRssi
)*1000/32767));

4277 
	`a°_˛i
(
fd
,"CuºíàSquñch sëtög i†%d\n",
o
->
rxsquñchadj
);

4280 
x
 = 0; 
°r
[x]; x++)

4282 i‡(!
	`isdigô
(
°r
[
x
])) ;

4284 i‡(
°r
[
x
] || (
	`ssˇnf
(°r,"%d",&
i
) < 1) || (i < 0) || (i > 999))

4286 
	`a°_˛i
(
fd
,"Entry Error, Rx Squelch Level settingÇot changed\n");

4289 
	`a°_˛i
(
fd
,"Ch™ged Rx Squñch Levñ sëtögÅÿ%d\n",
i
);

4290 
o
->
rxsquñchadj
 = 
i
;

4291 *(
o
->
pmrCh™
->
¥xSquñchAdju°
)((999 - 
i
) * 32767) / 1000;

4293 
	}
}

4295 
	$_míu_txvoi˚
(
fd
, 
ch™_usbødio_pvt
 *
o
,*
c°r
)

4297 *
°r
 = 
c°r
;

4298 
i
,
j
,
x
,
dokey
,
wôh˘css
;

4300 if–(
o
->
txmixa
!=
TX_OUT_VOICE
Ë&& (o->
txmixb
!=TX_OUT_VOICE) &&

4301 (
o
->
txmixa
!=
TX_OUT_COMPOSITE
Ë&& (o->
txmixb
!=TX_OUT_COMPOSITE))

4303 
	`a°_˛i
(
fd
,"Error, NoÅxvoice output configured.\n");

4306 i‡(!
°r
[0])

4308 if((
o
->
txmixa
==
TX_OUT_VOICE
)||(o->txmixa==
TX_OUT_COMPOSITE
))

4310 
	`a°_˛i
(
fd
,"CuºíàTx Voi˚ Levñ sëtög o¿Ch™√»A i†%d\n",
o
->
txmixa£t
);

4314 
	`a°_˛i
(
fd
,"CuºíàTx Voi˚ Levñ sëtög o¿Ch™√»B i†%d\n",
o
->
txmixb£t
);

4318 if((
o
->
txmixa
==
TX_OUT_VOICE
)||(o->txmixa==
TX_OUT_COMPOSITE
))

4320 
j
 = 
o
->
txmixa£t
;

4324 
j
 = 
o
->
txmixb£t
;

4326 
dokey
 = 0;

4327 i‡(
°r
[0] == 'K')

4329 
dokey
 = 1;

4330 
°r
++;

4332 
wôh˘css
 = 0;

4333 i‡(
°r
[0] == 'C')

4335 
wôh˘css
 = 1;

4336 
°r
++;

4338 i‡(!
°r
[0])

4340 
	`a°_˛i
(
fd
,"Keying Transmitteránd sending 1000 HzÅone for 5 seconds...\n");

4341 i‡(
wôh˘css
Ë
o
->
pmrCh™
->
b
.
txCtcssInhibô
=1;

4342 
	`tu√_txouçut
(
o
,
j
,
fd
,1);

4343 
o
->
pmrCh™
->
b
.
txCtcssInhibô
=0;

4344 
	`a°_˛i
(
fd
,"DONE.\n");

4347 
x
 = 0; 
°r
[x]; x++)

4349 i‡(!
	`isdigô
(
°r
[
x
])) ;

4351 i‡(
°r
[
x
] || (
	`ssˇnf
(°r,"%d",&
i
) < 1) || (i < 0) || (i > 999))

4353 
	`a°_˛i
(
fd
,"Entry Error, Tx Voice Level settingÇot changed\n");

4356 if((
o
->
txmixa
==
TX_OUT_VOICE
)||(o->txmixa==
TX_OUT_COMPOSITE
))

4358 
o
->
txmixa£t
=
i
;

4359 
	`a°_˛i
(
fd
,"Ch™ged Tx Voi˚ Levñ sëtög o¿Ch™√»AÅÿ%d\n",
o
->
txmixa£t
);

4363 
o
->
txmixb£t
=
i
;

4364 
	`a°_˛i
(
fd
,"Ch™ged Tx Voi˚ Levñ sëtög o¿Ch™√»BÅÿ%d\n",
o
->
txmixb£t
);

4366 
	`mixî_wrôe
(
o
);

4367 
	`mu…_£t
(
o
);

4368 i‡(
dokey
)

4370 
	`a°_˛i
(
fd
,"Keying Transmitteránd sending 1000 HzÅone for 5 seconds...\n");

4371 i‡(!
wôh˘css
Ë
o
->
pmrCh™
->
b
.
txCtcssInhibô
=1;

4372 
	`tu√_txouçut
(
o
,
i
,
fd
,1);

4373 
o
->
pmrCh™
->
b
.
txCtcssInhibô
=0;

4374 
	`a°_˛i
(
fd
,"DONE.\n");

4377 
	}
}

4380 
	$_míu_auxvoi˚
(
fd
, 
ch™_usbødio_pvt
 *
o
, *
°r
)

4382 
i
,
x
;

4384 if–(
o
->
txmixa
!=
TX_OUT_AUX
Ë&& (o->
txmixb
!=TX_OUT_AUX))

4386 
	`a°_˛i
(
fd
,"Error, No Auxvoice output configured.\n");

4389 i‡(!
°r
[0])

4391 if(
o
->
txmixa
==
TX_OUT_AUX
)

4392 
	`a°_˛i
(
fd
,"CuºíàAux Voi˚ Levñ sëtög o¿Ch™√»A i†%d\n",
o
->
txmixa£t
);

4394 
	`a°_˛i
(
fd
,"CuºíàAux Voi˚ Levñ sëtög o¿Ch™√»B i†%d\n",
o
->
txmixb£t
);

4397 
x
 = 0; 
°r
[x]; x++)

4399 i‡(!
	`isdigô
(
°r
[
x
])) ;

4401 i‡(
°r
[
x
] || (
	`ssˇnf
(°r,"%d",&
i
) < 1) || (i < 0) || (i > 999))

4403 
	`a°_˛i
(
fd
,"Entry Error, Aux Voice Level settingÇot changed\n");

4406 if(
o
->
txmixa
==
TX_OUT_AUX
)

4408 
o
->
txmixb£t
=
i
;

4409 
	`a°_˛i
(
fd
,"Ch™ged Aux Voi˚ sëtög o¿Ch™√»AÅÿ%d\n",
o
->
txmixa£t
);

4413 
o
->
txmixb£t
=
i
;

4414 
	`a°_˛i
(
fd
,"Ch™ged Aux Voi˚ sëtög o¿Ch™√»BÅÿ%d\n",
o
->
txmixb£t
);

4416 
	`mixî_wrôe
(
o
);

4417 
	`mu…_£t
(
o
);

4419 
	}
}

4421 
	$_míu_txt⁄e
(
fd
, 
ch™_usbødio_pvt
 *
o
, *
c°r
)

4423 *
°r
 = 
c°r
;

4424 
i
,
x
,
dokey
;

4426 i‡(!
°r
[0])

4428 
	`a°_˛i
(
fd
,"CuºíàTx CTCSS Moduœti⁄ Levñ sëtög = %d\n",
o
->
tx˘csßdj
);

4431 
dokey
 = 0;

4432 i‡(
°r
[0] == 'K')

4434 
dokey
 = 1;

4435 
°r
++;

4437 i‡(
°r
[0])

4439 
x
 = 0; 
°r
[x]; x++)

4441 i‡(!
	`isdigô
(
°r
[
x
])) ;

4443 i‡(
°r
[
x
] || (
	`ssˇnf
(°r,"%d",&
i
) < 1) || (i < 0) || (i > 999))

4445 
	`a°_˛i
(
fd
,"Entry Error, Tx CTCSS Modulation Level settingÇot changed\n");

4448 
o
->
tx˘csßdj
 = 
i
;

4449 
	`£t_tx˘css_Àvñ
(
o
);

4450 
	`a°_˛i
(
fd
,"Ch™ged Tx CTCSS Moduœti⁄ Levñ sëtögÅÿ%i\n",
i
);

4452 i‡(
dokey
)

4454 
	`a°_˛i
(
fd
,"Keying Radioánd sending CTCSSÅone for 5 seconds...\n");

4455 
o
->
txã°key
=1;

4456 
	`h≠py_mswaô
(
fd
,5000,1);

4457 
o
->
txã°key
=0;

4458 
	`a°_˛i
(
fd
,"DONE.\n");

4461 
	}
}

4463 
	$tu√_míusuµ‹t
(
fd
, 
ch™_usbødio_pvt
 *
o
, *
cmd
)

4465 
x
,
ﬁdvîbo£
,
Ê©rx
,
txhas˘css
;

4466 
ch™_usbødio_pvt
 *
oy
 = 
NULL
;

4468 
ﬁdvîbo£
 = 
›ti⁄_vîbo£
;

4469 
›ti⁄_vîbo£
 = 0;

4470 
Ê©rx
 = 0;

4471 i‡(
o
->
rxdemod
 =
RX_AUDIO_FLAT
Ë
Ê©rx
 = 1;

4472 
txhas˘css
 = 0;

4473 i‡((
o
->
txmixa
 =
TX_OUT_LSD
Ë|| (o->txmix®=
TX_OUT_COMPOSITE
) ||

4474 (
o
->
txmixb
 =
TX_OUT_LSD
Ë|| (o->txmixb =
TX_OUT_COMPOSITE
)Ë
txhas˘css
 = 1;

4475 
cmd
[0])

4478 
	`a°_˛i
(
fd
,"%d,%d,%d\n",
Ê©rx
,
txhas˘css
,
o
->
echomode
);

4481 
x
 = 0,
oy
 = 
usbødio_deÁu…
.
√xt
; oy && oy->
«me
 ; oy = oy->next, x++)

4483 i‡(
x
Ë
	`a°_˛i
(
fd
,",");

4484 
	`a°_˛i
(
fd
,"%s",
oy
->
«me
);

4486 
	`a°_˛i
(
fd
,"\n");

4489 
	`_míu_¥öt
(
fd
,
o
);

4492 
x
 = 0,
oy
 = 
usbødio_deÁu…
.
√xt
; oy && oy->
«me
 ; oy = oy->next)

4494 i‡(!
	`°rcmp
(
oy
->
«me
,
o
->name)) ;

4495 i‡(
x
Ë
	`a°_˛i
(
fd
,",");

4496 
	`a°_˛i
(
fd
,"%s",
oy
->
«me
);

4497 
x
++;

4499 
	`a°_˛i
(
fd
,"\n");

4502 i‡(!
o
->
hasusb
)

4504 
	`a°_˛i
(
fd
,"Devi˚ %†cuºíéyÇŸá˘ive\n",
o
->
«me
);

4507 
	`tu√_rxöput
(
fd
,
o
,1,1);

4510 i‡(!
o
->
hasusb
)

4512 
	`a°_˛i
(
fd
,"Devi˚ %†cuºíéyÇŸá˘ive\n",
o
->
«me
);

4515 
	`do_rxdi•œy
(
fd
,
o
);

4518 i‡(!
o
->
hasusb
)

4520 
	`a°_˛i
(
fd
,"Devi˚ %†cuºíéyÇŸá˘ive\n",
o
->
«me
);

4523 
	`_míu_rxvoi˚
(
fd
, 
o
, 
cmd
 + 1);

4526 i‡(!
o
->
hasusb
)

4528 
	`a°_˛i
(
fd
,"Devi˚ %†cuºíéyÇŸá˘ive\n",
o
->
«me
);

4531 
	`tu√_rx˘css
(
fd
,
o
,1);

4534 i‡(!
o
->
hasusb
)

4536 
	`a°_˛i
(
fd
,"Devi˚ %†cuºíéyÇŸá˘ive\n",
o
->
«me
);

4539 
	`_míu_rxsquñch
(
fd
,
o
,
cmd
 + 1);

4542 i‡(!
o
->
hasusb
)

4544 
	`a°_˛i
(
fd
,"Devi˚ %†cuºíéyÇŸá˘ive\n",
o
->
«me
);

4547 
	`_míu_txvoi˚
(
fd
,
o
,
cmd
 + 1);

4550 i‡(!
o
->
hasusb
)

4552 
	`a°_˛i
(
fd
,"Devi˚ %†cuºíéyÇŸá˘ive\n",
o
->
«me
);

4555 
	`_míu_auxvoi˚
(
fd
,
o
,
cmd
 + 1);

4558 i‡(!
o
->
hasusb
)

4560 
	`a°_˛i
(
fd
,"Devi˚ %†cuºíéyÇŸá˘ive\n",
o
->
«me
);

4563 
	`_míu_txt⁄e
(
fd
,
o
,
cmd
 + 1);

4566 i‡(!
o
->
hasusb
)

4568 
	`a°_˛i
(
fd
,"Devi˚ %†cuºíéyÇŸá˘ive\n",
o
->
«me
);

4571 
	`tu√_rxvoi˚
(
fd
,
o
,1);

4574 
	`tu√_wrôe
(
o
);

4575 
	`a°_˛i
(
fd
,"SavedÑadiÿtunög sëtög†tÿusbødio_tu√_%s.c⁄f\n",
o
->
«me
);

4578 i‡(
cmd
[1])

4580 i‡(
cmd
[1] > '0'Ë
o
->
echomode
 = 1;

4581 
o
->
echomode
 = 0;

4582 
	`a°_˛i
(
fd
,"EchÿModêch™gedÅÿ%s\n",(
o
->
echomode
) ? "Enabled" : "Disabled");

4585 
	`a°_˛i
(
fd
,"EchÿModêi†cuºíéy %s\n",(
o
->
echomode
) ? "Enabled" : "Disabled");

4588 i‡(!
o
->
hasusb
)

4590 
	`a°_˛i
(
fd
,"Devi˚ %†cuºíéyÇŸá˘ive\n",
o
->
«me
);

4593 
	`tu√_Êash
(
fd
,
o
,1);

4596 
	`a°_˛i
(
fd
,"Invalid Command\n");

4599 
o
->
pmrCh™
->
b
.
tunög
=0;

4600 
›ti⁄_vîbo£
 = 
ﬁdvîbo£
;

4602 
	}
}

4605 
	$tu√_rxvoi˚
(
fd
, 
ch™_usbødio_pvt
 *
o
,
ötÊag
)

4607 c⁄° 
èrgë
=7200;

4608 c⁄° 
tﬁî™˚
=360;

4609 c⁄° 
£âögmö
=0.1;

4610 c⁄° 
£âögmax
=5;

4611 c⁄° 
£âög°¨t
=1;

4612 c⁄° 
maxåõs
=12;

4614 
£âög
;

4616 
åõs
=0, 
mós
;

4618 
	`a°_˛i
(
fd
,"INFO: RX VOICE ADJUST START.\n");

4619 
	`a°_˛i
(
fd
,"èrgë=%òtﬁî™˚=%ò\n",
èrgë
,
tﬁî™˚
);

4621 
o
->
pmrCh™
->
b
.
tunög
=1;

4622 if(!
o
->
pmrCh™
->
•sMósuª
)

4623 
	`a°_˛i
(
fd
,"ERROR: NO MEASURE BLOCK.\n");

4625 if(!
o
->
pmrCh™
->
•sMósuª
->
sour˚
 || !o->pmrCh™->
¥xVoi˚Adju°
 )

4626 
	`a°_˛i
(
fd
,"ERROR: NO SOURCE OR MEASURE SETTING.\n");

4628 
o
->
pmrCh™
->
•sMósuª
->
sour˚
=o->pmrCh™->
•sRxOut
->
sök
;

4629 
o
->
pmrCh™
->
•sMósuª
->
íabÀd
=1;

4630 
o
->
pmrCh™
->
•sMósuª
->
discÁ˘‹
=1000;

4632 
£âög
=
£âög°¨t
;

4636 
åõs
<
maxåõs
)

4638 *(
o
->
pmrCh™
->
¥xVoi˚Adju°
)=
£âög
*
M_Q8
;

4639 i‡(
	`h≠py_mswaô
(
fd
,10,
ötÊag
))

4641 
o
->
pmrCh™
->
b
.
tunög
=0;

4644 
o
->
pmrCh™
->
•sMósuª
->
amax
 = o->pmrCh™->•sMósuª->
amö
 = 0;

4645 i‡(
	`h≠py_mswaô
(
fd
,1000,
ötÊag
))

4647 
o
->
pmrCh™
->
b
.
tunög
=0;

4650 
mós
 = 
o
->
pmrCh™
->
•sMósuª
->
≠ók
;

4651 
	`a°_˛i
(
fd
,"åõs=%i, sëtög=%f, mós=%i\n",
åõs
,
£âög
,
mós
);

4653 if–
mós
<(
èrgë
-
tﬁî™˚
Ë|| mós>—¨gë+tﬁî™˚Ë|| 
åõs
<3){

4654 
£âög
=£âög*
èrgë
/
mós
;

4656 if(
åõs
>4 && 
mós
>(
èrgë
-
tﬁî™˚
) && meas<(target+tolerance) )

4660 if(
£âög
<
£âögmö
)setting=settingmin;

4661 if(
£âög
>
£âögmax
)setting=settingmax;

4663 
åõs
++;

4666 
o
->
pmrCh™
->
•sMósuª
->
íabÀd
=0;

4668 
	`a°_˛i
(
fd
,"DONEÅrõs=%i, sëtög=%f, mós=%f\n",
åõs
,
£âög
,()
mós
);

4669 if–
mós
<(
èrgë
-
tﬁî™˚
) || meas>(target+tolerance) ){

4670 
	`a°_˛i
(
fd
,"ERROR: RX VOICE GAIN ADJUST FAILED.\n");

4672 
	`a°_˛i
(
fd
,"INFO: RX VOICE GAIN ADJUST SUCCESS.\n");

4673 
o
->
rxvoi˚adj
=
£âög
;

4675 
o
->
pmrCh™
->
b
.
tunög
=0;

4676 
	}
}

4679 
	$tu√_rx˘css
(
fd
, 
ch™_usbødio_pvt
 *
o
,
ötÊag
)

4681 c⁄° 
èrgë
=2400;

4682 c⁄° 
tﬁî™˚
=100;

4683 c⁄° 
£âögmö
=0.1;

4684 c⁄° 
£âögmax
=8;

4685 c⁄° 
£âög°¨t
=1;

4686 c⁄° 
maxåõs
=12;

4688 
£âög
;

4689 
suc˚ss
;

4690 
åõs
=0,
mós
;

4692 
	`a°_˛i
(
fd
,"INFO: RX CTCSS ADJUST START.\n");

4693 
	`a°_˛i
(
fd
,"èrgë=%òtﬁî™˚=%ò\n",
èrgë
,
tﬁî™˚
);

4695 
o
->
pmrCh™
->
b
.
tunög
=1;

4696 
o
->
pmrCh™
->
•sMósuª
->
sour˚
=o->pmrCh™->
¥xCtcssMósuª
;

4697 
o
->
pmrCh™
->
•sMósuª
->
discÁ˘‹
=400;

4698 
o
->
pmrCh™
->
•sMósuª
->
íabÀd
=1;

4700 
£âög
=
£âög°¨t
;

4702 
åõs
<
maxåõs
)

4704 *(
o
->
pmrCh™
->
¥xCtcssAdju°
)=
£âög
*
M_Q8
;

4705 i‡(
	`h≠py_mswaô
(
fd
,10,
ötÊag
))

4707 
o
->
pmrCh™
->
b
.
tunög
=0;

4710 
o
->
pmrCh™
->
•sMósuª
->
amax
 = o->pmrCh™->•sMósuª->
amö
 = 0;

4711 i‡(
	`h≠py_mswaô
(
fd
,500,
ötÊag
))

4713 
o
->
pmrCh™
->
b
.
tunög
=0;

4716 
mós
 = 
o
->
pmrCh™
->
•sMósuª
->
≠ók
;

4717 
	`a°_˛i
(
fd
,"åõs=%i, sëtög=%f, mós=%i\n",
åõs
,
£âög
,
mós
);

4719 if–
mós
<(
èrgë
-
tﬁî™˚
Ë|| mós>—¨gë+tﬁî™˚Ë|| 
åõs
<3){

4720 
£âög
=£âög*
èrgë
/
mós
;

4722 if(
åõs
>4 && 
mós
>(
èrgë
-
tﬁî™˚
) && meas<(target+tolerance) )

4726 if(
£âög
<
£âögmö
)setting=settingmin;

4727 if(
£âög
>
£âögmax
)setting=settingmax;

4729 
åõs
++;

4731 
o
->
pmrCh™
->
•sMósuª
->
íabÀd
=0;

4732 
	`a°_˛i
(
fd
,"DONEÅrõs=%i, sëtög=%f, mós=%.2f\n",
åõs
,
£âög
,()
mós
);

4733 if–
mós
<(
èrgë
-
tﬁî™˚
) || meas>(target+tolerance) ){

4734 
suc˚ss
=0;

4735 
	`a°_˛i
(
fd
,"ERROR: RX CTCSS GAIN ADJUST FAILED.\n");

4737 
suc˚ss
=1;

4738 
	`a°_˛i
(
fd
,"INFO: RX CTCSS GAIN ADJUST SUCCESS.\n");

4739 
o
->
rx˘csßdj
=
£âög
;

4742 if(
o
->
rxcdty≥
==
CD_XPMR_NOISE
){

4743 
n‹mRssi
;

4745 i‡(
	`h≠py_mswaô
(
fd
,200,
ötÊag
))

4747 
o
->
pmrCh™
->
b
.
tunög
=0;

4750 
n‹mRssi
=((32767-
o
->
pmrCh™
->
rxRssi
)*1000/32767);

4752 if(
o
->
rxsquñchadj
>
n‹mRssi
)

4753 
	`a°_˛i
(
fd
,"WARNING: RSSI=%òSQUELCH=%ò™d i†toÿtight. U£ 'ødiÿtu√Ñxsquñch'.\n",
n‹mRssi
,
o
->
rxsquñchadj
);

4755 
	`a°_˛i
(
fd
,"INFO: RX RSSI=%i\n",
n‹mRssi
);

4758 
o
->
pmrCh™
->
b
.
tunög
=0;

4759 
	}
}

4763 
	$tu√_wrôe
(
ch™_usbødio_pvt
 *
o
)

4765 
FILE
 *
Â
;

4766 
‚ame
[200];

4768 
	`¢¥ötf
(
‚ame
,(‚ameË- 1,"/ëc/a°îisk/usbødio_tu√_%s.c⁄f",
o
->
«me
);

4769 
Â
 = 
	`f›í
(
‚ame
,"w");

4771 
	`Ârötf
(
Â
,"[%s]\n",
o
->
«me
);

4773 
	`Ârötf
(
Â
,";Çame=%s\n",
o
->
«me
);

4774 
	`Ârötf
(
Â
,"; devi˚num=%i\n",
o
->
devi˚num
);

4775 
	`a°_muãx_lock
(&
usb_dev_lock
);

4776 
	`Ârötf
(
Â
,"dev°r=%s\n",
o
->
dev°r
);

4777 
	`a°_muãx_u∆ock
(&
usb_dev_lock
);

4778 
	`Ârötf
(
Â
,"rxmixî£t=%i\n",
o
->
rxmixî£t
);

4779 
	`Ârötf
(
Â
,"txmixa£t=%i\n",
o
->
txmixa£t
);

4780 
	`Ârötf
(
Â
,"txmixb£t=%i\n",
o
->
txmixb£t
);

4781 
	`Ârötf
(
Â
,"rxvoi˚adj=%f\n",
o
->
rxvoi˚adj
);

4782 
	`Ârötf
(
Â
,"rx˘csßdj=%f\n",
o
->
rx˘csßdj
);

4783 
	`Ârötf
(
Â
,"tx˘csßdj=%i\n",
o
->
tx˘csßdj
);

4784 
	`Ârötf
(
Â
,"rxsquñchadj=%i\n",
o
->
rxsquñchadj
);

4785 
	`f˛o£
(
Â
);

4787 if(
o
->
w™ãïrom
)

4789 
	`a°_muãx_lock
(&
o
->
ì¥omlock
);

4790 
o
->
ì¥om˘l
)

4792 
	`a°_muãx_u∆ock
(&
o
->
ì¥omlock
);

4793 
	`u¶ìp
(10000);

4794 
	`a°_muãx_lock
(&
o
->
ì¥omlock
);

4796 
o
->
ì¥om
[
EEPROM_RXMIXERSET
] = o->
rxmixî£t
;

4797 
o
->
ì¥om
[
EEPROM_TXMIXASET
] = o->
txmixa£t
;

4798 
o
->
ì¥om
[
EEPROM_TXMIXBSET
] = o->
txmixb£t
;

4799 
	`mem˝y
(&
o
->
ì¥om
[
EEPROM_RXVOICEADJ
],&o->
rxvoi˚adj
,());

4800 
	`mem˝y
(&
o
->
ì¥om
[
EEPROM_RXCTCSSADJ
],&o->
rx˘csßdj
,());

4801 
o
->
ì¥om
[
EEPROM_TXCTCSSADJ
] = o->
tx˘csßdj
;

4802 
o
->
ì¥om
[
EEPROM_RXSQUELCHADJ
] = o->
rxsquñchadj
;

4803 
o
->
ì¥om˘l
 = 2;

4804 
	`a°_muãx_u∆ock
(&
o
->
ì¥omlock
);

4806 
	}
}

4808 
	$mixî_wrôe
(
ch™_usbødio_pvt
 *
o
)

4810 
	`£èmixî
(
o
->
devi˚num
,
MIXER_PARAM_MIC_PLAYBACK_SW
,0,0);

4811 
	`£èmixî
(
o
->
devi˚num
,
MIXER_PARAM_MIC_PLAYBACK_VOL
,0,0);

4812 
	`£èmixî
(
o
->
devi˚num
,
MIXER_PARAM_SPKR_PLAYBACK_SW
,1,0);

4813 
	`£èmixî
(
o
->
devi˚num
,
MIXER_PARAM_SPKR_PLAYBACK_VOL
,

4814 
	`make_•kr_∂ayback_vÆue
(
o
,o->
txmixa£t
),

4815 
	`make_•kr_∂ayback_vÆue
(
o
,o->
txmixb£t
));

4816 
	`£èmixî
(
o
->
devi˚num
,
MIXER_PARAM_MIC_CAPTURE_VOL
,

4817 
o
->
rxmixî£t
 * o->
micmax
 / 1000,0);

4818 
	`£èmixî
(
o
->
devi˚num
,
MIXER_PARAM_MIC_BOOST
,o->
rxboo°£t
,0);

4819 
	`£èmixî
(
o
->
devi˚num
,
MIXER_PARAM_MIC_CAPTURE_SW
,1,0);

4820 
	}
}

4824 
	$mu…_£t
(
ch™_usbødio_pvt
 *
o
)

4827 if(
o
->
pmrCh™
->
•sTxOutA
) {

4828 
o
->
pmrCh™
->
•sTxOutA
->
ouçutGaö
 =

4829 
	`mu…_ˇlc
((
o
->
txmixa£t
 * 152) / 1000);

4831 if(
o
->
pmrCh™
->
•sTxOutB
){

4832 
o
->
pmrCh™
->
•sTxOutB
->
ouçutGaö
 =

4833 
	`mu…_ˇlc
((
o
->
txmixb£t
 * 152) / 1000);

4835 
	}
}

4839 
	$mu…_ˇlc
(
vÆue
)

4841 c⁄° 
mu…x
=
M_Q8
;

4842 
pŸ
,
mu…
;

4844 
pŸ
=(()(
vÆue
/4)*4)+2;

4845 
mu…
 = 
mu…x
-––mu…x * (3-(
vÆue
%4)ËË/ (
pŸ
+2) );

4846 (
mu…
);

4847 
	}
}

4849 
	#pd
(
x
Ë{
	`¥ötf
(#x" = %d\n",x);}

	)

4850 
	#µ
(
x
Ë{
	`¥ötf
(#x" = %p\n",x);}

	)

4851 
	#ps
(
x
Ë{
	`¥ötf
(#x" = %s\n",x);}

	)

4852 
	#pf
(
x
Ë{
	`¥ötf
(#x" = %f\n",x);}

	)

4862 
	$usbhidî
(
ch™_usbødio_pvt
 *
o
, 
›t
)

4864 
buf
[4];

4865 
œ°rx
, 
txtmp
;

4867 if(
›t
)

4869 
usb_devi˚
 *
usb_dev
;

4871 
usb_dev
 = 
	`hid_devi˚_öô
(
o
->
dev°r
);

4872 i‡(
usb_dev
 =
NULL
) {

4873 
	`a°_log
(
LOG_ERROR
,"USB HID deviceÇot found\n");

4876 
o
->
usb_h™dÀ
 = 
	`usb_›í
(
usb_dev
);

4877 i‡(
o
->
usb_h™dÀ
 =
NULL
) {

4878 
	`a°_log
(
LOG_ERROR
,"NotábleÅo open USB device\n");

4881 i‡(
	`usb_˛aim_öãrÁ˚
(
o
->
usb_h™dÀ
,
C108_HID_INTERFACE
) < 0)

4883 i‡(
	`usb_dëach_kî√l_drivî_≈
(
o
->
usb_h™dÀ
,
C108_HID_INTERFACE
) < 0) {

4884 
	`a°_log
(
LOG_ERROR
,"NotábleÅo detachÅhe USB device\n");

4887 i‡(
	`usb_˛aim_öãrÁ˚
(
o
->
usb_h™dÀ
,
C108_HID_INTERFACE
) < 0) {

4888 
	`a°_log
(
LOG_ERROR
,"NotábleÅo claimÅhe USB device\n");

4893 
	`mem£t
(
buf
,0,(buf));

4894 
buf
[2] = 
o
->
hid_gpio_˘l
;

4895 
buf
[1] = 0;

4896 
	`hid_£t_ouçuts
(
o
->
usb_h™dÀ
,
buf
);

4897 
	`mem˝y
(
bufßve
,
buf
,(buf));

4899 
buf
[
o
->
hid_gpio_˘l_loc
] = o->
hid_gpio_˘l
;

4900 
o
->
œ°tx
=0;

4904 
txtmp
=
o
->
pmrCh™
->
txPâOut
;

4906 i‡(
o
->
œ°tx
 !
txtmp
)

4908 
o
->
pmrCh™
->
txPâHid
=o->
œ°tx
 = 
txtmp
;

4909 if(
o
->
debugÀvñ
)
	`¥ötf
("usbhid:Åx sëÅÿ%d\n",
txtmp
);

4910 
o
->
hid_gpio_vÆ
 &~o->
hid_io_±t
;

4911 i‡(!
o
->
övîçâ
)

4913 i‡(
txtmp
Ë
o
->
hid_gpio_vÆ
 |o->
hid_io_±t
;

4917 i‡(!
txtmp
Ë
o
->
hid_gpio_vÆ
 |o->
hid_io_±t
;

4919 
buf
[
o
->
hid_gpio_loc
] = o->
hid_gpio_vÆ
;

4920 
buf
[
o
->
hid_gpio_˘l_loc
] = o->
hid_gpio_˘l
;

4921 
	`hid_£t_ouçuts
(
o
->
usb_h™dÀ
,
buf
);

4925 
	}
}

4929 
	$pmrdump
(
ch™_usbødio_pvt
 *
o
)

4931 
t_pmr_ch™
 *
p
;

4932 
i
;

4934 
p
=
o
->
pmrCh™
;

4936 
	`¥ötf
("\nodump()\n");

4938 
	`pd
(
o
->
devi˚num
);

4939 
	`a°_muãx_lock
(&
usb_dev_lock
);

4940 
	`ps
(
o
->
dev°r
);

4941 
	`a°_muãx_u∆ock
(&
usb_dev_lock
);

4943 
	`pd
(
o
->
micmax
);

4944 
	`pd
(
o
->
•krmax
);

4946 
	`pd
(
o
->
rxdemod
);

4947 
	`pd
(
o
->
rxcdty≥
);

4948 
	`pd
(
o
->
rxsdty≥
);

4949 
	`pd
(
o
->
txto˘y≥
);

4951 
	`pd
(
o
->
rxmixî£t
);

4952 
	`pd
(
o
->
rxboo°£t
);

4953 
	`pd
(
o
->
txboo°£t
);

4955 
	`pf
(
o
->
rxvoi˚adj
);

4956 
	`pf
(
o
->
rx˘csßdj
);

4957 
	`pd
(
o
->
rxsquñchadj
);

4959 
	`ps
(
o
->
tx˘cssdeÁu…
);

4960 
	`ps
(
o
->
tx˘css‰eq
);

4962 
	`pd
(
o
->
numrx˘css‰eqs
);

4963 if(
o
->
numrx˘css‰eqs
>0)

4965 
i
=0;i<
o
->
numrx˘css‰eqs
;i++)

4967 
	`¥ötf
(" %ò %† %s\n",
i
,
o
->
rx˘css
[i],o->
tx˘css
[i]);

4971 
	`pd
(
o
->
b
.
rxpﬁ¨ôy
);

4972 
	`pd
(
o
->
b
.
txpﬁ¨ôy
);

4974 
	`pd
(
o
->
txlim⁄ly
);

4975 
	`pd
(
o
->
tx¥ñim
);

4976 
	`pd
(
o
->
txmixa
);

4977 
	`pd
(
o
->
txmixb
);

4979 
	`pd
(
o
->
txmixa£t
);

4980 
	`pd
(
o
->
txmixb£t
);

4982 
	`¥ötf
("\npmrdump()\n");

4984 
	`pd
(
p
->
devi˚num
);

4986 
	`¥ötf
("¥xSquñchAdju°=%i\n",*(
o
->
pmrCh™
->
¥xSquñchAdju°
));

4988 
	`pd
(
p
->
rxC¨rõrPoöt
);

4989 
	`pd
(
p
->
rxC¨rõrHy°
);

4991 
	`pd
(*
p
->
¥xVoi˚Adju°
);

4992 
	`pd
(*
p
->
¥xCtcssAdju°
);

4994 
	`pd
(
p
->
rx‰eq
);

4995 
	`pd
(
p
->
tx‰eq
);

4997 
	`pd
(
p
->
rxCtcss
->
ªœx
);

4999 
	`pd
(
p
->
numrxcodes
);

5000 if(
o
->
pmrCh™
->
numrxcodes
>0)

5002 
i
=0;i<
o
->
pmrCh™
->
numrxcodes
;i++)

5004 
	`¥ötf
(" %ò%s\n",
i
,
o
->
pmrCh™
->
pRxCode
[i]);

5008 
	`pd
(
p
->
txTocTy≥
);

5009 
	`ps
(
p
->
pTxCodeDeÁu…
);

5010 
	`pd
(
p
->
txcodedeÁu…smode
);

5011 
	`pd
(
p
->
numtxcodes
);

5012 if(
o
->
pmrCh™
->
numtxcodes
>0)

5014 
i
=0;i<
o
->
pmrCh™
->
numtxcodes
;i++)

5016 
	`¥ötf
(" %ò%s\n",
i
,
o
->
pmrCh™
->
pTxCode
[i]);

5020 
	`pd
(
p
->
b
.
rxpﬁ¨ôy
);

5021 
	`pd
(
p
->
b
.
txpﬁ¨ôy
);

5022 
	`pd
(
p
->
b
.
dc§xpﬁ¨ôy
);

5023 
	`pd
(
p
->
b
.
dc°xpﬁ¨ôy
);

5024 
	`pd
(
p
->
b
.
lsdrxpﬁ¨ôy
);

5025 
	`pd
(
p
->
b
.
lsdtxpﬁ¨ôy
);

5027 
	`pd
(
p
->
txMixA
);

5028 
	`pd
(
p
->
txMixB
);

5030 
	`pd
(
p
->
rxDeEmpE«bÀ
);

5031 
	`pd
(
p
->
rxCíãrSli˚rE«bÀ
);

5032 
	`pd
(
p
->
rxCtcssDecodeE«bÀ
);

5033 
	`pd
(
p
->
rxDcsDecodeE«bÀ
);

5034 
	`pd
(
p
->
b
.
˘cssRxE«bÀ
);

5035 
	`pd
(
p
->
b
.
dcsRxE«bÀ
);

5036 
	`pd
(
p
->
b
.
lmrRxE«bÀ
);

5037 
	`pd
(
p
->
b
.
d°RxE«bÀ
);

5038 
	`pd
(
p
->
smode
);

5040 
	`pd
(
p
->
txHpfE«bÀ
);

5041 
	`pd
(
p
->
txLimôîE«bÀ
);

5042 
	`pd
(
p
->
txPªEmpE«bÀ
);

5043 
	`pd
(
p
->
txLpfE«bÀ
);

5045 if(
p
->
•sTxOutA
)
	`pd
’->•sTxOutA->
ouçutGaö
);

5046 if(
p
->
•sTxOutB
)
	`pd
’->•sTxOutB->
ouçutGaö
);

5047 
	`pd
(
p
->
txPâIn
);

5048 
	`pd
(
p
->
txPâOut
);

5050 
	`pd
(
p
->
åa˚ty≥
);

5051 
	`pd
(
p
->
b
.
ødiﬂ˘ive
);

5052 
	`pd
(
p
->
b
.
txboo°
);

5053 
	`pd
(
p
->
b
.
txCtcssOff
);

5056 
	}
}

5061 
	$xpmr_c⁄fig
(
ch™_usbødio_pvt
 *
o
)

5065 
	`TRACEO
(1,("xpmr_config()\n"));

5067 if(
o
->
pmrCh™
==
NULL
)

5069 
	`a°_log
(
LOG_ERROR
,"pmr channel structure NULL\n");

5073 
o
->
pmrCh™
->
rxCtcss
->
ªœx
 = o->
rx˘cs§ñax
;

5074 
o
->
pmrCh™
->
txpowî
=0;

5076 if(
o
->
b
.
ªmŸed
)

5078 
o
->
pmrCh™
->
pTxCodeDeÁu…
 = o->
£t_tx˘cssdeÁu…
;

5079 
o
->
pmrCh™
->
pRxCodeSrc
=o->
£t_rx˘css‰eqs
;

5080 
o
->
pmrCh™
->
pTxCodeSrc
=o->
£t_tx˘css‰eqs
;

5082 
o
->
pmrCh™
->
rx‰eq
=o->
£t_rx‰eq
;

5083 
o
->
pmrCh™
->
tx‰eq
=o->
£t_tx‰eq
;

5091 
o
->
pmrCh™
->
pTxCodeDeÁu…
 = o->
tx˘cssdeÁu…
;

5092 
o
->
pmrCh™
->
pRxCodeSrc
 = o->
rx˘css‰eqs
;

5093 
o
->
pmrCh™
->
pTxCodeSrc
 = o->
tx˘css‰eqs
;

5095 
o
->
pmrCh™
->
rx‰eq
 = o->rxfreq;

5096 
o
->
pmrCh™
->
tx‰eq
 = o->txfreq;

5099 if(
o
->
b
.
f‹˚txcode
)

5101 
o
->
pmrCh™
->
pTxCodeDeÁu…
 = o->
£t_tx˘css‰eq
;

5102 if(
o
->
debugÀvñ
)
	`a°_vîbo£
("ch™_usbødiÿdev=%†F‹˚d Tx Squñch Codêcode=%s\n",o->
«me
,o->
pmrCh™
->
pTxCodeDeÁu…
);

5105 
	`code_°rög_∑r£
(
o
->
pmrCh™
);

5106 if(
o
->
pmrCh™
->
rx‰eq
Ëo->pmrCh™->
b
.
ª¥og
=1;

5109 
	}
}

5113 
ch™_usbødio_pvt
 *
	$°‹e_c⁄fig
(
a°_c⁄fig
 *
cfg
, *
˘g
, *
ödexp
)

5115 
a°_v¨übÀ
 *
v
;

5116 
ch™_usbødio_pvt
 *
o
;

5117 
a°_c⁄fig
 *
cfg1
;

5118 
‚ame
[200],
buf
[100];

5119 
i
;

5120 #ifdef 
NEW_ASTERISK


5121 
a°_Êags
 
zîoÊag
 = {0};

5123 i‡(
˘g
 =
NULL
) {

5124 
	`åa˚usb1
((" store_config() ctg == NULL\n"));

5125 
o
 = &
usbødio_deÁu…
;

5126 
˘g
 = "general";

5129 i‡(
	`°rcmp
(
˘g
, "general") == 0) {

5130 
o
 = &
usbødio_deÁu…
;

5133 i‡(!(
o
 = 
	`a°_ˇŒoc
(1, (*o))))

5134  
NULL
;

5135 *
o
 = 
usbødio_deÁu…
;

5136 
o
->
«me
 = 
	`a°_°rdup
(
˘g
);

5137 
o
->
ödex
 = (*
ödexp
)++;

5138 i‡(!
usbødio_a˘ive
)

5139 
usbødio_a˘ive
 = 
o
->
«me
;

5142 
	`a°_muãx_öô
(&
o
->
ì¥omlock
);

5143 
	`°r˝y
(
o
->
mohöãΩªt
, "default");

5145 
v
 = 
	`a°_v¨übÀ_brow£
(
cfg
, 
˘g
); v; v = v->
√xt
) {

5146 
	`M_START
((*)
v
->
«me
, (*)v->
vÆue
);

5149 i‡(!
	`a°_jb_ªad_c⁄f
(&
globÆ_jbc⁄f
, 
v
->
«me
, v->
vÆue
))

5153 
	`M_BOOL
("autﬂnswî", 
o
->
autﬂnswî
)

5154 
	`M_BOOL
("autoh™gup", 
o
->
autoh™gup
)

5155 
	`M_BOOL
("ovîridec⁄ãxt", 
o
->
ovîridec⁄ãxt
)

5156 
	`M_STR
("c⁄ãxt", 
o
->
˘x
)

5157 
	`M_STR
("œnguage", 
o
->
œnguage
)

5158 
	`M_STR
("mohöãΩªt", 
o
->
mohöãΩªt
)

5159 
	`M_STR
("exãnsi⁄", 
o
->
ext
)

5160 
	`M_F
("ˇŒîid", 
	`°‹e_ˇŒîid
(
o
, 
v
->
vÆue
))

5162 
	`M_UINT
("‰ags", 
o
->
‰ags
)

5163 
	`M_UINT
("queuesize",
o
->
queuesize
)

5165 
	`M_UINT
("devi˚num",
o
->
devi˚num
)

5167 
	`M_UINT
("debug", 
usbødio_debug
)

5168 
	`M_BOOL
("rx˝ußvî",
o
->
rx˝ußvî
)

5169 
	`M_BOOL
("tx˝ußvî",
o
->
tx˝ußvî
)

5170 
	`M_BOOL
("övîçâ",
o
->
övîçâ
)

5171 
	`M_F
("rxdemod",
	`°‹e_rxdemod
(
o
,(*)
v
->
vÆue
))

5172 
	`M_BOOL
("txlim⁄ly",
o
->
txlim⁄ly
);

5173 
	`M_BOOL
("tx¥ñim",
o
->
tx¥ñim
);

5174 
	`M_F
("txmixa",
	`°‹e_txmixa
(
o
,(*)
v
->
vÆue
))

5175 
	`M_F
("txmixb",
	`°‹e_txmixb
(
o
,(*)
v
->
vÆue
))

5176 
	`M_F
("ˇºõr‰om",
	`°‹e_rxcdty≥
(
o
,(*)
v
->
vÆue
))

5177 
	`M_F
("˘css‰om",
	`°‹e_rxsdty≥
(
o
,(*)
v
->
vÆue
))

5178 
	`M_UINT
("rxsqvox",
o
->
rxsqvoxadj
)

5179 
	`M_UINT
("rxsqhy°",
o
->
rxsqhy°
)

5180 
	`M_UINT
("rxnoi£fûty≥",
o
->
rxnoi£fûty≥
)

5181 
	`M_UINT
("rxsquñchdñay",
o
->
rxsquñchdñay
)

5182 
	`M_STR
("tx˘cssdeÁu…",
o
->
tx˘cssdeÁu…
)

5183 
	`M_STR
("rx˘css‰eqs",
o
->
rx˘css‰eqs
)

5184 
	`M_STR
("tx˘css‰eqs",
o
->
tx˘css‰eqs
)

5185 
	`M_BOOL
("rx˘cssovîride",
o
->
rx˘cssovîride
);

5186 
	`M_UINT
("rx‰eq",
o
->
rx‰eq
)

5187 
	`M_UINT
("tx‰eq",
o
->
tx‰eq
)

5188 
	`M_F
("rxgaö",
	`°‹e_rxgaö
(
o
,(*)
v
->
vÆue
))

5189 
	`M_BOOL
("rxboo°",
o
->
rxboo°£t
)

5190 
	`M_BOOL
("txboo°",
o
->
txboo°£t
)

5191 
	`M_UINT
("rx˘cs§ñax",
o
->
rx˘cs§ñax
)

5192 
	`M_F
("txto˘y≥",
	`°‹e_txto˘y≥
(
o
,(*)
v
->
vÆue
))

5193 
	`M_UINT
("hdwty≥",
o
->
hdwty≥
)

5194 
	`M_UINT
("ì¥om",
o
->
w™ãïrom
)

5195 
	`M_UINT
("du∂ex",
o
->
ødiodu∂ex
)

5196 
	`M_UINT
("tx£âÀtime",
o
->
tx£âÀtime
)

5197 
	`M_UINT
("txrxbœnkögtime",
o
->
txrxbœnkögtime
)

5198 
	`M_BOOL
("rxpﬁ¨ôy",
o
->
b
.
rxpﬁ¨ôy
)

5199 
	`M_BOOL
("txpﬁ¨ôy",
o
->
b
.
txpﬁ¨ôy
)

5200 
	`M_BOOL
("dc§xpﬁ¨ôy",
o
->
b
.
dc§xpﬁ¨ôy
)

5201 
	`M_BOOL
("dc°xpﬁ¨ôy",
o
->
b
.
dc°xpﬁ¨ôy
)

5202 
	`M_BOOL
("lsdrxpﬁ¨ôy",
o
->
b
.
lsdrxpﬁ¨ôy
)

5203 
	`M_BOOL
("lsdtxpﬁ¨ôy",
o
->
b
.
lsdtxpﬁ¨ôy
)

5204 
	`M_BOOL
("lo›back",
o
->
b
.
lo›back
)

5205 
	`M_BOOL
("ødiﬂ˘ive",
o
->
b
.
ødiﬂ˘ive
)

5206 
	`M_UINT
("Ωäum",
o
->
Ωäum
)

5207 
	`M_UINT
("idÀöãrvÆ",
o
->
idÀöãrvÆ
)

5208 
	`M_UINT
("tu∫offs",
o
->
tu∫offs
)

5209 
	`M_UINT
("åa˚ty≥",
o
->
åa˚ty≥
)

5210 
	`M_UINT
("åa˚Àvñ",
o
->
åa˚Àvñ
)

5211 
	`M_UINT
("rx⁄dñay",
o
->
rx⁄dñay
);

5212 
	`M_UINT
("¨ó",
o
->
¨ó
)

5213 
	`M_STR
("ukey",
o
->
ukey
)

5214 
	`M_END
(;

5216 
i
 = 0; i < 32; i++)

5218 
	`•rötf
(
buf
,"gpio%d",
i
 + 1);

5219 i‡(!
	`°rcmp
(
v
->
«me
,
buf
)Ë
o
->
gpios
[
i
] = 
	`°rdup
(v->
vÆue
);

5221 
i
 = 2; i <= 15; i++)

5223 i‡(!((1 << 
i
Ë& 
PP_MASK
)) ;

5224 
	`•rötf
(
buf
,"µ%d",
i
);

5225 i‡(!
	`°rcmp
(
v
->
«me
,
buf
)) {

5226 
o
->
µs
[
i
] = 
	`°rdup
(
v
->
vÆue
);

5227 
ha•p
 = 1;

5232 
o
->
debugÀvñ
=0;

5234 i‡(
o
->
rxsdty≥
 !
SD_XPMR
)

5236 
o
->
rx˘css‰eqs
[0] = 0;

5239 i‡((
o
->
txmixa
 =
TX_OUT_COMPOSITE
Ë&& (o->
txmixb
 =
TX_OUT_VOICE
))

5241 
	`a°_log
(
LOG_WARNING
,"Invalid Configuration: CanÇot have B channel be Voice with A channel being Composite!!\n");

5243 i‡((
o
->
txmixb
 =
TX_OUT_COMPOSITE
Ë&& (o->
txmixa
 =
TX_OUT_VOICE
))

5245 
	`a°_log
(
LOG_WARNING
,"Invalid Configuration: CanÇot have A channel be Voice with B channel being Composite!!\n");

5248 i‡(
o
 =&
usbødio_deÁu…
)

5249  
NULL
;

5251 
i
 = 2; i <= 9; i++)

5254 i‡(!
o
->
µs
[
i
]) ;

5256 i‡(
	`°∫ˇ£cmp
(
o
->
µs
[
i
],"out",3)) ;

5258 i‡(!
	`°rˇ£cmp
(
o
->
µs
[
i
],"out1")Ë
µ_vÆ
 |= (1 << (i - 2));

5259 
hasout
 = 1;

5262 
	`¢¥ötf
(
‚ame
,(‚ameË- 1,
c⁄fig1
,
o
->
«me
);

5263 #ifdef 
NEW_ASTERISK


5264 
cfg1
 = 
	`a°_c⁄fig_lﬂd
(
‚ame
,
zîoÊag
);

5266 
cfg1
 = 
	`a°_c⁄fig_lﬂd
(
‚ame
);

5268 
o
->
rxmixî£t
 = 500;

5269 
o
->
txmixa£t
 = 500;

5270 
o
->
txmixb£t
 = 500;

5271 
o
->
rxvoi˚adj
 = 0.5;

5272 
o
->
rx˘csßdj
 = 0.5;

5273 
o
->
tx˘csßdj
 = 200;

5274 
o
->
rxsquñchadj
 = 725;

5275 
o
->
dev°r
[0] = 0;

5276 i‡(
cfg1
) {

5277 
v
 = 
	`a°_v¨übÀ_brow£
(
cfg1
, 
o
->
«me
); v; v = v->
√xt
) {

5279 
	`M_START
((*)
v
->
«me
, (*)v->
vÆue
);

5280 
	`M_UINT
("rxmixî£t", 
o
->
rxmixî£t
)

5281 
	`M_UINT
("txmixa£t", 
o
->
txmixa£t
)

5282 
	`M_UINT
("txmixb£t", 
o
->
txmixb£t
)

5283 
	`M_F
("rxvoi˚adj",
	`°‹e_rxvoi˚adj
(
o
,(*)
v
->
vÆue
))

5284 
	`M_F
("rx˘csßdj",
	`°‹e_rx˘csßdj
(
o
,(*)
v
->
vÆue
))

5285 
	`M_UINT
("tx˘csßdj",
o
->
tx˘csßdj
);

5286 
	`M_UINT
("rxsquñchadj", 
o
->
rxsquñchadj
)

5287 
	`M_STR
("dev°r", 
o
->
dev°r
)

5288 
	`M_END
(;

5291 
	`a°_c⁄fig_de°roy
(
cfg1
);

5292 } 
	`a°_log
(
LOG_WARNING
,"Fûê%†nŸ found, usög deÁu…Ö¨amëîs.\n",
‚ame
);

5294 if(
o
->
w™ãïrom
)

5296 
	`a°_muãx_lock
(&
o
->
ì¥omlock
);

5297 
o
->
ì¥om˘l
)

5299 
	`a°_muãx_u∆ock
(&
o
->
ì¥omlock
);

5300 
	`u¶ìp
(10000);

5301 
	`a°_muãx_lock
(&
o
->
ì¥omlock
);

5303 
o
->
ì¥om˘l
 = 1;

5304 
	`a°_muãx_u∆ock
(&
o
->
ì¥omlock
);

5306 
o
->
œ°›í
 = 
	`a°_tvnow
();

5307 
o
->
d•
 = 
	`a°_d•_√w
();

5308 i‡(
o
->
d•
)

5310 #ifde‡ 
NEW_ASTERISK


5311 
	`a°_d•_£t_„©uªs
(
o
->
d•
,
DSP_FEATURE_DIGIT_DETECT
);

5312 
	`a°_d•_£t_digômode
(
o
->
d•
,
DSP_DIGITMODE_DTMF
 | 
DSP_DIGITMODE_MUTECONF
 | 
DSP_DIGITMODE_RELAXDTMF
);

5314 
	`a°_d•_£t_„©uªs
(
o
->
d•
,
DSP_FEATURE_DTMF_DETECT
);

5315 
	`a°_d•_digômode
(
o
->
d•
,
DSP_DIGITMODE_DTMF
 | 
DSP_DIGITMODE_MUTECONF
 | 
DSP_DIGITMODE_RELAXDTMF
);

5318 if(
o
->
rxsqhy°
==0)

5319 
o
->
rxsqhy°
=3000;

5321 if(
o
->
rxsquñchdñay
>
RXSQDELAYBUFSIZE
/8-1)

5323 
	`a°_log
(
LOG_WARNING
,"rxsquelchdelay of %i is > maximum of %i. SetÅo maximum.\n",

5324 
o
->
rxsquñchdñay
,
RXSQDELAYBUFSIZE
/8-1);

5325 
o
->
rxsquñchdñay
=
RXSQDELAYBUFSIZE
/8-1;

5327 if(
o
->
pmrCh™
==
NULL
)

5329 
t_pmr_ch™
 
tCh™
;

5332 
	`mem£t
(&
tCh™
,0,(
t_pmr_ch™
));

5334 
tCh™
.
pTxCodeDeÁu…
 = 
o
->
tx˘cssdeÁu…
;

5335 
tCh™
.
pRxCodeSrc
 = 
o
->
rx˘css‰eqs
;

5336 
tCh™
.
pTxCodeSrc
 = 
o
->
tx˘css‰eqs
;

5338 
tCh™
.
rxDemod
=
o
->
rxdemod
;

5339 
tCh™
.
rxCdTy≥
=
o
->
rxcdty≥
;

5340 
tCh™
.
rxC¨rõrHy°
=
o
->
rxsqhy°
;

5341 
tCh™
.
rxSqVoxAdj
=
o
->
rxsqvoxadj
;

5342 
tCh™
.
rxSquñchDñay
=
o
->
rxsquñchdñay
;

5344 i‡(
o
->
txlim⁄ly
)

5345 
tCh™
.
txMod
 = 1;

5346 i‡(
o
->
tx¥ñim
)

5347 
tCh™
.
txMod
 = 2;

5349 
tCh™
.
txMixA
 = 
o
->
txmixa
;

5350 
tCh™
.
txMixB
 = 
o
->
txmixb
;

5352 
tCh™
.
rxCpuSavî
=
o
->
rx˝ußvî
;

5353 
tCh™
.
txCpuSavî
=
o
->
tx˝ußvî
;

5355 
tCh™
.
b
.
rxpﬁ¨ôy
=
o
->b.rxpolarity;

5356 
tCh™
.
b
.
txpﬁ¨ôy
=
o
->b.txpolarity;

5358 
tCh™
.
b
.
dc§xpﬁ¨ôy
=
o
->b.dcsrxpolarity;

5359 
tCh™
.
b
.
dc°xpﬁ¨ôy
=
o
->b.dcstxpolarity;

5361 
tCh™
.
b
.
lsdrxpﬁ¨ôy
=
o
->b.lsdrxpolarity;

5362 
tCh™
.
b
.
lsdtxpﬁ¨ôy
=
o
->b.lsdtxpolarity;

5364 
tCh™
.
b
.
txboo°
=
o
->
txboo°£t
;

5365 
tCh™
.
åa˚ty≥
=
o
->tracetype;

5366 
tCh™
.
åa˚Àvñ
=
o
->tracelevel;

5368 
tCh™
.
Ωäum
=
o
->rptnum;

5369 
tCh™
.
idÀöãrvÆ
=
o
->idleinterval;

5370 
tCh™
.
tu∫offs
=
o
->turnoffs;

5371 
tCh™
.
¨ó
=
o
->area;

5372 
tCh™
.
ukey
=
o
->ukey;

5373 
tCh™
.
«me
=
o
->name;

5375 
o
->
pmrCh™
=
	`¸óãPmrCh™√l
(&
tCh™
,
FRAME_SIZE
);

5377 
o
->
pmrCh™
->
ødioDu∂ex
=o->
ødiodu∂ex
;

5378 
o
->
pmrCh™
->
b
.
lo›back
=0;

5379 
o
->
pmrCh™
->
b
.
ødiﬂ˘ive
=o->b.radioactive;

5380 
o
->
pmrCh™
->
tx£âÀtime
=o->txsettletime;

5381 
o
->
pmrCh™
->
txrxbœnkögtime
=o->txrxblankingtime;

5382 
o
->
pmrCh™
->
rxCpuSavî
=o->
rx˝ußvî
;

5383 
o
->
pmrCh™
->
txCpuSavî
=o->
tx˝ußvî
;

5385 *(
o
->
pmrCh™
->
¥xSquñchAdju°
) =

5386 ((999 - 
o
->
rxsquñchadj
) * 32767) / 1000;

5388 *(
o
->
pmrCh™
->
¥xVoi˚Adju°
)=o->
rxvoi˚adj
*
M_Q8
;

5389 *(
o
->
pmrCh™
->
¥xCtcssAdju°
)=o->
rx˘csßdj
*
M_Q8
;

5390 
o
->
pmrCh™
->
rxCtcss
->
ªœx
=o->
rx˘cs§ñax
;

5391 
o
->
pmrCh™
->
txTocTy≥
 = o->
txto˘y≥
;

5394 i‡–(
o
->
txmixa
 =
TX_OUT_LSD
) ||

5395 (
o
->
txmixa
 =
TX_OUT_COMPOSITE
) ||

5396 (
o
->
txmixb
 =
TX_OUT_LSD
) ||

5397 (
o
->
txmixb
 =
TX_OUT_COMPOSITE
))

5399 
	`£t_tx˘css_Àvñ
(
o
);

5402 if–(
o
->
txmixa
!=
TX_OUT_VOICE
Ë&& (o->
txmixb
!=TX_OUT_VOICE) &&

5403 (
o
->
txmixa
!=
TX_OUT_COMPOSITE
Ë&& (o->
txmixb
!=TX_OUT_COMPOSITE)

5406 
	`a°_log
(
LOG_ERROR
,"NoÅxvoice output configured.\n");

5409 if–
o
->
tx˘css‰eq
[0] &&

5410 
o
->
txmixa
!=
TX_OUT_LSD
 && o->txmixa!=
TX_OUT_COMPOSITE
 &&

5411 
o
->
txmixb
!=
TX_OUT_LSD
 && o->txmixb!=
TX_OUT_COMPOSITE


5414 
	`a°_log
(
LOG_ERROR
,"NoÅxtone output configured.\n");

5417 if(
o
->
b
.
ødiﬂ˘ive
)

5419 
ch™_usbødio_pvt
 *
ao
;

5420 
ao
 = 
usbødio_deÁu…
.
√xt
;áÿ&&áo->
«me
 ;áÿao->√xtÔo->
pmrCh™
->
b
.
ødiﬂ˘ive
=0;

5421 
usbødio_a˘ive
 = 
o
->
«me
;

5422 
o
->
pmrCh™
->
b
.
ødiﬂ˘ive
=1;

5423 
	`a°_log
(
LOG_NOTICE
,"ødiÿa˘ivê£àtÿ[%s]\n",
o
->
«me
);

5428 
	`xpmr_c⁄fig
(
o
);

5430 
	`TRACEO
(1,("store_config() 120\n"));

5431 
	`mixî_wrôe
(
o
);

5432 
	`TRACEO
(1,("store_config() 130\n"));

5433 
	`mu…_£t
(
o
);

5435 
	`TRACEO
(1,("store_config() 140\n"));

5436 
	`hidhdwc⁄fig
(
o
);

5438 
	`TRACEO
(1,("store_config() 200\n"));

5440 #i‚def 
NEW_ASTERISK


5441 i‡(
	`pùe
(
o
->
¢dcmd
) != 0) {

5442 
	`a°_log
(
LOG_ERROR
, "UnableÅo createÖipe\n");

5443 
îr‹
;

5446 
	`a°_±hªad_¸óã_background
(&
o
->
°hªad
, 
NULL
, 
sound_thªad
, o);

5450 i‡(
o
 !&
usbødio_deÁu…
) {

5451 
o
->
√xt
 = 
usbødio_deÁu…
.next;

5452 
usbødio_deÁu…
.
√xt
 = 
o
;

5454 
	`TRACEO
(1,("store_config() complete\n"));

5455  
o
;

5457 
îr‹
:

5458 i‡(
o
 !&
usbødio_deÁu…
)

5459 
	`‰ì
(
o
);

5460  
NULL
;

5461 
	}
}

5464 #if 
DEBUG_FILETEST
 == 1

5468 
	$RxTe°It
(
ch™_usbødio_pvt
 *
o
)

5470 c⁄° 
numSam∂es
 = 
SAMPLES_PER_BLOCK
;

5471 c⁄° 
numCh™√ls
 = 16;

5473 
i16
 
ßm∂e
,
i
,
ii
;

5475 
i32
 
txH™gTime
;

5477 
i16
 
txE«bÀ
;

5479 
t_pmr_ch™
 
tCh™
;

5480 
t_pmr_ch™
 *
pCh™
;

5482 
FILE
 *
hI≈ut
=
NULL
, *
hOuçut
=NULL, *
hOuçutTx
=NULL;

5484 
i16
 
iBuff
[
numSam∂es
*2*6], 
oBuff
[numSamples];

5486 
	`¥ötf
("RxTestIt()\n");

5488 
pCh™
=
o
->
pmrCh™
;

5489 
pCh™
->
b
.
txC≠tuª
=1;

5490 
pCh™
->
b
.
rxC≠tuª
=1;

5492 
txE«bÀ
 = 0;

5494 
hI≈ut
 = 
	`f›í
("/usr/src/xpmr/testdata/rx_in.pcm","r");

5495 if(!
hI≈ut
){

5496 
	`¥ötf
(" RxTestIt() File Not Found.\n");

5499 
hOuçut
 = 
	`f›í
("/usr/src/xpmr/testdata/rx_debug.pcm","w");

5501 
	`¥ötf
(" RxTestIt() Working...\n");

5503 !
	`„of
(
hI≈ut
))

5505 
	`‰ód
((*)
iBuff
,2,
numSam∂es
*2*6,
hI≈ut
);

5507 if(
txH™gTime
ÈxH™gTime-=
numSam∂es
;

5508 if(
txH™gTime
<0)txHangTime=0;

5510 if(
pCh™
->
rxCtcss
->
decode
)
txH™gTime
=(8000/1000*2000);

5512 if(
pCh™
->
rxCtcss
->
decode
 && !
txE«bÀ
)

5514 
txE«bÀ
=1;

5517 if(!
pCh™
->
rxCtcss
->
decode
 && 
txE«bÀ
)

5519 
txE«bÀ
=0;

5522 
	`PmrRx
(
pCh™
,
iBuff
,
oBuff
);

5524 
	`fwrôe
((*)
pCh™
->
¥xDebug
,2,
numSam∂es
*
numCh™√ls
,
hOuçut
);

5526 
pCh™
->
b
.
txC≠tuª
=0;

5527 
pCh™
->
b
.
rxC≠tuª
=0;

5529 if(
hI≈ut
)
	`f˛o£
(hInput);

5530 if(
hOuçut
)
	`f˛o£
(hOutput);

5532 
	`¥ötf
(" RxTestIt() Complete.\n");

5535 
	}
}

5538 #ifdef 
NEW_ASTERISK


5540 *
	$ªs2˛i
(
r
)

5543 
r
)

5545 
RESULT_SUCCESS
:

5546 (
CLI_SUCCESS
);

5547 
RESULT_SHOWUSAGE
:

5548 (
CLI_SHOWUSAGE
);

5550 (
CLI_FAILURE
);

5552 
	}
}

5554 *
	$h™dÀ_c⁄sﬁe_key
(
a°_˛i_íåy
 *
e
,

5555 
cmd
, 
a°_˛i_¨gs
 *
a
)

5557 
cmd
) {

5558 
CLI_INIT
:

5559 
e
->
comm™d
 = "radio key";

5560 
e
->
ußge
 = 
key_ußge
;

5561  
NULL
;

5562 
CLI_GENERATE
:

5563  
NULL
;

5565  
	`ªs2˛i
(
	`c⁄sﬁe_key
(
a
->
fd
,a->
¨gc
,a->
¨gv
));

5566 
	}
}

5568 *
	$h™dÀ_c⁄sﬁe_unkey
(
a°_˛i_íåy
 *
e
,

5569 
cmd
, 
a°_˛i_¨gs
 *
a
)

5571 
cmd
) {

5572 
CLI_INIT
:

5573 
e
->
comm™d
 = "radio unkey";

5574 
e
->
ußge
 = 
unkey_ußge
;

5575  
NULL
;

5576 
CLI_GENERATE
:

5577  
NULL
;

5579  
	`ªs2˛i
(
	`c⁄sﬁe_unkey
(
a
->
fd
,a->
¨gc
,a->
¨gv
));

5580 
	}
}

5582 *
	$h™dÀ_ødio_tu√
(
a°_˛i_íåy
 *
e
,

5583 
cmd
, 
a°_˛i_¨gs
 *
a
)

5585 
cmd
) {

5586 
CLI_INIT
:

5587 
e
->
comm™d
 = "radioÅune";

5588 
e
->
ußge
 = 
ødio_tu√_ußge
;

5589  
NULL
;

5590 
CLI_GENERATE
:

5591  
NULL
;

5593  
	`ªs2˛i
(
	`ødio_tu√
(
a
->
fd
,a->
¨gc
,a->
¨gv
));

5594 
	}
}

5596 *
	$h™dÀ_ødio_debug
(
a°_˛i_íåy
 *
e
,

5597 
cmd
, 
a°_˛i_¨gs
 *
a
)

5599 
cmd
) {

5600 
CLI_INIT
:

5601 
e
->
comm™d
 = "radio debug";

5602 
e
->
ußge
 = 
ødio_tu√_ußge
;

5603  
NULL
;

5604 
CLI_GENERATE
:

5605  
NULL
;

5607  
	`ªs2˛i
(
	`ødio_£t_debug
(
a
->
fd
,a->
¨gc
,a->
¨gv
));

5608 
	}
}

5610 *
	$h™dÀ_ødio_debug_off
(
a°_˛i_íåy
 *
e
,

5611 
cmd
, 
a°_˛i_¨gs
 *
a
)

5613 
cmd
) {

5614 
CLI_INIT
:

5615 
e
->
comm™d
 = "radio debug off";

5616 
e
->
ußge
 = 
ødio_tu√_ußge
;

5617  
NULL
;

5618 
CLI_GENERATE
:

5619  
NULL
;

5621  
	`ªs2˛i
(
	`ødio_£t_debug_off
(
a
->
fd
,a->
¨gc
,a->
¨gv
));

5622 
	}
}

5624 *
	$h™dÀ_ødio_a˘ive
(
a°_˛i_íåy
 *
e
,

5625 
cmd
, 
a°_˛i_¨gs
 *
a
)

5627 
cmd
) {

5628 
CLI_INIT
:

5629 
e
->
comm™d
 = "radioáctive";

5630 
e
->
ußge
 = 
a˘ive_ußge
;

5631  
NULL
;

5632 
CLI_GENERATE
:

5633  
NULL
;

5635  
	`ªs2˛i
(
	`ødio_a˘ive
(
a
->
fd
,a->
¨gc
,a->
¨gv
));

5636 
	}
}

5638 *
	$h™dÀ_£t_xdebug
(
a°_˛i_íåy
 *
e
,

5639 
cmd
, 
a°_˛i_¨gs
 *
a
)

5641 
cmd
) {

5642 
CLI_INIT
:

5643 
e
->
comm™d
 = "radio set xdebug";

5644 
e
->
ußge
 = 
a˘ive_ußge
;

5645  
NULL
;

5646 
CLI_GENERATE
:

5647  
NULL
;

5649  
	`ªs2˛i
(
	`ødio_£t_xpmr_debug
(
a
->
fd
,a->
¨gc
,a->
¨gv
));

5650 
	}
}

5653 
a°_˛i_íåy
 
	g˛i_usbødio
[] = {

5654 
AST_CLI_DEFINE
(
h™dÀ_c⁄sﬁe_key
,"Simulate Rx Signal Present"),

5655 
AST_CLI_DEFINE
(
h™dÀ_c⁄sﬁe_unkey
,"Simulate Rx Signal Loss"),

5656 
AST_CLI_DEFINE
(
h™dÀ_ødio_tu√
,"Radio Tune"),

5657 
AST_CLI_DEFINE
(
h™dÀ_ødio_debug
,"Radio Debug On"),

5658 
AST_CLI_DEFINE
(
h™dÀ_ødio_debug_off
,"Radio Debug Off"),

5659 
AST_CLI_DEFINE
(
h™dÀ_ødio_a˘ive
,"Change commanded device"),

5660 
AST_CLI_DEFINE
(
h™dÀ_£t_xdebug
,"Radio set xpmr debugÜevel")

5665 
	~"xpmr/xpmr.c
"

5666 #ifde‡
HAVE_XPMRX


5667 
	~"xpmrx/xpmrx.c
"

5672 
	$lﬂd_moduÀ
()

5674 
a°_c⁄fig
 *
cfg
 = 
NULL
;

5675 *
˘g
 = 
NULL
,*
vÆ
;

5676 
n
;

5677 #ifdef 
NEW_ASTERISK


5678 
a°_Êags
 
zîoÊag
 = {0};

5681 i‡(
	`hid_devi˚_mkli°
()) {

5682 
	`a°_log
(
LOG_NOTICE
, "UnableÅo make hidÜist\n");

5683  
AST_MODULE_LOAD_DECLINE
;

5686 
	`usb_li°_check
("");

5688 
usbødio_a˘ive
 = 
NULL
;

5691 
	`mem˝y
(&
globÆ_jbc⁄f
, &
deÁu…_jbc⁄f
, (
a°_jb_c⁄f
));

5694 #ifdef 
NEW_ASTERISK


5695 i‡(!(
cfg
 = 
	`a°_c⁄fig_lﬂd
(
c⁄fig
,
zîoÊag
))) {

5697 i‡(!(
cfg
 = 
	`a°_c⁄fig_lﬂd
(
c⁄fig
))) {

5699 
	`a°_log
(
LOG_NOTICE
, "U«bÀÅÿlﬂd c⁄fig %s\n", 
c⁄fig
);

5700  
AST_MODULE_LOAD_DECLINE
;

5703 
µ_vÆ
 = 0;

5704 
hasout
 = 0;

5706 
n
 = 0;

5708 
	`°‹e_c⁄fig
(
cfg
, 
˘g
, &
n
);

5709 }  (
˘g
 = 
	`a°_ˇãg‹y_brow£
(
cfg
, ctg)Ë!
NULL
);

5711 
µfd
 = -1;

5712 
pba£
 = 0;

5713 
vÆ
 = (*Ë
	`a°_v¨übÀ_ªåõve
(
cfg
, "general", "pport");

5714 i‡(
vÆ
Ë
	`a°_c›y_°rög
(
µ‹t
,val,(pport) - 1);

5715 
	`°r˝y
(
µ‹t
,
PP_PORT
);

5716 
vÆ
 = (*Ë
	`a°_v¨übÀ_ªåõve
(
cfg
, "general", "pbase");

5717 i‡(
vÆ
Ë
pba£
 = 
	`°πoul
(vÆ,
NULL
,0);

5718 i‡(!
pba£
Ëpba£ = 
PP_IOPORT
;

5719 i‡(
ha•p
)

5721 i‡(
µ‹t
[0])

5723 
µfd
 = 
	`›í
(
µ‹t
,
O_RDWR
);

5724 i‡(
µfd
 != -1)

5726 i‡(
	`io˘l
(
µfd
, 
PPCLAIM
))

5728 
	`a°_log
(
LOG_ERROR
,"U«bÀÅÿ˛aimÖröã∏p‹à%s, dißblögÖ∞suµ‹t\n",
µ‹t
);

5729 
	`˛o£
(
µfd
);

5730 
ha•p
 = 0;

5735 i‡(
	`i›îm
(
pba£
,2,1) == -1)

5737 
	`a°_log
(
LOG_ERROR
,"C™àgë iÿ≥rmissi⁄ o¿IOÖ‹à%04x hex, dißblögÖ∞suµ‹t\n",
pba£
);

5738 
ha•p
 = 0;

5740 
ha•p
 = 2;

5741 i‡(
›ti⁄_vîbo£
 > 2Ë
	`a°_vîbo£
(
VERBOSE_PREFIX_3
 "Using direct IOÖort forÖp support, sinceÖarport driverÇotávailable.\n");

5745 i‡(
›ti⁄_vîbo£
 > 2)

5747 i‡(
ha•p
 =1Ë
	`a°_vîbo£
(
VERBOSE_PREFIX_3
 "P¨ÆÀ»p‹ài†%s\n",
µ‹t
);

5748 i‡(
ha•p
 =2Ë
	`a°_vîbo£
(
VERBOSE_PREFIX_3
 "P¨ÆÀ»p‹ài†© %04x hex\n",
pba£
);

5751 
	`a°_c⁄fig_de°roy
(
cfg
);

5753 i‡(
	`föd_desc
(
usbødio_a˘ive
Ë=
NULL
) {

5754 
	`a°_log
(
LOG_NOTICE
, "ødiÿa˘ivêdevi˚ %†nŸ found\n", 
usbødio_a˘ive
);

5757  
AST_MODULE_LOAD_FAILURE
;

5760 i‡(
	`a°_ch™√l_ªgi°î
(&
usbødio_ãch
)) {

5761 
	`a°_log
(
LOG_ERROR
, "UnableÅoÑegister channelÅype 'usb'\n");

5762  
AST_MODULE_LOAD_FAILURE
;

5765 
	`a°_˛i_ªgi°î_mu…ùÀ
(
˛i_usbødio
, (˛i_usbødioË/ (
a°_˛i_íåy
));

5767 i‡(
ha•p
 && 
hasout
Ë
	`a°_±hªad_¸óã_background
(&
pul£rid
, 
NULL
, 
pul£πhªad
, NULL);

5769  
AST_MODULE_LOAD_SUCCESS
;

5770 
	}
}

5773 
	$u∆ﬂd_moduÀ
()

5775 
ch™_usbødio_pvt
 *
o
;

5777 
	`a°_log
(
LOG_WARNING
, "unload_module() called\n");

5779 
°›pul£r
 = 1;

5781 
	`a°_ch™√l_uƒegi°î
(&
usbødio_ãch
);

5782 
	`a°_˛i_uƒegi°î_mu…ùÀ
(
˛i_usbødio
, (˛i_usbødioË/ (
a°_˛i_íåy
));

5784 
o
 = 
usbødio_deÁu…
.
√xt
; o; o = o->next) {

5786 
	`a°_log
(
LOG_WARNING
, "destroyPmrChannel() called\n");

5787 if(
o
->
pmrCh™
)
	`de°royPmrCh™√l
(o->pmrChan);

5789 #i‡
DEBUG_CAPTURES
 == 1

5790 i‡(
‰xˇ¥aw
Ë{ 
	`f˛o£
(‰xˇ¥aw); frxˇ¥aw = 
NULL
; }

5791 i‡(
‰xˇ±ø˚
Ë{ 
	`f˛o£
(‰xˇ±ø˚); frxˇ±ø˚ = 
NULL
; }

5792 i‡(
‰xouåaw
Ë{ 
	`f˛o£
(‰xouåaw); frxouåaw = 
NULL
; }

5793 i‡(
·xˇ¥aw
Ë{ 
	`f˛o£
(·xˇ¥aw); ftxˇ¥aw = 
NULL
; }

5794 i‡(
·xˇ±ø˚
Ë{ 
	`f˛o£
(·xˇ±ø˚); ftxˇ±ø˚ = 
NULL
; }

5795 i‡(
·xouåaw
Ë{ 
	`f˛o£
(·xouåaw); ftxouåaw = 
NULL
; }

5798 
	`˛o£
(
o
->
sounddev
);

5799 #i‚def 
NEW_ASTERISK


5800 i‡(
o
->
¢dcmd
[0] > 0) {

5801 
	`˛o£
(
o
->
¢dcmd
[0]);

5802 
	`˛o£
(
o
->
¢dcmd
[1]);

5805 i‡(
o
->
d•
Ë
	`a°_d•_‰ì
(o->dsp);

5806 i‡(
o
->
ow√r
)

5807 
	`a°_so·h™gup
(
o
->
ow√r
, 
AST_SOFTHANGUP_APPUNLOAD
);

5808 i‡(
o
->
ow√r
)

5814 
	}
}

5816 
AST_MODULE_INFO_STANDARD
(
ASTERISK_GPL_KEY
, "usb Console Channel Driver");

	@/usr/include/alsa/asoundlib.h

28 #i‚de‡
__ASOUNDLIB_H


29 
	#__ASOUNDLIB_H


	)

31 
	~<uni°d.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<f˙é.h
>

36 
	~<as£π.h
>

37 
	~<ídün.h
>

38 
	~<sys/pﬁl.h
>

39 
	~<î∫o.h
>

40 
	~<°d¨g.h
>

42 
	~<Æß/asoundef.h
>

43 
	~<Æß/vîsi⁄.h
>

44 
	~<Æß/globÆ.h
>

45 
	~<Æß/öput.h
>

46 
	~<Æß/ouçut.h
>

47 
	~<Æß/îr‹.h
>

48 
	~<Æß/c⁄f.h
>

49 
	~<Æß/pcm.h
>

50 
	~<Æß/øwmidi.h
>

51 
	~<Æß/timî.h
>

52 
	~<Æß/hwdï.h
>

53 
	~<Æß/c⁄åﬁ.h
>

54 
	~<Æß/mixî.h
>

55 
	~<Æß/£q_evít.h
>

56 
	~<Æß/£q.h
>

57 
	~<Æß/£qmid.h
>

58 
	~<Æß/£q_midi_evít.h
>

	@/usr/include/asterisk.h

18 #i‚de‡
_ASTERISK_H


19 
	#_ASTERISK_H


	)

21 
	~"a°îisk/autoc⁄fig.h
"

23 #i‡!
deföed
(
NO_MALLOC_DEBUG
Ë&& !deföed(
STANDALONE_AEL
Ë&& deföed(
MALLOC_DEBUG
)

24 
	~"a°îisk/a°mm.h
"

27 
	~"a°îisk/com∑t.h
"

29 
	~"a°îisk/∑ths.h
"

31 
	#DEFAULT_LANGUAGE
 "í"

	)

33 
	#DEFAULT_SAMPLE_RATE
 8000

	)

34 
	#DEFAULT_SAMPLES_PER_MS
 ((
DEFAULT_SAMPLE_RATE
)/1000)

	)

35 
	#£çri‹ôy
 
__PLEASE_USE_a°_£t_¥i‹ôy_INSTEAD_OF_£çri‹ôy__


	)

36 
	#sched_£tscheduÀr
 
__PLEASE_USE_a°_£t_¥i‹ôy_INSTEAD_OF_sched_£tscheduÀr__


	)

39 
a°_c⁄fig_AST_CONFIG_DIR
[
PATH_MAX
];

40 
a°_c⁄fig_AST_CONFIG_FILE
[
PATH_MAX
];

41 
a°_c⁄fig_AST_MODULE_DIR
[
PATH_MAX
];

42 
a°_c⁄fig_AST_SPOOL_DIR
[
PATH_MAX
];

43 
a°_c⁄fig_AST_MONITOR_DIR
[
PATH_MAX
];

44 
a°_c⁄fig_AST_VAR_DIR
[
PATH_MAX
];

45 
a°_c⁄fig_AST_DATA_DIR
[
PATH_MAX
];

46 
a°_c⁄fig_AST_LOG_DIR
[
PATH_MAX
];

47 
a°_c⁄fig_AST_AGI_DIR
[
PATH_MAX
];

48 
a°_c⁄fig_AST_DB
[
PATH_MAX
];

49 
a°_c⁄fig_AST_KEY_DIR
[
PATH_MAX
];

50 
a°_c⁄fig_AST_PID
[
PATH_MAX
];

51 
a°_c⁄fig_AST_SOCKET
[
PATH_MAX
];

52 
a°_c⁄fig_AST_RUN_DIR
[
PATH_MAX
];

53 
a°_c⁄fig_AST_CTL_PERMISSIONS
[
PATH_MAX
];

54 
a°_c⁄fig_AST_CTL_OWNER
[
PATH_MAX
];

55 
a°_c⁄fig_AST_CTL_GROUP
[
PATH_MAX
];

56 
a°_c⁄fig_AST_CTL
[
PATH_MAX
];

57 
a°_c⁄fig_AST_SYSTEM_NAME
[20];

59 
a°_£t_¥i‹ôy
();

60 
lﬂd_moduÀs
();

61 
lﬂd_pbx
();

62 
öô_loggî
();

63 
˛o£_loggî
();

64 
ªlﬂd_loggî
();

65 
öô_‰amî
();

66 
a°_ãrm_öô
();

67 
a°db_öô
();

68 
a°_ch™√ls_öô
();

69 
a°_buûtös_öô
();

70 
dnsmgr_öô
();

71 
dnsmgr_°¨t_ª‰esh
();

72 
dnsmgr_ªlﬂd
();

73 
thªad°‹age_öô
();

74 
a°obj2_öô
();

75 
a°_auto£rvi˚_öô
();

78 
	ga°_ch™√l
;

81 
	ga°_moduÀ
;

97 
a°_moduÀ_ªlﬂd
(c⁄° *
«me
);

105 
a°_ªgi°î_©exô
((*
func
)());

111 
	`a°_uƒegi°î_©exô
((*
func
)());

113 #i‡!
	`deföed
(
LOW_MEMORY
)

123 
	`a°_ªgi°î_fûe_vîsi⁄
(c⁄° *
fûe
, c⁄° *
vîsi⁄
);

134 
	`a°_uƒegi°î_fûe_vîsi⁄
(c⁄° *
fûe
);

157 #ifde‡
MTX_PROFILE


158 
	#HAVE_MTX_PROFILE


	)

159 
	#ASTERISK_FILE_VERSION
(
fûe
, 
vîsi⁄
) \

160 
mtx_¥of
 = -1; \

161 
	`__©åibuã__
((
c⁄°ru˘‹
)Ë
	`__ªgi°î_fûe_vîsi⁄
() \

163 
mtx_¥of
 = 
	`a°_add_¥ofûe
("mtx_lock_" 
fûe
, 0); \

164 
	`a°_ªgi°î_fûe_vîsi⁄
(
fûe
, 
vîsi⁄
); \

165 
	}
} \

166 
	`__©åibuã__
((
de°ru˘‹
)Ë
	`__uƒegi°î_fûe_vîsi⁄
() \

168 
	`a°_uƒegi°î_fûe_vîsi⁄
(
fûe
); \

169 }

	)

171 
	#ASTERISK_FILE_VERSION
(
fûe
, 
vîsi⁄
) \

172 
	`__©åibuã__
((
c⁄°ru˘‹
)Ë
	`__ªgi°î_fûe_vîsi⁄
() \

174 
	`a°_ªgi°î_fûe_vîsi⁄
(
fûe
, 
vîsi⁄
); \

176 
	`__©åibuã__
((
de°ru˘‹
)Ë
	`__uƒegi°î_fûe_vîsi⁄
() \

178 
	`a°_uƒegi°î_fûe_vîsi⁄
(
fûe
); \

179 }

	)

182 
	#ASTERISK_FILE_VERSION
(
fûe
, 
x
)

	)

185 #i‡!
deföed
(
LOW_MEMORY
)

201 
a°_add_¥ofûe
(c⁄° *, 
uöt64_t
 
sˇÀ
);

202 
öt64_t
 
a°_¥ofûe
(, int64_t);

203 
öt64_t
 
a°_m¨k
(, 
°¨t1_°›0
);

205 
	#a°_add_¥ofûe
(
a
, 
b
Ë0

	)

206 
	#a°_¥ofûe
(
a
, 
b
Ëdÿ{ } 0)

	)

207 
	#a°_m¨k
(
a
, 
b
Ëdÿ{ } 0)

	)

	@/usr/include/asterisk/abstract_jb.h

30 #i‚de‡
_ABSTRACT_JB_H_


31 
	#_ABSTRACT_JB_H_


	)

33 
	~<°dio.h
>

34 
	~<sys/time.h
>

36 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

40 
a°_ch™√l
;

41 
a°_‰ame
;

45 
AST_JB_ENABLED
 = (1 << 0),

46 
AST_JB_FORCED
 = (1 << 1),

47 
AST_JB_LOG
 = (1 << 2)

50 
	#AST_JB_IMPL_NAME_SIZE
 12

	)

55 
	sa°_jb_c⁄f


58 
Êags
;

60 
max_size
;

62 
ªsync_thªshﬁd
;

64 
im∂
[
AST_JB_IMPL_NAME_SIZE
];

69 
	#AST_JB_CONF_PREFIX
 "jb"

	)

70 
	#AST_JB_CONF_ENABLE
 "íabÀ"

	)

71 
	#AST_JB_CONF_FORCE
 "f‹˚"

	)

72 
	#AST_JB_CONF_MAX_SIZE
 "maxsize"

	)

73 
	#AST_JB_CONF_RESYNCH_THRESHOLD
 "ªsyn˘hªshﬁd"

	)

74 
	#AST_JB_CONF_IMPL
 "im∂"

	)

75 
	#AST_JB_CONF_LOG
 "log"

	)

78 
a°_jb_im∂
;

84 
	sa°_jb


87 
a°_jb_c⁄f
 
c⁄f
;

89 
a°_jb_im∂
 *
im∂
;

91 *
jbobj
;

93 
timevÆ
 
timeba£
;

95 
√xt
;

97 
œ°_f‹m©
;

99 
FILE
 *
logfûe
;

101 
Êags
;

118 
a°_jb_do_u£check
(
a°_ch™√l
 *
c0
, a°_ch™√»*
c1
);

133 
a°_jb_gë_whí_to_wakeup
(
a°_ch™√l
 *
c0
, a°_ch™√»*
c1
, 
time_À·
);

155 
a°_jb_put
(
a°_ch™√l
 *
ch™
, 
a°_‰ame
 *
f
);

168 
a°_jb_gë_™d_dñivî
(
a°_ch™√l
 *
c0
, a°_ch™√»*
c1
);

177 
a°_jb_de°roy
(
a°_ch™√l
 *
ch™
);

194 
a°_jb_ªad_c⁄f
(
a°_jb_c⁄f
 *
c⁄f
, *
v¨«me
, *
vÆue
);

205 
a°_jb_c⁄figuª
(
a°_ch™√l
 *
ch™
, c⁄° 
a°_jb_c⁄f
 *
c⁄f
);

213 
a°_jb_gë_c⁄fig
(c⁄° 
a°_ch™√l
 *
ch™
, 
a°_jb_c⁄f
 *
c⁄f
);

220 
a°_jb_em±y_™d_ª£t
(
a°_ch™√l
 *
c0
, a°_ch™√»*
c1
);

222 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

	@/usr/include/asterisk/callerid.h

43 #i‚de‡
_ASTERISK_CALLERID_H


44 
	#_ASTERISK_CALLERID_H


	)

46 
	#MAX_CALLERID_SIZE
 32000

	)

48 
	#CID_PRIVATE_NAME
 (1 << 0)

	)

49 
	#CID_PRIVATE_NUMBER
 (1 << 1)

	)

50 
	#CID_UNKNOWN_NAME
 (1 << 2)

	)

51 
	#CID_UNKNOWN_NUMBER
 (1 << 3)

	)

53 
	#CID_SIG_BELL
 1

	)

54 
	#CID_SIG_V23
 2

	)

55 
	#CID_SIG_DTMF
 3

	)

56 
	#CID_SIG_V23_JP
 4

	)

57 
	#CID_SIG_SMDI
 5

	)

59 
	#CID_START_RING
 1

	)

60 
	#CID_START_POLARITY
 2

	)

63 
	#AST_LIN2X
(
a
Ë((
codec
 =
AST_FORMAT_ALAW
Ë? (
	`AST_LIN2A
◊)Ë: (
	`AST_LIN2MU
◊)))

	)

64 
	#AST_XLAW
(
a
Ë((
codec
 =
AST_FORMAT_ALAW
Ë? (
	`AST_ALAW
◊)Ë: (
	`AST_MULAW
◊)))

	)

67 
	gˇŒîid_°©e
;

68 
ˇŒîid_°©e
 
	tCIDSTATE
;

74 
ˇŒîid_öô
();

87 
ˇŒîid_gíî©e
(*
buf
, c⁄° *
numbî
, c⁄° *
«me
, 
Êags
, 
ˇŒwaôög
, 
codec
);

95 
ˇŒîid_°©e
 *
ˇŒîid_√w
(
cid_sig«Œög
);

107 
ˇŒîid_„ed
(
ˇŒîid_°©e
 *
cid
, *
ubuf
, 
ßm∂es
, 
codec
);

119 
ˇŒîid_„ed_jp
(
ˇŒîid_°©e
 *
cid
, *
ubuf
, 
ßm∂es
, 
codec
);

133 
ˇŒîid_gë
(
ˇŒîid_°©e
 *
cid
, **
numbî
, **
«me
, *
Êags
);

142 
ˇŒîid_gë_dtmf
(*
cid°rög
, *
numbî
, *
Êags
);

148 
ˇŒîid_‰ì
(
ˇŒîid_°©e
 *
cid
);

158 
a°_ˇŒîid_gíî©e
(*
buf
, c⁄° *
«me
, c⁄° *
numbî
, 
codec
);

161 
vmwi_gíî©e
(*
buf
, 
a˘ive
, 
mdmf
, 
codec
);

166 
a°_ˇŒîid_ˇŒwaôög_gíî©e
(*
buf
, c⁄° *
«me
, c⁄° *
numbî
, 
codec
);

175 
a°_ˇŒîid_∑r£
(*
ö°r
, **
«me
, **
loˇti⁄
);

185 
a°_gí_ˇs
(*
outbuf
, 
ßs
, 
Àn
, 
codec
);

192 
a°_shrök_ph⁄e_numbî
(*
n
);

198 
a°_i•h⁄íumbî
(c⁄° *
n
);

205 
a°_is_shrökabÀ_ph⁄íumbî
(c⁄° *
exãn
);

207 
a°_ˇŒîid_•lô
(c⁄° *
§c
, *
«me
, 
«mñí
, *
num
, 
numÀn
);

209 *
a°_ˇŒîid_mîge
(*
buf
, 
bufsiz
, c⁄° *
«me
, c⁄° *
num
, c⁄° *
unknown
);

216 
cid_dr
[4];

217 
cid_di
[4];

218 
˛idsb
;

220 
ölöe
 
	$ˇŒîid_gëˇºõr
(*
¸
, *
ci
, 
bô
)

223 
t
;

224 
t
 = *
¸
 * 
cid_dr
[
bô
] - *
ci
 * 
cid_di
[bit];

225 *
ci
 = *
¸
 * 
cid_di
[
bô
] + *cò* 
cid_dr
[bit];

226 *
¸
 = 
t
;

228 
t
 = 2.0 - (*
¸
 * *¸ + *
ci
 * *ci);

229 *
¸
 *
t
;

230 *
ci
 *
t
;

231  *
¸
;

232 
	}
}

234 
	#PUT_BYTE
(
a
) do { \

235 *(
buf
++Ë(
a
); \

236 
byãs
++; \

237 } 0)

	)

239 
	#PUT_AUDIO_SAMPLE
(
y
) do { \

240 
ödex
 = ()(
	`röt
(8192.0 * (
y
))); \

241 *(
buf
++Ë
	`AST_LIN2X
(
ödex
); \

242 
byãs
++; \

243 } 0)

	)

245 
	#PUT_CLID_MARKMS
 do { \

246 
x
; \

247 
x
=0;x<8;x++) \

248 
	`PUT_AUDIO_SAMPLE
(
	`ˇŒîid_gëˇºõr
(&
¸
, &
ci
, 1)); \

249 } 0)

	)

251 
	#PUT_CLID_BAUD
(
bô
) do { \

252 
sc⁄t
 < 
˛idsb
) { \

253 
	`PUT_AUDIO_SAMPLE
(
	`ˇŒîid_gëˇºõr
(&
¸
, &
ci
, 
bô
)); \

254 
sc⁄t
 += 1.0; \

256 
sc⁄t
 -
˛idsb
; \

257 } 0)

	)

260 
	#PUT_CLID
(
byã
) do { \

261 
z
; \

262 
b
 = (
byã
); \

263 
	`PUT_CLID_BAUD
(0); \

264 
z
=0;z<8;z++) { \

265 
	`PUT_CLID_BAUD
(
b
 & 1); \

266 
b
 >>= 1; \

268 
	`PUT_CLID_BAUD
(1); \

269 } 0)

	)

273 
	#AST_PRES_NUMBER_TYPE
 0x03

	)

274 
	#AST_PRES_USER_NUMBER_UNSCREENED
 0x00

	)

275 
	#AST_PRES_USER_NUMBER_PASSED_SCREEN
 0x01

	)

276 
	#AST_PRES_USER_NUMBER_FAILED_SCREEN
 0x02

	)

277 
	#AST_PRES_NETWORK_NUMBER
 0x03

	)

279 
	#AST_PRES_RESTRICTION
 0x60

	)

280 
	#AST_PRES_ALLOWED
 0x00

	)

281 
	#AST_PRES_RESTRICTED
 0x20

	)

282 
	#AST_PRES_UNAVAILABLE
 0x40

	)

283 
	#AST_PRES_RESERVED
 0x60

	)

285 
	#AST_PRES_ALLOWED_USER_NUMBER_NOT_SCREENED
 \

286 
AST_PRES_USER_NUMBER_UNSCREENED
 + 
AST_PRES_ALLOWED


	)

288 
	#AST_PRES_ALLOWED_USER_NUMBER_PASSED_SCREEN
 \

289 
AST_PRES_USER_NUMBER_PASSED_SCREEN
 + 
AST_PRES_ALLOWED


	)

291 
	#AST_PRES_ALLOWED_USER_NUMBER_FAILED_SCREEN
 \

292 
AST_PRES_USER_NUMBER_FAILED_SCREEN
 + 
AST_PRES_ALLOWED


	)

294 
	#AST_PRES_ALLOWED_NETWORK_NUMBER
 \

295 
AST_PRES_NETWORK_NUMBER
 + 
AST_PRES_ALLOWED


	)

297 
	#AST_PRES_PROHIB_USER_NUMBER_NOT_SCREENED
 \

298 
AST_PRES_USER_NUMBER_UNSCREENED
 + 
AST_PRES_RESTRICTED


	)

300 
	#AST_PRES_PROHIB_USER_NUMBER_PASSED_SCREEN
 \

301 
AST_PRES_USER_NUMBER_PASSED_SCREEN
 + 
AST_PRES_RESTRICTED


	)

303 
	#AST_PRES_PROHIB_USER_NUMBER_FAILED_SCREEN
 \

304 
AST_PRES_USER_NUMBER_FAILED_SCREEN
 + 
AST_PRES_RESTRICTED


	)

306 
	#AST_PRES_PROHIB_NETWORK_NUMBER
 \

307 
AST_PRES_NETWORK_NUMBER
 + 
AST_PRES_RESTRICTED


	)

309 
	#AST_PRES_NUMBER_NOT_AVAILABLE
 \

310 
AST_PRES_NETWORK_NUMBER
 + 
AST_PRES_UNAVAILABLE


	)

312 
a°_∑r£_ˇŒî_¥e£¡©i⁄
(c⁄° *
d©a
);

313 c⁄° *
a°_des¸ibe_ˇŒî_¥e£¡©i⁄
(
d©a
);

	@/usr/include/asterisk/causes.h

23 #i‚de‡
_ASTERISK_CAUSES_H


24 
	#_ASTERISK_CAUSES_H


	)

27 
	#AST_CAUSE_UNALLOCATED
 1

	)

28 
	#AST_CAUSE_NO_ROUTE_TRANSIT_NET
 2

	)

29 
	#AST_CAUSE_NO_ROUTE_DESTINATION
 3

	)

30 
	#AST_CAUSE_CHANNEL_UNACCEPTABLE
 6

	)

31 
	#AST_CAUSE_CALL_AWARDED_DELIVERED
 7

	)

32 
	#AST_CAUSE_NORMAL_CLEARING
 16

	)

33 
	#AST_CAUSE_USER_BUSY
 17

	)

34 
	#AST_CAUSE_NO_USER_RESPONSE
 18

	)

35 
	#AST_CAUSE_NO_ANSWER
 19

	)

36 
	#AST_CAUSE_SUBSCRIBER_ABSENT
 20

	)

37 
	#AST_CAUSE_CALL_REJECTED
 21

	)

38 
	#AST_CAUSE_NUMBER_CHANGED
 22

	)

39 
	#AST_CAUSE_DESTINATION_OUT_OF_ORDER
 27

	)

40 
	#AST_CAUSE_INVALID_NUMBER_FORMAT
 28

	)

41 
	#AST_CAUSE_FACILITY_REJECTED
 29

	)

42 
	#AST_CAUSE_RESPONSE_TO_STATUS_ENQUIRY
 30

	)

43 
	#AST_CAUSE_NORMAL_UNSPECIFIED
 31

	)

44 
	#AST_CAUSE_NORMAL_CIRCUIT_CONGESTION
 34

	)

45 
	#AST_CAUSE_NETWORK_OUT_OF_ORDER
 38

	)

46 
	#AST_CAUSE_NORMAL_TEMPORARY_FAILURE
 41

	)

47 
	#AST_CAUSE_SWITCH_CONGESTION
 42

	)

48 
	#AST_CAUSE_ACCESS_INFO_DISCARDED
 43

	)

49 
	#AST_CAUSE_REQUESTED_CHAN_UNAVAIL
 44

	)

50 
	#AST_CAUSE_PRE_EMPTED
 45

	)

51 
	#AST_CAUSE_FACILITY_NOT_SUBSCRIBED
 50

	)

52 
	#AST_CAUSE_OUTGOING_CALL_BARRED
 52

	)

53 
	#AST_CAUSE_INCOMING_CALL_BARRED
 54

	)

54 
	#AST_CAUSE_BEARERCAPABILITY_NOTAUTH
 57

	)

55 
	#AST_CAUSE_BEARERCAPABILITY_NOTAVAIL
 58

	)

56 
	#AST_CAUSE_BEARERCAPABILITY_NOTIMPL
 65

	)

57 
	#AST_CAUSE_CHAN_NOT_IMPLEMENTED
 66

	)

58 
	#AST_CAUSE_FACILITY_NOT_IMPLEMENTED
 69

	)

59 
	#AST_CAUSE_INVALID_CALL_REFERENCE
 81

	)

60 
	#AST_CAUSE_INCOMPATIBLE_DESTINATION
 88

	)

61 
	#AST_CAUSE_INVALID_MSG_UNSPECIFIED
 95

	)

62 
	#AST_CAUSE_MANDATORY_IE_MISSING
 96

	)

63 
	#AST_CAUSE_MESSAGE_TYPE_NONEXIST
 97

	)

64 
	#AST_CAUSE_WRONG_MESSAGE
 98

	)

65 
	#AST_CAUSE_IE_NONEXIST
 99

	)

66 
	#AST_CAUSE_INVALID_IE_CONTENTS
 100

	)

67 
	#AST_CAUSE_WRONG_CALL_STATE
 101

	)

68 
	#AST_CAUSE_RECOVERY_ON_TIMER_EXPIRE
 102

	)

69 
	#AST_CAUSE_MANDATORY_IE_LENGTH_ERROR
 103

	)

70 
	#AST_CAUSE_PROTOCOL_ERROR
 111

	)

71 
	#AST_CAUSE_INTERWORKING
 127

	)

74 
	#AST_CAUSE_BUSY
 
AST_CAUSE_USER_BUSY


	)

75 
	#AST_CAUSE_FAILURE
 
AST_CAUSE_NETWORK_OUT_OF_ORDER


	)

76 
	#AST_CAUSE_NORMAL
 
AST_CAUSE_NORMAL_CLEARING


	)

77 
	#AST_CAUSE_NOANSWER
 
AST_CAUSE_NO_ANSWER


	)

78 
	#AST_CAUSE_CONGESTION
 
AST_CAUSE_NORMAL_CIRCUIT_CONGESTION


	)

79 
	#AST_CAUSE_UNREGISTERED
 
AST_CAUSE_SUBSCRIBER_ABSENT


	)

80 
	#AST_CAUSE_NOTDEFINED
 0

	)

81 
	#AST_CAUSE_NOSUCHDRIVER
 
AST_CAUSE_CHAN_NOT_IMPLEMENTED


	)

	@/usr/include/asterisk/channel.h

87 #i‚de‡
_ASTERISK_CHANNEL_H


88 
	#_ASTERISK_CHANNEL_H


	)

90 
	~"a°îisk/ab°ø˘_jb.h
"

92 
	~<uni°d.h
>

93 #ifde‡
POLLCOMPAT


94 
	~"a°îisk/pﬁl-com∑t.h
"

96 
	~<sys/pﬁl.h
>

99 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

103 
	#AST_MAX_EXTENSION
 80

	)

104 
	#AST_MAX_CONTEXT
 80

	)

105 
	#AST_CHANNEL_NAME
 80

	)

106 
	#MAX_LANGUAGE
 20

	)

107 
	#MAX_MUSICCLASS
 80

	)

109 
	~"a°îisk/com∑t.h
"

110 
	~"a°îisk/‰ame.h
"

111 
	~"a°îisk/sched.h
"

112 
	~"a°îisk/ch™v¨s.h
"

113 
	~"a°îisk/c⁄fig.h
"

114 
	~"a°îisk/lock.h
"

115 
	~"a°îisk/cdr.h
"

116 
	~"a°îisk/utûs.h
"

117 
	~"a°îisk/lökedli°s.h
"

118 
	~"a°îisk/°rögfõlds.h
"

119 
	~"a°îisk/compûî.h
"

121 
	#DATASTORE_INHERIT_FOREVER
 
INT_MAX


	)

123 
	#AST_MAX_FDS
 8

	)

128 
	#AST_ALERT_FD
 (
AST_MAX_FDS
-1Ë

	)

129 
	#AST_TIMING_FD
 (
AST_MAX_FDS
-2Ë

	)

130 
	#AST_AGENT_FD
 (
AST_MAX_FDS
-3Ë

	)

131 
	#AST_GENERATOR_FD
 (
AST_MAX_FDS
-4Ë

	)

133 
	ea°_bridge_ªsu…
 {

134 
AST_BRIDGE_COMPLETE
 = 0,

135 
AST_BRIDGE_FAILED
 = -1,

136 
AST_BRIDGE_FAILED_NOWARN
 = -2,

137 
AST_BRIDGE_RETRY
 = -3,

140 
	ta°_group_t
;

142 
	sa°_gíî©‹
 {

143 *(*
Æloc
)(
a°_ch™√l
 *
ch™
, *
∑øms
);

144 (*
ªÀa£
)(
a°_ch™√l
 *
ch™
, *
d©a
);

149 (*
gíî©e
)(
a°_ch™√l
 *
ch™
, *
d©a
, 
Àn
, 
ßm∂es
);

153 
	sa°_d©a°‹e_öfo
 {

154 c⁄° *
ty≥
;

155 *(*
du∂iˇã
)(*
d©a
);

156 (*
de°roy
)(*
d©a
);

171 (*
ch™_fixup
)(*
d©a
, 
a°_ch™√l
 *
ﬁd_ch™
, a°_ch™√»*
√w_ch™
);

175 
	sa°_d©a°‹e
 {

176 *
uid
;

177 *
d©a
;

178 c⁄° 
a°_d©a°‹e_öfo
 *
öfo
;

179 
öhîô™˚
;

180 
AST_LIST_ENTRY
(
a°_d©a°‹e
Ë
íåy
;

188 
	sa°_ˇŒîid
 {

189 *
cid_dnid
;

190 *
cid_num
;

191 *
cid_«me
;

192 *
cid_™i
;

193 *
cid_rdnis
;

194 
cid_¥es
;

195 
cid_™i2
;

196 
cid_t⁄
;

197 
cid_äs
;

212 
	sa°_ch™√l_ãch
 {

213 c⁄° * c⁄° 
ty≥
;

214 c⁄° * c⁄° 
des¸ùti⁄
;

216 
ˇ∑bûôõs
;

218 
¥›îtõs
;

221 
a°_ch™√l
 *(* c⁄° 
ªque°î
)(c⁄° *
ty≥
, 
f‹m©
, *
d©a
, *
ˇu£
);

223 (* c⁄° 
devi˚°©e
)(*
d©a
);

226 (* c⁄° 
£nd_digô_begö
)(
a°_ch™√l
 *
ch™
, 
digô
);

229 (* c⁄° 
£nd_digô_íd
)(
a°_ch™√l
 *
ch™
, 
digô
, 
duøti⁄
);

233 (* c⁄° 
ˇŒ
)(
a°_ch™√l
 *
ch™
, *
addr
, 
timeout
);

236 (* c⁄° 
h™gup
)(
a°_ch™√l
 *
ch™
);

239 (* c⁄° 
™swî
)(
a°_ch™√l
 *
ch™
);

242 
a°_‰ame
 * (* c⁄° 
ªad
)(
a°_ch™√l
 *
ch™
);

245 (* c⁄° 
wrôe
)(
a°_ch™√l
 *
ch™
, 
a°_‰ame
 *
‰ame
);

248 (* c⁄° 
£nd_ãxt
)(
a°_ch™√l
 *
ch™
, c⁄° *
ãxt
);

251 (* c⁄° 
£nd_image
)(
a°_ch™√l
 *
ch™
, 
a°_‰ame
 *
‰ame
);

254 (* c⁄° 
£nd_html
)(
a°_ch™√l
 *
ch™
, 
sub˛ass
, c⁄° *
d©a
, 
Àn
);

257 
a°_‰ame
 * (* c⁄° 
ex˚±i⁄
)(
a°_ch™√l
 *
ch™
);

260 
a°_bridge_ªsu…
 (* c⁄° 
bridge
)(
a°_ch™√l
 *
c0
, a°_ch™√»*
c1
, 
Êags
,

261 
a°_‰ame
 **
fo
, 
a°_ch™√l
 **
rc
, 
timeoutms
);

264 (* c⁄° 
ödiˇã
)(
a°_ch™√l
 *
c
, 
c⁄dôi⁄
, c⁄° *
d©a
, 
size_t
 
d©Æí
);

267 (* c⁄° 
fixup
)(
a°_ch™√l
 *
ﬁdch™
, a°_ch™√»*
√wch™
);

270 (* c⁄° 
£t›ti⁄
)(
a°_ch™√l
 *
ch™
, 
›ti⁄
, *
d©a
, 
d©Æí
);

273 (* c⁄° 
quîy›ti⁄
)(
a°_ch™√l
 *
ch™
, 
›ti⁄
, *
d©a
, *
d©Æí
);

276 (* c⁄° 
å™s„r
)(
a°_ch™√l
 *
ch™
, c⁄° *
√wde°
);

279 (* c⁄° 
wrôe_video
)(
a°_ch™√l
 *
ch™
, 
a°_‰ame
 *
‰ame
);

282 
a°_ch™√l
 *(* c⁄° 
bridged_ch™√l
)(a°_ch™√»*
ch™
, a°_ch™√»*
bridge
);

285 (* 
func_ch™√l_ªad
)(
a°_ch™√l
 *
ch™
, *
fun˘i⁄
, *
d©a
, *
buf
, 
size_t
 
Àn
);

288 (* 
func_ch™√l_wrôe
)(
a°_ch™√l
 *
ch™
, *
fun˘i⁄
, *
d©a
, c⁄° *
vÆue
);

291 
a°_ch™√l
* (* 
gë_ba£_ch™√l
)(a°_ch™√»*
ch™
);

294 (* 
£t_ba£_ch™√l
)(
a°_ch™√l
 *
ch™
, a°_ch™√»*
ba£
);

297 
	#DEBUGCHAN_FLAG
 0x80000000

	)

298 
	#FRAMECOUNT_INC
(
x
Ë–((xË& 
DEBUGCHAN_FLAG
Ë| (((x)+1Ë& ~DEBUGCHAN_FLAGË)

	)

300 
	ea°_ch™√l_adsi˝e
 {

301 
AST_ADSI_UNKNOWN
,

302 
AST_ADSI_AVAILABLE
,

303 
AST_ADSI_UNAVAILABLE
,

304 
AST_ADSI_OFFHOOKONLY
,

313 
	ea°_ch™√l_°©e
 {

315 
AST_STATE_DOWN
,

317 
AST_STATE_RESERVED
,

319 
AST_STATE_OFFHOOK
,

321 
AST_STATE_DIALING
,

323 
AST_STATE_RING
,

325 
AST_STATE_RINGING
,

327 
AST_STATE_UP
,

329 
AST_STATE_BUSY
,

331 
AST_STATE_DIALING_OFFHOOK
,

333 
AST_STATE_PRERING
,

336 
AST_STATE_MUTE
 = (1 << 16),

345 
	sa°_ch™√l
 {

347 c⁄° 
a°_ch™√l_ãch
 *
ãch
;

350 *
ãch_pvt
;

352 
AST_DECLARE_STRING_FIELDS
(

353 
AST_STRING_FIELD
(
«me
);

354 
AST_STRING_FIELD
(
œnguage
);

355 
AST_STRING_FIELD
(
music˛ass
);

356 
AST_STRING_FIELD
(
accou¡code
);

357 
AST_STRING_FIELD
(
ˇŒ_f‹w¨d
);

358 
AST_STRING_FIELD
(
uniqueid
);

362 
fds
[
AST_MAX_FDS
];

364 *
music_°©e
;

365 *
gíî©‹d©a
;

366 
a°_gíî©‹
 *
gíî©‹
;

371 
a°_ch™√l
 *
_bridge
;

372 
a°_ch™√l
 *
masq
;

373 
a°_ch™√l
 *
masqr
;

374 
cdrÊags
;

378 
_so·h™gup
;

379 
time_t
 
whítoh™gup
;

380 
±hªad_t
 
blockî
;

381 
a°_muãx_t
 
lock
;

382 c⁄° *
block¥oc
;

384 c⁄° *
≠∂
;

385 c⁄° *
d©a
;

386 
fdno
;

387 
sched_c⁄ãxt
 *
sched
;

388 
°ªamid
;

389 
a°_fûe°ªam
 *
°ªam
;

390 
v°ªamid
;

391 
a°_fûe°ªam
 *
v°ªam
;

392 
ﬁdwrôef‹m©
;

394 
timögfd
;

395 (*
timögfunc
)(c⁄° *
d©a
);

396 *
timögd©a
;

398 
a°_ch™√l_°©e
 
_°©e
;

399 
rögs
;

400 
a°_ˇŒîid
 
cid
;

401 
dtmfq
[
AST_MAX_EXTENSION
];

402 
a°_‰ame
 
dtmff
;

404 
c⁄ãxt
[
AST_MAX_CONTEXT
];

405 
exãn
[
AST_MAX_EXTENSION
];

406 
¥i‹ôy
;

407 
ma¸oc⁄ãxt
[
AST_MAX_CONTEXT
];

408 
ma¸€xãn
[
AST_MAX_EXTENSION
];

409 
ma¸›ri‹ôy
;

410 
dülc⁄ãxt
[
AST_MAX_CONTEXT
];

412 
a°_pbx
 *
pbx
;

413 
amaÊags
;

414 
a°_cdr
 *
cdr
;

415 
a°_ch™√l_adsi˝e
 
adsi˝e
;

417 
öd_t⁄e_z⁄e
 *
z⁄e
;

420 
a°_ch™√l_m⁄ô‹
 *
m⁄ô‹
;

423 
ösm∂
;

424 
outsm∂
;

429 
fö
;

430 
fout
;

431 
h™gupˇu£
;

432 
v¨shód
 varshead;

433 
a°_group_t
 
ˇŒgroup
;

434 
a°_group_t
 
pickupgroup
;

435 
Êags
;

436 
å™s„rˇ∑bûôy
;

437 
AST_LIST_HEAD_NOLOCK
(, 
a°_‰ame
Ë
ªadq
;

438 
Æîçùe
[2];

440 
«tivef‹m©s
;

441 
ªadf‹m©
;

442 
wrôef‹m©
;

443 
a°_å™s_pvt
 *
wrôëøns
;

444 
a°_å™s_pvt
 *
ªadå™s
;

445 
øwªadf‹m©
;

446 
øwwrôef‹m©
;

448 
a°_audiohook_li°
 *
audiohooks
;

449 *
unu£d
;

452 
AST_LIST_ENTRY
(
a°_ch™√l
Ë
ch™_li°
;

454 
a°_jb
 
jb
;

456 
emuœã_dtmf_digô
;

457 
emuœã_dtmf_duøti⁄
;

458 
timevÆ
 
dtmf_tv
;

460 
visibÀ_ödiˇti⁄
;

463 
AST_LIST_HEAD_NOLOCK
(
d©a°‹es
, 
a°_d©a°‹e
) datastores;

470 
AST_CHAN_TP_WANTSJITTER
 = (1 << 0),

473 
AST_CHAN_TP_CREATESJITTER
 = (1 << 1),

479 
AST_FLAG_DEFER_DTMF
 = (1 << 1),

481 
AST_FLAG_WRITE_INT
 = (1 << 2),

483 
AST_FLAG_BLOCKING
 = (1 << 3),

485 
AST_FLAG_ZOMBIE
 = (1 << 4),

487 
AST_FLAG_EXCEPTION
 = (1 << 5),

489 
AST_FLAG_MOH
 = (1 << 6),

491 
AST_FLAG_SPYING
 = (1 << 7),

493 
AST_FLAG_NBRIDGE
 = (1 << 8),

497 
AST_FLAG_IN_AUTOLOOP
 = (1 << 9),

499 
AST_FLAG_OUTGOING
 = (1 << 10),

501 
AST_FLAG_WHISPER
 = (1 << 11),

503 
AST_FLAG_IN_DTMF
 = (1 << 12),

506 
AST_FLAG_EMULATE_DTMF
 = (1 << 13),

509 
AST_FLAG_END_DTMF_ONLY
 = (1 << 14),

512 
AST_FLAG_MASQ_NOSTREAM
 = (1 << 15),

516 
AST_FLAG_BRIDGE_HANGUP_RUN
 = (1 << 16),

521 
AST_FEATURE_PLAY_WARNING
 = (1 << 0),

522 
AST_FEATURE_REDIRECT
 = (1 << 1),

523 
AST_FEATURE_DISCONNECT
 = (1 << 2),

524 
AST_FEATURE_ATXFER
 = (1 << 3),

525 
AST_FEATURE_AUTOMON
 = (1 << 4),

526 
AST_FEATURE_PARKCALL
 = (1 << 5),

527 
AST_FEATURE_NO_H_EXTEN
 = (1 << 6),

530 
	sa°_bridge_c⁄fig
 {

531 
a°_Êags
 
„©uªs_ˇŒî
;

532 
a°_Êags
 
„©uªs_ˇŒì
;

533 
timevÆ
 
°¨t_time
;

534 
„©uª_timî
;

535 
timñimô
;

536 
∂ay_w¨nög
;

537 
w¨nög_‰eq
;

538 c⁄° *
w¨nög_sound
;

539 c⁄° *
íd_sound
;

540 c⁄° *
°¨t_sound
;

541 
fú°∑ss
;

542 
Êags
;

545 
ch™m⁄
;

547 
	#LOAD_OH
(
oh
) { \

548 
oh
.
c⁄ãxt
 = context; \

549 
oh
.
exãn
 =Éxten; \

550 
oh
.
¥i‹ôy
 =Öriority; \

551 
oh
.
cid_num
 = cid_num; \

552 
oh
.
cid_«me
 = cid_name; \

553 
oh
.
accou¡
 =áccount; \

554 
oh
.
v¨s
 = vars; \

555 
oh
.
∑ª¡_ch™√l
 = 
NULL
; \

556 }

	)

558 
	soutgoög_hñ≥r
 {

559 c⁄° *
c⁄ãxt
;

560 c⁄° *
exãn
;

561 
¥i‹ôy
;

562 c⁄° *
cid_num
;

563 c⁄° *
cid_«me
;

564 c⁄° *
accou¡
;

565 
a°_v¨übÀ
 *
v¨s
;

566 
a°_ch™√l
 *
∑ª¡_ch™√l
;

570 
AST_CDR_TRANSFER
 = (1 << 0),

571 
AST_CDR_FORWARD
 = (1 << 1),

572 
AST_CDR_CALLWAIT
 = (1 << 2),

573 
AST_CDR_CONFERENCE
 = (1 << 3),

578 
AST_SOFTHANGUP_DEV
 = (1 << 0),

580 
AST_SOFTHANGUP_ASYNCGOTO
 = (1 << 1),

581 
AST_SOFTHANGUP_SHUTDOWN
 = (1 << 2),

582 
AST_SOFTHANGUP_TIMEOUT
 = (1 << 3),

583 
AST_SOFTHANGUP_APPUNLOAD
 = (1 << 4),

584 
AST_SOFTHANGUP_EXPLICIT
 = (1 << 5),

585 
AST_SOFTHANGUP_UNBRIDGE
 = (1 << 6),

590 
	ech™√Ãñﬂdªas⁄
 {

591 
CHANNEL_MODULE_LOAD
,

592 
CHANNEL_MODULE_RELOAD
,

593 
CHANNEL_CLI_RELOAD
,

594 
CHANNEL_MANAGER_RELOAD
,

598 
a°_d©a°‹e
 *
a°_ch™√l_d©a°‹e_Æloc
(c⁄° 
a°_d©a°‹e_öfo
 *
öfo
, *
uid
);

601 
a°_ch™√l_d©a°‹e_‰ì
(
a°_d©a°‹e
 *
d©a°‹e
);

604 
a°_ch™√l_d©a°‹e_öhîô
(
a°_ch™√l
 *
‰om
, a°_ch™√»*
to
);

607 
a°_ch™√l_d©a°‹e_add
(
a°_ch™√l
 *
ch™
, 
a°_d©a°‹e
 *
d©a°‹e
);

610 
a°_ch™√l_d©a°‹e_ªmove
(
a°_ch™√l
 *
ch™
, 
a°_d©a°‹e
 *
d©a°‹e
);

613 
a°_d©a°‹e
 *
a°_ch™√l_d©a°‹e_föd
(
a°_ch™√l
 *
ch™
, c⁄° 
a°_d©a°‹e_öfo
 *
öfo
, *
uid
);

616 
a°_£t°©e
(
a°_ch™√l
 *
ch™
, 
a°_ch™√l_°©e
);

624 
a°_ch™√l
 *
a°_ch™√l_Æloc
(
√edqueue
, 
°©e
, c⁄° *
cid_num
, c⁄° *
cid_«me
, c⁄° *
ac˘code
, c⁄° *
exãn
, c⁄° *
c⁄ãxt
, c⁄° 
amaÊag
, c⁄° *
«me_fmt
, ...);

627 
a°_queue_‰ame
(
a°_ch™√l
 *
ch™
, 
a°_‰ame
 *
f
);

630 
a°_queue_h™gup
(
a°_ch™√l
 *
ch™
);

638 
a°_queue_c⁄åﬁ
(
a°_ch™√l
 *
ch™
, 
a°_c⁄åﬁ_‰ame_ty≥
 
c⁄åﬁ
);

659 
a°_queue_c⁄åﬁ_d©a
(
a°_ch™√l
 *
ch™
, 
a°_c⁄åﬁ_‰ame_ty≥
 
c⁄åﬁ
,

660 c⁄° *
d©a
, 
size_t
 
d©Æí
);

663 
a°_ch™ge_«me
(
a°_ch™√l
 *
ch™
, *
√w«me
);

666 
a°_ch™√l_‰ì
(
a°_ch™√l
 *);

677 
a°_ch™√l
 *
a°_ªque°
(c⁄° *
ty≥
, 
f‹m©
, *
d©a
, *
°©us
);

692 
a°_ch™√l
 *
a°_ªque°_™d_dül
(c⁄° *
ty≥
, 
f‹m©
, *
d©a
, 
timeout
, *
ªas⁄
, c⁄° *
cidnum
, c⁄° *
cid«me
);

694 
a°_ch™√l
 *
__a°_ªque°_™d_dül
(c⁄° *
ty≥
, 
f‹m©
, *
d©a
, 
timeout
, *
ªas⁄
, c⁄° *
cidnum
, c⁄° *
cid«me
, 
outgoög_hñ≥r
 *
oh
);

701 
a°_ch™√l_ªgi°î
(c⁄° 
a°_ch™√l_ãch
 *
ãch
);

707 
a°_ch™√l_uƒegi°î
(c⁄° 
a°_ch™√l_ãch
 *
ãch
);

713 c⁄° 
a°_ch™√l_ãch
 *
a°_gë_ch™√l_ãch
(c⁄° *
«me
);

722 
a°_h™gup
(
a°_ch™√l
 *
ch™
);

731 
a°_so·h™gup
(
a°_ch™√l
 *
ch™
, 
ˇu£
);

736 
a°_so·h™gup_nﬁock
(
a°_ch™√l
 *
ch™
, 
ˇu£
);

743 
a°_check_h™gup
(
a°_ch™√l
 *
ch™
);

754 
a°_ch™√l_cmpwhítoh™gup
(
a°_ch™√l
 *
ch™
, 
time_t
 
off£t
);

761 
a°_ch™√l_£twhítoh™gup
(
a°_ch™√l
 *
ch™
, 
time_t
 
off£t
);

769 
a°_™swî
(
a°_ch™√l
 *
ch™
);

780 
a°_ˇŒ
(
a°_ch™√l
 *
ch™
, *
addr
, 
timeout
);

788 
a°_ödiˇã
(
a°_ch™√l
 *
ch™
, 
c⁄dôi⁄
);

798 
a°_ödiˇã_d©a
(
a°_ch™√l
 *
ch™
, 
c⁄dôi⁄
, c⁄° *
d©a
, 
size_t
 
d©Æí
);

807 
a°_waôf‹
(
a°_ch™√l
 *
ch™
, 
ms
);

815 
a°_ß„_¶ìp
(
a°_ch™√l
 *
ch™
, 
ms
);

826 
a°_ß„_¶ìp_c⁄dôi⁄Æ
(
a°_ch™√l
 *
ch™
, 
ms
, (*
c⁄d
)(*), *
d©a
 );

841 
a°_ch™√l
 *
a°_waôf‹_«ndfds
(a°_ch™√»**
ch™
, 
n
, *
fds
, 
nfds
, *
ex˚±i⁄
, *
outfd
, *
ms
);

849 
a°_ch™√l
 *
a°_waôf‹_n
(a°_ch™√»**
ch™
, 
n
, *
ms
);

853 
a°_waôf‹_n_fd
(*
fds
, 
n
, *
ms
, *
ex˚±i⁄
);

862 
a°_‰ame
 *
a°_ªad
(
a°_ch™√l
 *
ch™
);

872 
a°_‰ame
 *
a°_ªad_nﬂudio
(
a°_ch™√l
 *
ch™
);

880 
a°_wrôe
(
a°_ch™√l
 *
ch™
, 
a°_‰ame
 *
‰ame
);

888 
a°_wrôe_video
(
a°_ch™√l
 *
ch™
, 
a°_‰ame
 *
‰ame
);

891 
a°_¥od
(
a°_ch™√l
 *
ch™
);

899 
a°_£t_ªad_f‹m©
(
a°_ch™√l
 *
ch™
, 
f‹m©
);

907 
a°_£t_wrôe_f‹m©
(
a°_ch™√l
 *
ch™
, 
f‹m©
);

915 
a°_£ndãxt
(
a°_ch™√l
 *
ch™
, c⁄° *
ãxt
);

923 
a°_ªcvch¨
(
a°_ch™√l
 *
ch™
, 
timeout
);

931 
a°_£nddigô
(
a°_ch™√l
 *
ch™
, 
digô
);

933 
a°_£nddigô_begö
(
a°_ch™√l
 *
ch™
, 
digô
);

934 
a°_£nddigô_íd
(
a°_ch™√l
 *
ch™
, 
digô
, 
duøti⁄
);

942 *
a°_ªcvãxt
(
a°_ch™√l
 *
ch™
, 
timeout
);

950 
a°_ch™√l
 *
a°_ch™√l_wÆk_locked
(c⁄° a°_ch™√»*
¥ev
);

953 
a°_ch™√l
 *
a°_gë_ch™√l_by_«me_locked
(c⁄° *
ch™
);

956 
a°_ch™√l
 *
a°_gë_ch™√l_by_«me_¥efix_locked
(c⁄° *
«me
, c⁄° 
«mñí
);

959 
a°_ch™√l
 *
a°_wÆk_ch™√l_by_«me_¥efix_locked
(c⁄° a°_ch™√»*
ch™
, c⁄° *
«me
, c⁄° 
«mñí
);

962 
a°_ch™√l
 *
a°_gë_ch™√l_by_exãn_locked
(c⁄° *
exãn
, c⁄° *
c⁄ãxt
);

965 
a°_ch™√l
 *
a°_wÆk_ch™√l_by_exãn_locked
(c⁄° a°_ch™√»*
ch™
, c⁄° *
exãn
,

966 c⁄° *
c⁄ãxt
);

972 
a°_waôf‹digô
(
a°_ch™√l
 *
c
, 
ms
);

981 
a°_waôf‹digô_fuŒ
(
a°_ch™√l
 *
c
, 
ms
, 
audiofd
, 
˘æfd
);

995 
a°_ªad°rög
(
a°_ch™√l
 *
c
, *
s
, 
Àn
, 
timeout
, 
πimeout
, *
ídîs
);

996 
a°_ªad°rög_fuŒ
(
a°_ch™√l
 *
c
, *
s
, 
Àn
, 
timeout
, 
πimeout
, *
ídîs
, 
audiofd
, 
˘æfd
);

999 
	#AST_BRIDGE_DTMF_CHANNEL_0
 (1 << 0)

	)

1001 
	#AST_BRIDGE_DTMF_CHANNEL_1
 (1 << 1)

	)

1003 
	#AST_BRIDGE_REC_CHANNEL_0
 (1 << 2)

	)

1005 
	#AST_BRIDGE_REC_CHANNEL_1
 (1 << 3)

	)

1007 
	#AST_BRIDGE_IGNORE_SIGS
 (1 << 4)

	)

1015 
a°_ch™√l_make_com∑tibÀ
(
a°_ch™√l
 *
c0
, a°_ch™√»*
c1
);

1026 
a°_ch™√l_bridge
(
a°_ch™√l
 *
c0
,a°_ch™√»*
c1
,
a°_bridge_c⁄fig
 *
c⁄fig
, 
a°_‰ame
 **
fo
, a°_ch™√»**
rc
);

1037 
a°_ch™√l_masquîade
(
a°_ch™√l
 *
‹igöÆ
, a°_ch™√»*
˛⁄e
);

1045 c⁄° *
a°_ˇu£2°r
(
°©e
Ë
©åibuã_puª
;

1052 
a°_°r2ˇu£
(c⁄° *
«me
Ë
©åibuã_puª
;

1060 *
a°_°©e2°r
(
a°_ch™√l_°©e
);

1069 *
a°_å™s„rˇ∑bûôy2°r
(
å™s„rˇ∑bûôy
Ë
©åibuã_c⁄°
;

1086 
a°_ch™√l_£t›ti⁄
(
a°_ch™√l
 *
ch™√l
, 
›ti⁄
, *
d©a
, 
d©Æí
, 
block
);

1090 
a°_be°_codec
(
fmts
);

1098 
a°_‰ame
 *
a°_ch™√l_quîy›ti⁄
(
a°_ch™√l
 *
ch™√l
, 
›ti⁄
, *
d©a
, *
d©Æí
, 
block
);

1102 
a°_ch™√l_suµ‹ts_html
(
a°_ch™√l
 *
ch™√l
);

1106 
a°_ch™√l_£ndhtml
(
a°_ch™√l
 *
ch™√l
, 
sub˛ass
, c⁄° *
d©a
, 
d©Æí
);

1110 
a°_ch™√l_£nduæ
(
a°_ch™√l
 *
ch™√l
, c⁄° *
uæ
);

1116 
a°_ch™√l_de„r_dtmf
(
a°_ch™√l
 *
ch™
);

1120 
a°_ch™√l_unde„r_dtmf
(
a°_ch™√l
 *
ch™
);

1125 
a°_begö_shutdown
(
h™gup
);

1128 
a°_ˇn˚l_shutdown
();

1131 
a°_a˘ive_ch™√ls
();

1134 
a°_shuâög_down
();

1137 
a°_a˘iv©e_gíî©‹
(
a°_ch™√l
 *
ch™
, 
a°_gíî©‹
 *
gí
, *
∑øms
);

1140 
a°_dó˘iv©e_gíî©‹
(
a°_ch™√l
 *
ch™
);

1145 
a°_£t_ˇŒîid
(
a°_ch™√l
 *
ch™
, c⁄° *
cidnum
, c⁄° *
cid«me
, c⁄° *
™i
);

1149 *
a°_ß„_°rög_Æloc
(c⁄° *
fmt
, ...);

1154 
a°_t⁄ïaú_°¨t
(
a°_ch™√l
 *
ch™
, 
‰eq1
, 
‰eq2
, 
duøti⁄
, 
vﬁ
);

1156 
a°_t⁄ïaú_°›
(
a°_ch™√l
 *
ch™
);

1158 
a°_t⁄ïaú
(
a°_ch™√l
 *
ch™
, 
‰eq1
, 
‰eq2
, 
duøti⁄
, 
vﬁ
);

1166 
a°_auto£rvi˚_°¨t
(
a°_ch™√l
 *
ch™
);

1174 
a°_auto£rvi˚_°›
(
a°_ch™√l
 *
ch™
);

1178 
a°_£âimeout
(
a°_ch™√l
 *
c
, 
ßm∂es
, (*
func
)(c⁄° *
d©a
), *data);

1185 
a°_å™s„r
(
a°_ch™√l
 *
ch™
, *
de°
);

1194 
a°_do_masquîade
(
a°_ch™√l
 *
ch™
);

1199 
a°_ch™√l
 *
a°_bridged_ch™√l
(a°_ch™√»*
ch™
);

1213 
a°_ch™√l_öhîô_v¨übÀs
(c⁄° 
a°_ch™√l
 *
∑ª¡
, a°_ch™√»*
chûd
);

1223 
a°_£t_v¨übÀs
(
a°_ch™√l
 *
ch™
, 
a°_v¨übÀ
 *
v¨s
);

1228 
a°_sûí˚_gíî©‹
;

1243 
a°_sûí˚_gíî©‹
 *
a°_ch™√l_°¨t_sûí˚_gíî©‹
(
a°_ch™√l
 *
ch™
);

1255 
a°_ch™√l_°›_sûí˚_gíî©‹
(
a°_ch™√l
 *
ch™
, 
a°_sûí˚_gíî©‹
 *
°©e
);

1265 
a°_öã∫Æ_timög_íabÀd
(
a°_ch™√l
 *
ch™
);

1273 
ölöe
 
a°_add_fd
(
pﬁlfd
 *
pfd
, 
fd
)

1275 
pfd
->
fd
 = fd;

1276 
pfd
->
evíts
 = 
POLLIN
 | 
POLLPRI
;

1277  
fd
 >= 0;

1281 
ölöe
 
a°_fdis£t
(
pﬁlfd
 *
pfds
, 
fd
, 
max
, *
°¨t
)

1283 
x
;

1284 
dummy
=0;

1286 i‡(
fd
 < 0)

1288 i‡(!
°¨t
)

1289 
°¨t
 = &
dummy
;

1290 
x
 = *
°¨t
; x<
max
; x++)

1291 i‡(
pfds
[
x
].
fd
 == fd) {

1292 i‡(
x
 =*
°¨t
)

1293 (*
°¨t
)++;

1294  
pfds
[
x
].
ªvíts
;

1299 #ifde‡
SOLARIS


1300 
ölöe
 
timîsub
(
timevÆ
 *
tvíd
, timevÆ *
tv°¨t
, timevÆ *
tvdiff
)

1302 
tvdiff
->
tv_£c
 = 
tvíd
->tv_£¯- 
tv°¨t
->tv_sec;

1303 
tvdiff
->
tv_u£c
 = 
tvíd
->tv_u£¯- 
tv°¨t
->tv_usec;

1304 i‡(
tvdiff
->
tv_u£c
 < 0) {

1305 
tvdiff
->
tv_£c
 --;

1306 
tvdiff
->
tv_u£c
 += 1000000;

1322 
ölöe
 
a°_£À˘
(
nfds
, 
fd_£t
 *
rfds
, fd_£à*
wfds
, fd_£à*
efds
, 
timevÆ
 *
tvp
)

1324 #ifde‡
__löux__


1325  
£À˘
(
nfds
, 
rfds
, 
wfds
, 
efds
, 
tvp
);

1327 i‡(
tvp
) {

1328 
timevÆ
 
tv
, 
tv°¨t
, 
tvíd
, 
tvÀn
;

1329 
ªs
;

1331 
tv
 = *
tvp
;

1332 
gëtimeofday
(&
tv°¨t
, 
NULL
);

1333 
ªs
 = 
£À˘
(
nfds
, 
rfds
, 
wfds
, 
efds
, 
tvp
);

1334 
gëtimeofday
(&
tvíd
, 
NULL
);

1335 
timîsub
(&
tvíd
, &
tv°¨t
, &
tvÀn
);

1336 
timîsub
(&
tv
, &
tvÀn
, 
tvp
);

1337 i‡(
tvp
->
tv_£c
 < 0 || (tvp->tv_£¯=0 &&Åvp->
tv_u£c
 < 0)) {

1338 
tvp
->
tv_£c
 = 0;

1339 
tvp
->
tv_u£c
 = 0;

1341  
ªs
;

1344  
£À˘
(
nfds
, 
rfds
, 
wfds
, 
efds
, 
NULL
);

1348 
	#CHECK_BLOCKING
(
c
) do { \

1349 i‡(
	`a°_ã°_Êag
(
c
, 
AST_FLAG_BLOCKING
)) {\

1350 i‡(
›ti⁄_debug
) \

1351 
	`a°_log
(
LOG_DEBUG
, "Thªad %ld Blockög '%s',áÃódy blocked byÅhªad %ld i¿¥o˚duª %s\n", (Ë
	`±hªad_£lf
(), (
c
)->
«me
, (Ë(c)->
blockî
, (c)->
block¥oc
); \

1353 (
c
)->
blockî
 = 
	`±hªad_£lf
(); \

1354 (
c
)->
block¥oc
 = 
__PRETTY_FUNCTION__
; \

1355 
	`a°_£t_Êag
(
c
, 
AST_FLAG_BLOCKING
); \

1356 } } 0)

	)

1358 
a°_group_t
 
a°_gë_group
(c⁄° *
s
);

1361 *
a°_¥öt_group
(*
buf
, 
buÊí
, 
a°_group_t
 
group
);

1366 c⁄° *
ch™√Ãñﬂdªas⁄2txt
(
ch™√Ãñﬂdªas⁄
 
ªas⁄
);

1369 
a°_v¨übÀ
 *
a°_ch™√…y≥_li°
();

1384 
a°_ch™√l_whi•î_°¨t
(
a°_ch™√l
 *
ch™
);

1392 
a°_ch™√l_whi•î_„ed
(
a°_ch™√l
 *
ch™
, 
a°_‰ame
 *
f
);

1402 
a°_ch™√l_whi•î_°›
(
a°_ch™√l
 *
ch™
);

1411 *
a°_ch™√l_ªas⁄2°r
(
ªas⁄
);

1414 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

	@/usr/include/asterisk/cli.h

23 #i‚de‡
_ASTERISK_CLI_H


24 
	#_ASTERISK_CLI_H


	)

26 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

30 
	~<°d¨g.h
>

32 
	~"a°îisk/lökedli°s.h
"

34 
a°_˛i
(
fd
, *
fmt
, ...)

35 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 2, 3)));

37 
	#RESULT_SUCCESS
 0

	)

38 
	#RESULT_SHOWUSAGE
 1

	)

39 
	#RESULT_FAILURE
 2

	)

41 
	#AST_MAX_CMD_LEN
 16

	)

43 
	#AST_MAX_ARGS
 64

	)

45 
	#AST_CLI_COMPLETE_EOF
 "_EOF_"

	)

48 
	sa°_˛i_íåy
 {

49 * c⁄° 
cmda
[
AST_MAX_CMD_LEN
];

58 (*
h™dÀr
)(
fd
, 
¨gc
, *
¨gv
[]);

60 c⁄° *
summ¨y
;

62 c⁄° *
ußge
;

71 *(*
gíî©‹
)(c⁄° *
löe
, c⁄° *
w‹d
, 
pos
, 
n
);

72 
a°_˛i_íåy
 *
dïªˇã_cmd
;

74 
öu£
;

75 
moduÀ
 *module;

76 *
_fuŒ_cmd
;

81 
dïªˇãd
;

82 *
_dïªˇãd_by
;

84 
AST_LIST_ENTRY
(
a°_˛i_íåy
Ë
li°
;

103 *
a°_˛i_com∂ëe
(c⁄° *
w‹d
, *c⁄° 
choi˚s
[], 
pos
);

109 
a°_˛i_comm™d
(
fd
, c⁄° *
s
);

117 
a°_˛i_comm™d_mu…ùÀ
(
fd
, 
size_t
 
size
, c⁄° *
s
);

124 
a°_˛i_ªgi°î
(
a°_˛i_íåy
 *
e
);

131 
a°_˛i_ªgi°î_mu…ùÀ
(
a°_˛i_íåy
 *
e
, 
Àn
);

139 
a°_˛i_uƒegi°î
(
a°_˛i_íåy
 *
e
);

146 
a°_˛i_uƒegi°î_mu…ùÀ
(
a°_˛i_íåy
 *
e
, 
Àn
);

152 *
a°_˛i_gíî©‹
(const *, const *, );

154 
a°_˛i_gíî©‹numm©ches
(const *, const *);

167 **
a°_˛i_com∂ëi⁄_m©ches
(const *, const *);

177 *
a°_com∂ëe_ch™√ls
(c⁄° *
löe
, c⁄° *
w‹d
, 
pos
, 
°©e
, 
Ωos
);

179 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

	@/usr/include/asterisk/config.h

23 #i‚de‡
_ASTERISK_CONFIG_H


24 
	#_ASTERISK_CONFIG_H


	)

26 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

30 
	~<°d¨g.h
>

32 
a°_c⁄fig
;

34 
a°_ˇãg‹y
;

36 
	sa°_v¨übÀ
 {

37 *
«me
;

38 *
vÆue
;

39 
löío
;

40 
obje˘
;

41 
bœnklöes
;

42 
a°_commít
 *
¥ecommíts
;

43 
a°_commít
 *
ßmñöe
;

44 
a°_v¨übÀ
 *
√xt
;

45 
°uff
[0];

48 
a°_c⁄fig
 *
	tc⁄fig_lﬂd_func
(c⁄° *
	td©aba£
, c⁄° *
	tèbÀ
, c⁄° *
	tc⁄figfûe
, 
	ta°_c⁄fig
 *
	tc⁄fig
, 
	twôhcommíts
);

49 
a°_v¨übÀ
 *
	tªÆtime_v¨_gë
(c⁄° *
	td©aba£
, c⁄° *
	tèbÀ
, 
	tva_li°
 
	t≠
);

50 
a°_c⁄fig
 *
	tªÆtime_mu…i_gë
(c⁄° *
	td©aba£
, c⁄° *
	tèbÀ
, 
	tva_li°
 
	t≠
);

51 
	tªÆtime_upd©e
(c⁄° *
	td©aba£
, c⁄° *
	tèbÀ
, c⁄° *
	tkeyfõld
, c⁄° *
	títôy
, 
	tva_li°
 
	t≠
);

53 
	sa°_c⁄fig_ígöe
 {

54 *
«me
;

55 
c⁄fig_lﬂd_func
 *
lﬂd_func
;

56 
ªÆtime_v¨_gë
 *
ªÆtime_func
;

57 
ªÆtime_mu…i_gë
 *
ªÆtime_mu…i_func
;

58 
ªÆtime_upd©e
 *
upd©e_func
;

59 
a°_c⁄fig_ígöe
 *
√xt
;

68 
a°_c⁄fig
 *
a°_c⁄fig_lﬂd
(c⁄° *
fûíame
);

69 
a°_c⁄fig
 *
a°_c⁄fig_lﬂd_wôh_commíts
(c⁄° *
fûíame
);

76 
a°_c⁄fig_de°roy
(
a°_c⁄fig
 *
c⁄fig
);

84 
a°_v¨übÀ
 *
a°_ˇãg‹y_roŸ
(
a°_c⁄fig
 *
c⁄fig
, *
ˇt
);

93 *
a°_ˇãg‹y_brow£
(
a°_c⁄fig
 *
c⁄fig
, c⁄° *
¥ev
);

101 
a°_v¨übÀ
 *
a°_v¨übÀ_brow£
(c⁄° 
a°_c⁄fig
 *
c⁄fig
, c⁄° *
ˇãg‹y
);

111 c⁄° *
a°_v¨übÀ_ªåõve
(c⁄° 
a°_c⁄fig
 *
c⁄fig
, c⁄° *
ˇãg‹y
, c⁄° *
v¨übÀ
);

120 
a°_ˇãg‹y
 *
a°_ˇãg‹y_gë
(c⁄° 
a°_c⁄fig
 *
c⁄fig
, c⁄° *
ˇãg‹y_«me
);

129 
a°_ˇãg‹y_exi°
(c⁄° 
a°_c⁄fig
 *
c⁄fig
, c⁄° *
ˇãg‹y_«me
);

138 
a°_v¨übÀ
 *
a°_lﬂd_ªÆtime
(c⁄° *
Ámûy
, ...);

148 
a°_c⁄fig
 *
a°_lﬂd_ªÆtime_mu…õ¡ry
(c⁄° *
Ámûy
, ...);

157 
a°_upd©e_ªÆtime
(c⁄° *
Ámûy
, c⁄° *
keyfõld
, c⁄° *
lookup
, ...);

163 
a°_check_ªÆtime
(c⁄° *
Ámûy
);

169 
a°_v¨übÀs_de°roy
(
a°_v¨übÀ
 *
v¨
);

172 
a°_c⁄fig_ígöe_ªgi°î
(
a°_c⁄fig_ígöe
 *
√wc⁄fig
);

175 
a°_c⁄fig_ígöe_dîegi°î
(
a°_c⁄fig_ígöe
 *
dñ
);

177 
ªgi°î_c⁄fig_˛i
();

178 
ªad_c⁄fig_m≠s
();

180 
a°_c⁄fig
 *
a°_c⁄fig_√w
();

181 
a°_ˇãg‹y
 *
a°_c⁄fig_gë_cuºít_ˇãg‹y
(c⁄° 
a°_c⁄fig
 *
cfg
);

182 
a°_c⁄fig_£t_cuºít_ˇãg‹y
(
a°_c⁄fig
 *
cfg
, c⁄° 
a°_ˇãg‹y
 *
ˇt
);

183 c⁄° *
a°_c⁄fig_›ti⁄
(
a°_c⁄fig
 *
cfg
, c⁄° *
ˇt
, c⁄° *
v¨
);

185 
a°_ˇãg‹y
 *
a°_ˇãg‹y_√w
(c⁄° *
«me
);

186 
a°_ˇãg‹y_≠≥nd
(
a°_c⁄fig
 *
c⁄fig
, 
a°_ˇãg‹y
 *
ˇt
);

187 
a°_ˇãg‹y_dñëe
(
a°_c⁄fig
 *
cfg
, *
ˇãg‹y
);

188 
a°_ˇãg‹y_de°roy
(
a°_ˇãg‹y
 *
ˇt
);

189 
a°_v¨übÀ
 *
a°_ˇãg‹y_dëach_v¨übÀs
(
a°_ˇãg‹y
 *
ˇt
);

190 
a°_ˇãg‹y_ª«me
(
a°_ˇãg‹y
 *
ˇt
, c⁄° *
«me
);

192 
a°_v¨übÀ
 *
a°_v¨übÀ_√w
(c⁄° *
«me
, c⁄° *
vÆue
);

193 
a°_v¨übÀ_≠≥nd
(
a°_ˇãg‹y
 *
ˇãg‹y
, 
a°_v¨übÀ
 *
v¨übÀ
);

194 
a°_v¨übÀ_dñëe
(
a°_ˇãg‹y
 *
ˇãg‹y
, *
v¨übÀ
, *
m©ch
);

195 
a°_v¨übÀ_upd©e
(
a°_ˇãg‹y
 *
ˇãg‹y
, c⁄° *
v¨übÀ
,

196 c⁄° *
vÆue
, c⁄° *
m©ch
, 
obje˘
);

198 
c⁄fig_ãxt_fûe_ßve
(c⁄° *
fûíame
, c⁄° 
a°_c⁄fig
 *
cfg
, c⁄° *
gíî©‹
);

200 
a°_c⁄fig
 *
a°_c⁄fig_öã∫Æ_lﬂd
(c⁄° *
c⁄figfûe
, a°_c⁄fig *
cfg
, 
wôhcommíts
);

202 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

	@/usr/include/asterisk/dsp.h

23 #i‚de‡
_ASTERISK_DSP_H


24 
	#_ASTERISK_DSP_H


	)

26 
	#DSP_FEATURE_SILENCE_SUPPRESS
 (1 << 0)

	)

27 
	#DSP_FEATURE_BUSY_DETECT
 (1 << 1)

	)

28 
	#DSP_FEATURE_DTMF_DETECT
 (1 << 3)

	)

29 
	#DSP_FEATURE_FAX_DETECT
 (1 << 4)

	)

31 
	#DSP_DIGITMODE_DTMF
 0

	)

32 
	#DSP_DIGITMODE_MF
 1

	)

34 
	#DSP_DIGITMODE_NOQUELCH
 (1 << 8Ë

	)

35 
	#DSP_DIGITMODE_MUTECONF
 (1 << 9Ë

	)

36 
	#DSP_DIGITMODE_MUTEMAX
 (1 << 10Ë

	)

37 
	#DSP_DIGITMODE_RELAXDTMF
 (1 << 11Ë

	)

39 
	#DSP_PROGRESS_TALK
 (1 << 16Ë

	)

40 
	#DSP_PROGRESS_RINGING
 (1 << 17Ë

	)

41 
	#DSP_PROGRESS_BUSY
 (1 << 18Ë

	)

42 
	#DSP_PROGRESS_CONGESTION
 (1 << 19Ë

	)

43 
	#DSP_FEATURE_CALL_PROGRESS
 (
DSP_PROGRESS_TALK
 | 
DSP_PROGRESS_RINGING
 | 
DSP_PROGRESS_BUSY
 | 
DSP_PROGRESS_CONGESTION
)

	)

45 
	#DSP_TONE_STATE_SILENCE
 0

	)

46 
	#DSP_TONE_STATE_RINGING
 1

	)

47 
	#DSP_TONE_STATE_DIALTONE
 2

	)

48 
	#DSP_TONE_STATE_TALKING
 3

	)

49 
	#DSP_TONE_STATE_BUSY
 4

	)

50 
	#DSP_TONE_STATE_SPECIAL1
 5

	)

51 
	#DSP_TONE_STATE_SPECIAL2
 6

	)

52 
	#DSP_TONE_STATE_SPECIAL3
 7

	)

53 
	#DSP_TONE_STATE_HUNGUP
 8

	)

55 
	ga°_d•
;

57 
a°_d•
 *
a°_d•_√w
();

58 
a°_d•_‰ì
(
a°_d•
 *
d•
);

61 
a°_d•_£t_thªshﬁd
(
a°_d•
 *
d•
, 
thªshﬁd
);

64 
a°_d•_£t_busy_cou¡
(
a°_d•
 *
d•
, 
ˇdí˚s
);

67 
a°_d•_£t_busy_∑âîn
(
a°_d•
 *
d•
, 
t⁄ñígth
, 
quõéígth
);

70 
a°_d•_ˇŒ_¥ogªss
(
a°_d•
 *
d•
, 
a°_‰ame
 *
öf
);

73 
a°_d•_£t_ˇŒ_¥ogªss_z⁄e
(
a°_d•
 *
d•
, *
z⁄e
);

77 
a°_‰ame
 *
a°_d•_¥o˚ss
(
a°_ch™√l
 *
ch™
, 
a°_d•
 *
d•
, a°_‰amê*
öf
);

81 
a°_d•_sûí˚
(
a°_d•
 *
d•
, 
a°_‰ame
 *
f
, *
tŸÆsûí˚
);

85 
a°_d•_busydëe˘
(
a°_d•
 *
d•
);

88 
a°_d•_digôdëe˘
(
a°_d•
 *
d•
, 
a°_‰ame
 *
f
);

91 
a°_d•_ª£t
(
a°_d•
 *
d•
);

94 
a°_d•_digôª£t
(
a°_d•
 *
d•
);

97 
a°_d•_£t_„©uªs
(
a°_d•
 *
d•
, 
„©uªs
);

100 
a°_d•_gëdigôs
(
a°_d•
 *
d•
, *
buf
, 
max
);

103 
a°_d•_digômode
(
a°_d•
 *
d•
, 
digômode
);

106 
a°_d•_gë_t°©e
(
a°_d•
 *
d•
);

109 
a°_d•_gë_tcou¡
(
a°_d•
 *
d•
);

122 
a°_d•_‰ame_‰ìd
(
a°_‰ame
 *
‰
);

	@/usr/include/asterisk/endian.h

23 #i‚de‡
_ASTERISK_ENDIAN_H


24 
	#_ASTERISK_ENDIAN_H


	)

30 
	~"a°îisk/com∑t.h
"

32 #i‚de‡
__BYTE_ORDER


33 #ifde‡
__löux__


34 
	~<ídün.h
>

35 #ñi‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__FªeBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__APPLE__
)

36 
	~<machöe/ídün.h
>

37 
	#__BYTE_ORDER
 
BYTE_ORDER


	)

38 
	#__LITTLE_ENDIAN
 
LITTLE_ENDIAN


	)

39 
	#__BIG_ENDIAN
 
BIG_ENDIAN


	)

41 #ifde‡
__LITTLE_ENDIAN__


42 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

45 #i‡
deföed
(
i386
Ë|| deföed(
__i386__
)

46 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

49 #i‡
deföed
(
sun
Ë&& deföed(
unix
Ë&& deföed(
•¨c
)

50 
	#__BYTE_ORDER
 
__BIG_ENDIAN


	)

57 #i‚de‡
__BYTE_ORDER


58 #îr‹ 
Nìd
 
to
 
know
 
ídü√ss


	@/usr/include/asterisk/frame.h

25 #i‚de‡
_ASTERISK_FRAME_H


26 
	#_ASTERISK_FRAME_H


	)

28 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

32 
	~<sys/ty≥s.h
>

33 
	~<sys/time.h
>

35 
	~"a°îisk/compûî.h
"

36 
	~"a°îisk/ídün.h
"

37 
	~"a°îisk/lökedli°s.h
"

39 
	sa°_codec_¥ef
 {

40 
‹dî
[32];

41 
‰amög
[32];

98 
	ea°_‰ame_ty≥
 {

100 
AST_FRAME_DTMF_END
 = 1,

102 
AST_FRAME_VOICE
,

104 
AST_FRAME_VIDEO
,

106 
AST_FRAME_CONTROL
,

108 
AST_FRAME_NULL
,

110 
AST_FRAME_IAX
,

112 
AST_FRAME_TEXT
,

114 
AST_FRAME_IMAGE
,

116 
AST_FRAME_HTML
,

119 
AST_FRAME_CNG
,

121 
AST_FRAME_MODEM
,

123 
AST_FRAME_DTMF_BEGIN
,

125 
	#AST_FRAME_DTMF
 
AST_FRAME_DTMF_END


	)

129 
AST_FRFLAG_HAS_TIMING_INFO
 = (1 << 0),

133 
AST_FRFLAG_FROM_TRANSLATOR
 = (1 << 1),

137 
AST_FRFLAG_FROM_DSP
 = (1 << 2),

142 
	sa°_‰ame
 {

144 
a°_‰ame_ty≥
 
‰amëy≥
;

146 
sub˛ass
;

148 
d©Æí
;

150 
ßm∂es
;

152 
mÆlocd
;

154 
size_t
 
mÆlocd_hdr_Àn
;

156 
off£t
;

158 c⁄° *
§c
;

160 *
d©a
;

162 
timevÆ
 
dñivîy
;

164 
AST_LIST_ENTRY
(
a°_‰ame
Ë
‰ame_li°
;

166 
Êags
;

168 
ts
;

170 
Àn
;

172 
£qno
;

183 
	#AST_FRAME_SET_BUFFER
(
‰
, 
_ba£
, 
_ofs
, 
_d©Æí
) \

185 (
‰
)->
d©a
 = (*)
_ba£
 + (
_ofs
); \

186 (
‰
)->
off£t
 = (
_ofs
); \

187 (
‰
)->
d©Æí
 = (
_d©Æí
); \

188 }

	)

192 
a°_‰ame
 
a°_nuŒ_‰ame
;

194 
	#AST_FRIENDLY_OFFSET
 64

	)

197 
	#AST_MIN_OFFSET
 32

	)

200 
	#AST_MALLOCD_HDR
 (1 << 0)

	)

202 
	#AST_MALLOCD_DATA
 (1 << 1)

	)

204 
	#AST_MALLOCD_SRC
 (1 << 2)

	)

208 
	#AST_MODEM_T38
 1

	)

210 
	#AST_MODEM_V150
 2

	)

214 
	#AST_HTML_URL
 1

	)

216 
	#AST_HTML_DATA
 2

	)

218 
	#AST_HTML_BEGIN
 4

	)

220 
	#AST_HTML_END
 8

	)

222 
	#AST_HTML_LDCOMPLETE
 16

	)

224 
	#AST_HTML_NOSUPPORT
 17

	)

226 
	#AST_HTML_LINKURL
 18

	)

228 
	#AST_HTML_UNLINK
 19

	)

230 
	#AST_HTML_LINKREJECT
 20

	)

234 
	#AST_FORMAT_G723_1
 (1 << 0)

	)

236 
	#AST_FORMAT_GSM
 (1 << 1)

	)

238 
	#AST_FORMAT_ULAW
 (1 << 2)

	)

240 
	#AST_FORMAT_ALAW
 (1 << 3)

	)

242 
	#AST_FORMAT_G726_AAL2
 (1 << 4)

	)

244 
	#AST_FORMAT_ADPCM
 (1 << 5)

	)

246 
	#AST_FORMAT_SLINEAR
 (1 << 6)

	)

248 
	#AST_FORMAT_LPC10
 (1 << 7)

	)

250 
	#AST_FORMAT_G729A
 (1 << 8)

	)

252 
	#AST_FORMAT_SPEEX
 (1 << 9)

	)

254 
	#AST_FORMAT_ILBC
 (1 << 10)

	)

256 
	#AST_FORMAT_G726
 (1 << 11)

	)

258 
	#AST_FORMAT_G722
 (1 << 12)

	)

260 
	#AST_FORMAT_MAX_AUDIO
 (1 << 15)

	)

262 
	#AST_FORMAT_AUDIO_MASK
 ((1 << 16)-1)

	)

264 
	#AST_FORMAT_JPEG
 (1 << 16)

	)

266 
	#AST_FORMAT_PNG
 (1 << 17)

	)

268 
	#AST_FORMAT_H261
 (1 << 18)

	)

270 
	#AST_FORMAT_H263
 (1 << 19)

	)

272 
	#AST_FORMAT_H263_PLUS
 (1 << 20)

	)

274 
	#AST_FORMAT_H264
 (1 << 21)

	)

276 
	#AST_FORMAT_MAX_VIDEO
 (1 << 24)

	)

277 
	#AST_FORMAT_VIDEO_MASK
 (((1 << 25)-1Ë& ~(
AST_FORMAT_AUDIO_MASK
))

	)

279 
	ea°_c⁄åﬁ_‰ame_ty≥
 {

280 
	gAST_CONTROL_HANGUP
 = 1,

281 
	gAST_CONTROL_RING
 = 2,

282 
	gAST_CONTROL_RINGING
 = 3,

283 
	gAST_CONTROL_ANSWER
 = 4,

284 
	gAST_CONTROL_BUSY
 = 5,

285 
	gAST_CONTROL_TAKEOFFHOOK
 = 6,

286 
	gAST_CONTROL_OFFHOOK
 = 7,

287 
	gAST_CONTROL_CONGESTION
 = 8,

288 
	gAST_CONTROL_FLASH
 = 9,

289 
	gAST_CONTROL_WINK
 = 10,

290 
	gAST_CONTROL_OPTION
 = 11,

291 
	gAST_CONTROL_RADIO_KEY
 = 12,

292 
	gAST_CONTROL_RADIO_UNKEY
 = 13,

293 
	gAST_CONTROL_PROGRESS
 = 14,

294 
	gAST_CONTROL_PROCEEDING
 = 15,

295 
	gAST_CONTROL_HOLD
 = 16,

296 
	gAST_CONTROL_UNHOLD
 = 17,

297 
	gAST_CONTROL_VIDUPDATE
 = 18,

298 
	gAST_CONTROL_SRCUPDATE
 = 20,

301 
	#AST_SMOOTHER_FLAG_G729
 (1 << 0)

	)

302 
	#AST_SMOOTHER_FLAG_BE
 (1 << 1)

	)

305 
	#AST_OPTION_FLAG_REQUEST
 0

	)

306 
	#AST_OPTION_FLAG_ACCEPT
 1

	)

307 
	#AST_OPTION_FLAG_REJECT
 2

	)

308 
	#AST_OPTION_FLAG_QUERY
 4

	)

309 
	#AST_OPTION_FLAG_ANSWER
 5

	)

310 
	#AST_OPTION_FLAG_WTF
 6

	)

314 
	#AST_OPTION_TONE_VERIFY
 1

	)

317 
	#AST_OPTION_TDD
 2

	)

320 
	#AST_OPTION_RELAXDTMF
 3

	)

323 
	#AST_OPTION_AUDIO_MODE
 4

	)

331 
	#AST_OPTION_TXGAIN
 5

	)

339 
	#AST_OPTION_RXGAIN
 6

	)

342 
	#AST_OPTION_OPRMODE
 7

	)

345 
	#AST_OPTION_ECHOCAN
 8

	)

347 
	s›rmode
 {

348 
a°_ch™√l
 *
	g≥î
;

349 
	gmode
;

352 
	sa°_›ti⁄_hódî
 {

354 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


355 
uöt16_t
 
	gÊag
:3;

356 
uöt16_t
 
	g›ti⁄
:13;

358 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


359 
uöt16_t
 
	g›ti⁄
:13;

360 
uöt16_t
 
	gÊag
:3;

362 #îr‹ 
Byã
 
‹dî
 
nŸ
 
deföed


365 
uöt8_t
 
	gd©a
[0];

370 
	sa°_f‹m©_li°
 {

371 
	gvisibÀ
;

372 
	gbôs
;

373 *
	g«me
;

374 *
	gdesc
;

375 
	g‰_Àn
;

376 
	gmö_ms
;

377 
	gmax_ms
;

378 
	göc_ms
;

379 
	gdef_ms
;

380 
	gÊags
;

381 
	gcur_ms
;

392 
a°_‰ame
 *
a°_‰Æloc
(*
sour˚
, 
Àn
);

401 
a°_‰ame_‰ì
(
a°_‰ame
 *
‰
, 
ˇche
);

403 
	#a°_‰‰ì
(
‰
Ë
	`a°_‰ame_‰ì
(‰, 1)

	)

413 
a°_‰ame
 *
a°_‰isﬁ©e
(a°_‰amê*
‰
);

420 
a°_‰ame
 *
a°_‰dup
(c⁄° a°_‰amê*
‰
);

422 
a°_sw≠c›y_ßm∂es
(*
d°
, c⁄° *
§c
, 
ßm∂es
);

426 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


427 
	#a°_‰ame_byãsw≠_À
(
‰
Ëdÿ{ ; } 0)

	)

428 
	#a°_‰ame_byãsw≠_be
(
‰
Ëdÿ{ 
a°_‰ame
 *
__f
 = (‰); 
	`a°_sw≠c›y_ßm∂es
(__f->
d©a
, __f->d©a, __f->
ßm∂es
); } 0)

	)

430 
	#a°_‰ame_byãsw≠_À
(
‰
Ëdÿ{ 
a°_‰ame
 *
__f
 = (‰); 
	`a°_sw≠c›y_ßm∂es
(__f->
d©a
, __f->d©a, __f->
ßm∂es
); } 0)

	)

431 
	#a°_‰ame_byãsw≠_be
(
‰
Ëdÿ{ ; } 0)

	)

439 * 
a°_gëf‹m©«me
(
f‹m©
);

449 * 
a°_gëf‹m©«me_mu…ùÀ
(*
buf
, 
size_t
 
size
, 
f‹m©
);

456 
a°_gëf‹m©by«me
(c⁄° *
«me
);

463 *
a°_codec2°r
(
codec
);

465 
	ga°_smoŸhî
;

467 
a°_f‹m©_li°
 *
a°_gë_f‹m©_li°_ödex
(
ödex
);

468 
a°_f‹m©_li°
 *
a°_gë_f‹m©_li°
(
size_t
 *
size
);

469 
a°_smoŸhî
 *
a°_smoŸhî_√w
(
byãs
);

470 
a°_smoŸhî_£t_Êags
(
a°_smoŸhî
 *
smoŸhî
, 
Êags
);

471 
a°_smoŸhî_gë_Êags
(
a°_smoŸhî
 *
smoŸhî
);

472 
a°_smoŸhî_ã°_Êag
(
a°_smoŸhî
 *
s
, 
Êag
);

473 
a°_smoŸhî_‰ì
(
a°_smoŸhî
 *
s
);

474 
a°_smoŸhî_ª£t
(
a°_smoŸhî
 *
s
, 
byãs
);

475 
__a°_smoŸhî_„ed
(
a°_smoŸhî
 *
s
, 
a°_‰ame
 *
f
, 
sw≠
);

476 
a°_‰ame
 *
a°_smoŸhî_ªad
(
a°_smoŸhî
 *
s
);

477 
	#a°_smoŸhî_„ed
(
s
,
f
Ë
	`__a°_smoŸhî_„ed
(s, f, 0)

	)

478 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


479 
	#a°_smoŸhî_„ed_be
(
s
,
f
Ë
	`__a°_smoŸhî_„ed
(s, f, 1)

	)

480 
	#a°_smoŸhî_„ed_À
(
s
,
f
Ë
	`__a°_smoŸhî_„ed
(s, f, 0)

	)

482 
	#a°_smoŸhî_„ed_be
(
s
,
f
Ë
	`__a°_smoŸhî_„ed
(s, f, 0)

	)

483 
	#a°_smoŸhî_„ed_À
(
s
,
f
Ë
	`__a°_smoŸhî_„ed
(s, f, 1)

	)

486 
a°_‰ame_dump
(c⁄° *
«me
, 
a°_‰ame
 *
f
, *
¥efix
);

502 
a°_codec_¥ef_öô
(
a°_codec_¥ef
 *
¥ef
);

505 
a°_codec_¥ef_ödex
(
a°_codec_¥ef
 *
¥ef
, 
ödex
);

508 
a°_codec_¥ef_ªmove
(
a°_codec_¥ef
 *
¥ef
, 
f‹m©
);

512 
a°_codec_¥ef_≠≥nd
(
a°_codec_¥ef
 *
¥ef
, 
f‹m©
);

516 
a°_codec_¥ef_¥ïíd
(
a°_codec_¥ef
 *
¥ef
, 
f‹m©
, 
⁄ly_if_exi°ög
);

521 
a°_codec_choo£
(
a°_codec_¥ef
 *
¥ef
, 
f‹m©s
, 
föd_be°
);

525 
a°_codec_¥ef_£tsize
(
a°_codec_¥ef
 *
¥ef
, 
f‹m©
, 
‰amems
);

529 
a°_f‹m©_li°
 
a°_codec_¥ef_gësize
(
a°_codec_¥ef
 *
¥ef
, 
f‹m©
);

535 
a°_∑r£_Ælow_dißŒow
(
a°_codec_¥ef
 *
¥ef
, *
mask
, c⁄° *
li°
, 
Ælowög
);

538 
a°_codec_¥ef_°rög
(
a°_codec_¥ef
 *
¥ef
, *
buf
, 
size_t
 
size
);

541 
a°_codec_¥ef_c⁄vît
(
a°_codec_¥ef
 *
¥ef
, *
buf
, 
size_t
 
size
, 
right
);

544 
a°_codec_gë_ßm∂es
(
a°_‰ame
 *
f
);

547 
a°_codec_gë_Àn
(
f‹m©
, 
ßm∂es
);

550 
a°_‰ame
 *
a°_‰ame_íqueue
(a°_‰amê*
hód
, a°_‰amê*
f
, 
maxÀn
, 
du≥
);

554 
ölöe
 
a°_codec_öãΩ_Àn
(
f‹m©
)

556  (
	gf‹m©
 =
AST_FORMAT_ILBC
) ? 30 : 20;

565 
a°_‰ame_adju°_vﬁume
(
a°_‰ame
 *
f
, 
adju°mít
);

576 
a°_‰ame_¶öór_sum
(
a°_‰ame
 *
f1
, a°_‰amê*
f2
);

581 
f‹˚_ölöe
 
a°_f‹m©_øã
(
f‹m©
)

583 i‡(
	gf‹m©
 =
AST_FORMAT_G722
)

589 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

	@/usr/include/asterisk/lock.h

45 #i‚de‡
_ASTERISK_LOCK_H


46 
	#_ASTERISK_LOCK_H


	)

48 
	~<±hªad.h
>

49 
	~<√tdb.h
>

50 
	~<time.h
>

51 
	~<sys/∑øm.h
>

53 
	~"a°îisk/loggî.h
"

58 #i‚def 
HAVE_MTX_PROFILE


59 
	#__MTX_PROF
(
a
Ë 
	`±hªad_muãx_lock
(◊))

	)

61 
	#__MTX_PROF
(
a
) do { \

62 
i
; \

64 
	`a°_m¨k
(
mtx_¥of
, 1); \

65 
i
 = 
	`±hªad_muãx_åylock
((
a
)); \

66 
	`a°_m¨k
(
mtx_¥of
, 0); \

67 i‡(!
i
) \

68  
i
; \

70  
	`±hªad_muãx_lock
((
a
)); \

71 } 0)

	)

74 
	#AST_PTHREADT_NULL
 (
±hªad_t
Ë-1

	)

75 
	#AST_PTHREADT_STOP
 (
±hªad_t
Ë-2

	)

77 #i‡
deföed
(
SOLARIS
Ë|| deföed(
BSD
)

78 
	#AST_MUTEX_INIT_W_CONSTRUCTORS


	)

83 #i‡
deföed
(
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
)

84 
	#PTHREAD_MUTEX_INIT_VALUE
 
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP


	)

85 
	#AST_MUTEX_KIND
 
PTHREAD_MUTEX_RECURSIVE_NP


	)

87 
	#PTHREAD_MUTEX_INIT_VALUE
 
PTHREAD_MUTEX_INITIALIZER


	)

88 
	#AST_MUTEX_KIND
 
PTHREAD_MUTEX_RECURSIVE


	)

91 #ifde‡
DEBUG_THREADS


93 
	#__a°_muãx_loggî
(...Ëdÿ{ i‡(
ˇ∆og
Ë
	`a°_log
(
LOG_ERROR
, 
__VA_ARGS__
); 
	`Ârötf
(
°dîr
, __VA_ARGS__); } 0)

	)

95 #ifde‡
THREAD_CRASH


96 
	#DO_THREAD_CRASH
 dÿ{ *((*)(0)Ë1; } 0)

	)

98 
	#DO_THREAD_CRASH
 dÿ{ } 0)

	)

101 
	~<î∫o.h
>

102 
	~<°rög.h
>

103 
	~<°dio.h
>

104 
	~<uni°d.h
>

106 
	#AST_MUTEX_INIT_VALUE
 { 
PTHREAD_MUTEX_INIT_VALUE
, 1, { 
NULL
 }, { 0 }, 0, { NULL }, { 0 }, PTHREAD_MUTEX_INIT_VALUE }

	)

107 
	#AST_MUTEX_INIT_VALUE_NOTRACKING
 \

108 { 
PTHREAD_MUTEX_INIT_VALUE
, 0, { 
NULL
 }, { 0 }, 0, { NULL }, { 0 }, PTHREAD_MUTEX_INIT_VALUE }

	)

110 
	#AST_MAX_REENTRANCY
 10

	)

112 
	sa°_muãx_öfo
 {

113 
±hªad_muãx_t
 
	mmuãx
;

115 
	måack
:1;

116 c⁄° *
	mfûe
[
AST_MAX_REENTRANCY
];

117 
	mlöío
[
AST_MAX_REENTRANCY
];

118 
	mªíå™cy
;

119 c⁄° *
	mfunc
[
AST_MAX_REENTRANCY
];

120 
±hªad_t
 
	mthªad
[
AST_MAX_REENTRANCY
];

121 
±hªad_muãx_t
 
	mªíå_muãx
;

124 
a°_muãx_öfo
 
	ta°_muãx_t
;

126 
±hªad_c⁄d_t
 
	ta°_c⁄d_t
;

128 
±hªad_muãx_t
 
	gem±y_muãx
;

130 
	ea°_lock_ty≥
 {

131 
	mAST_MUTEX
,

132 
	mAST_RDLOCK
,

133 
	mAST_WRLOCK
,

144 #i‡!
deföed
(
LOW_MEMORY
)

145 
a°_°‹e_lock_öfo
(
a°_lock_ty≥
 
ty≥
, c⁄° *
fûíame
,

146 
löe_num
, c⁄° *
func
, c⁄° *
lock_«me
, *
lock_addr
);

148 
	#a°_°‹e_lock_öfo
(
I
,
DONT
,
CARE
,
ABOUT
,
THE
,
PARAMETERS
)

	)

155 #i‡!
deföed
(
LOW_MEMORY
)

156 
a°_m¨k_lock_acquúed
(*
lock_addr
);

158 
	#a°_m¨k_lock_acquúed
(
ign‹e
)

	)

164 #i‡!
deföed
(
LOW_MEMORY
)

165 
a°_m¨k_lock_Áûed
(*
lock_addr
);

167 
	#a°_m¨k_lock_Áûed
(
ign‹e
)

	)

176 #i‡!
deföed
(
LOW_MEMORY
)

177 
a°_ªmove_lock_öfo
(*
lock_addr
);

179 
	#a°_ªmove_lock_öfo
(
ign‹e
)

	)

188 #i‡!
deföed
(
LOW_MEMORY
)

189 
a°_föd_lock_öfo
(*
lock_addr
, *
fûíame
, 
size_t
 
fûíame_size
, *
löío
, *
func
, size_à
func_size
, *
muãx_«me
, size_à
muãx_«me_size
);

191 
	#a°_föd_lock_öfo
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
Ë-1

	)

200 
	#DEADLOCK_AVOIDANCE
(
lock
) \

202 
__fûíame
[80], 
__func
[80], 
__muãx_«me
[80]; \

203 
__löío
; \

204 
__ªs
 = 
	`a°_föd_lock_öfo
(
lock
, 
__fûíame
, (__fûíame), &
__löío
, 
__func
, (__func), 
__muãx_«me
, (__mutex_name)); \

205 
	`a°_muãx_u∆ock
(
lock
); \

206 
	`u¶ìp
(1); \

207 i‡(
__ªs
 < 0) { \

208 
	`a°_muãx_lock
(
lock
); \

210 
	`__a°_±hªad_muãx_lock
(
__fûíame
, 
__löío
, 
__func
, 
__muãx_«me
, 
lock
); \

212 } 0)

	)

214 
__©åibuã__
((
c⁄°ru˘‹
)Ë
	$öô_em±y_muãx
()

216 
	`mem£t
(&
em±y_muãx
, 0, (empty_mutex));

217 
	}
}

219 
ölöe
 
	$a°_ªíå™cy_lock
(
a°_muãx_t
 *
p_a°_muãx
)

221 
	`±hªad_muãx_lock
(&
p_a°_muãx
->
ªíå_muãx
);

222 
	}
}

224 
ölöe
 
	$a°_ªíå™cy_u∆ock
(
a°_muãx_t
 *
p_a°_muãx
)

226 
	`±hªad_muãx_u∆ock
(&
p_a°_muãx
->
ªíå_muãx
);

227 
	}
}

229 
ölöe
 
	$a°_ªíå™cy_öô
(
a°_muãx_t
 *
p_a°_muãx
)

231 
i
;

232 
±hªad_muãx©å_t
 
ªíå_©å
;

234 
i
 = 0; i < 
AST_MAX_REENTRANCY
; i++) {

235 
p_a°_muãx
->
fûe
[
i
] = 
NULL
;

236 
p_a°_muãx
->
löío
[
i
] = 0;

237 
p_a°_muãx
->
func
[
i
] = 
NULL
;

238 
p_a°_muãx
->
thªad
[
i
] = 0;

241 
p_a°_muãx
->
ªíå™cy
 = 0;

243 
	`±hªad_muãx©å_öô
(&
ªíå_©å
);

244 
	`±hªad_muãx©å_£ây≥
(&
ªíå_©å
, 
AST_MUTEX_KIND
);

245 
	`±hªad_muãx_öô
(&
p_a°_muãx
->
ªíå_muãx
, &
ªíå_©å
);

246 
	`±hªad_muãx©å_de°roy
(&
ªíå_©å
);

247 
	}
}

249 
ölöe
 
	$dñëe_ªíå™cy_cs
(
a°_muãx_t
 * 
p_a°_muãx
)

251 
	`±hªad_muãx_de°roy
(&
p_a°_muãx
->
ªíå_muãx
);

252 
	}
}

254 
ölöe
 
	$__a°_±hªad_muãx_öô
(
åack
, c⁄° *
fûíame
, 
löío
, c⁄° *
func
,

255 c⁄° *
muãx_«me
, 
a°_muãx_t
 *
t
)

257 
ªs
;

258 
±hªad_muãx©å_t
 
©å
;

260 #ifde‡
AST_MUTEX_INIT_W_CONSTRUCTORS


262 i‡((
t
->
muãx
Ë!((
±hªad_muãx_t
Ë
PTHREAD_MUTEX_INITIALIZER
)) {

274 
	`a°_ªíå™cy_öô
(
t
);

275 
t
->
åack
 =Årack;

277 
	`±hªad_muãx©å_öô
(&
©å
);

278 
	`±hªad_muãx©å_£ây≥
(&
©å
, 
AST_MUTEX_KIND
);

280 
ªs
 = 
	`±hªad_muãx_öô
(&
t
->
muãx
, &
©å
);

281 
	`±hªad_muãx©å_de°roy
(&
©å
);

282  
ªs
;

283 
	}
}

285 
	#a°_muãx_öô
(
pmuãx
Ë
	`__a°_±hªad_muãx_öô
(1, 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #pmuãx,Ömuãx)

	)

286 
	#a°_muãx_öô_nŸøckög
(
pmuãx
) \

287 
	`__a°_±hªad_muãx_öô
(0, 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #pmuãx, 
pmuãx
)

	)

289 
ölöe
 
	$__a°_±hªad_muãx_de°roy
(c⁄° *
fûíame
, 
löío
, c⁄° *
func
,

290 c⁄° *
muãx_«me
, 
a°_muãx_t
 *
t
)

292 
ªs
;

293 
ˇ∆og
 = 
	`°rcmp
(
fûíame
, "loggî.c"Ë& 
t
->
åack
;

295 #ifde‡
AST_MUTEX_INIT_W_CONSTRUCTORS


296 i‡((
t
->
muãx
Ë=((
±hªad_muãx_t
Ë
PTHREAD_MUTEX_INITIALIZER
)) {

303 
	`__a°_muãx_loggî
("%sÜine %d (%s): NOTICE: mutex '%s' is uninitialized.\n",

304 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

309 
ªs
 = 
	`±hªad_muãx_åylock
(&
t
->
muãx
);

310 
ªs
) {

312 
	`±hªad_muãx_u∆ock
(&
t
->
muãx
);

314 
EINVAL
:

315 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error:áttemptÅo destroy invalid mutex '%s'.\n",

316 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

318 
EBUSY
:

319 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error:áttemptÅo destroyÜocked mutex '%s'.\n",

320 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

321 
	`a°_ªíå™cy_lock
(
t
);

322 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error: '%s' wasÜocked here.\n",

323 
t
->
fûe
[t->
ªíå™cy
-1],Å->
löío
[t->ªíå™cy-1],Å->
func
[t->ªíå™cy-1], 
muãx_«me
);

324 
	`a°_ªíå™cy_u∆ock
(
t
);

328 i‡((
ªs
 = 
	`±hªad_muãx_de°roy
(&
t
->
muãx
)))

329 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error destroying mutex %s: %s\n",

330 
fûíame
, 
löío
, 
func
, 
muãx_«me
, 
	`°ªº‹
(
ªs
));

331 #i‚de‡
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP


333 
t
->
muãx
 = 
PTHREAD_MUTEX_INIT_VALUE
;

335 
	`a°_ªíå™cy_lock
(
t
);

336 
t
->
fûe
[0] = 
fûíame
;

337 
t
->
löío
[0] =Üineno;

338 
t
->
func
[0] = func;

339 
t
->
ªíå™cy
 = 0;

340 
t
->
thªad
[0] = 0;

341 
	`a°_ªíå™cy_u∆ock
(
t
);

342 
	`dñëe_ªíå™cy_cs
(
t
);

344  
ªs
;

345 
	}
}

347 
ölöe
 
	$__a°_±hªad_muãx_lock
(c⁄° *
fûíame
, 
löío
, c⁄° *
func
,

348 c⁄° * 
muãx_«me
, 
a°_muãx_t
 *
t
)

350 
ªs
;

351 
ˇ∆og
 = 
	`°rcmp
(
fûíame
, "loggî.c"Ë& 
t
->
åack
;

353 #i‡
	`deföed
(
AST_MUTEX_INIT_W_CONSTRUCTORS
)

354 i‡((
t
->
muãx
Ë=((
±hªad_muãx_t
Ë
PTHREAD_MUTEX_INITIALIZER
)) {

359 
ªs
 = 
	`__a°_±hªad_muãx_öô
(
t
->
åack
, 
fûíame
, 
löío
, 
func
, 
muãx_«me
,Å);

360 i‡((
t
->
muãx
Ë=((
±hªad_muãx_t
Ë
PTHREAD_MUTEX_INITIALIZER
)) {

361 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error: mutex '%s' is uninitializedánd unableÅo initialize.\n",

362 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

363  
ªs
;

368 i‡(
t
->
åack
)

369 
	`a°_°‹e_lock_öfo
(
AST_MUTEX
, 
fûíame
, 
löío
, 
func
, 
muãx_«me
, &
t
->
muãx
);

371 #ifde‡
DETECT_DEADLOCKS


373 
time_t
 
£c⁄ds
 = 
	`time
(
NULL
);

374 
time_t
 
waô_time
, 
ªp‹ãd_waô
 = 0;

376 #ifdef 
HAVE_MTX_PROFILE


377 
	`a°_m¨k
(
mtx_¥of
, 1);

379 
ªs
 = 
	`±hªad_muãx_åylock
(&
t
->
muãx
);

380 #ifdef 
HAVE_MTX_PROFILE


381 
	`a°_m¨k
(
mtx_¥of
, 0);

383 i‡(
ªs
 =
EBUSY
) {

384 
waô_time
 = 
	`time
(
NULL
Ë- 
£c⁄ds
;

385 i‡(
waô_time
 > 
ªp‹ãd_waô
 && (wait_time % 5) == 0) {

386 
	`__a°_muãx_loggî
("%sÜine %d (%s): Deadlock? waited %d sec for mutex '%s'?\n",

387 
fûíame
, 
löío
, 
func
, (Ë
waô_time
, 
muãx_«me
);

388 
	`a°_ªíå™cy_lock
(
t
);

389 
	`__a°_muãx_loggî
("%sÜine %d (%s): '%s' wasÜocked here.\n",

390 
t
->
fûe
[t->
ªíå™cy
-1],Å->
löío
[t->reentrancy-1],

391 
t
->
func
[t->
ªíå™cy
-1], 
muãx_«me
);

392 
	`a°_ªíå™cy_u∆ock
(
t
);

393 
ªp‹ãd_waô
 = 
waô_time
;

395 
	`u¶ìp
(200);

397 } 
ªs
 =
EBUSY
);

400 #ifdef 
HAVE_MTX_PROFILE


401 
	`a°_m¨k
(
mtx_¥of
, 1);

402 
ªs
 = 
	`±hªad_muãx_åylock
(&
t
->
muãx
);

403 
	`a°_m¨k
(
mtx_¥of
, 0);

404 i‡(
ªs
)

406 
ªs
 = 
	`±hªad_muãx_lock
(&
t
->
muãx
);

409 i‡(!
ªs
) {

410 
	`a°_ªíå™cy_lock
(
t
);

411 i‡(
t
->
ªíå™cy
 < 
AST_MAX_REENTRANCY
) {

412 
t
->
fûe
[t->
ªíå™cy
] = 
fûíame
;

413 
t
->
löío
[t->
ªíå™cy
] =Üineno;

414 
t
->
func
[t->
ªíå™cy
] = func;

415 
t
->
thªad
[t->
ªíå™cy
] = 
	`±hªad_£lf
();

416 
t
->
ªíå™cy
++;

418 
	`__a°_muãx_loggî
("%sÜine %d (%s): '%s'Ñeally deepÑeentrancy!\n",

419 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

421 
	`a°_ªíå™cy_u∆ock
(
t
);

422 i‡(
t
->
åack
)

423 
	`a°_m¨k_lock_acquúed
(&
t
->
muãx
);

425 i‡(
t
->
åack
)

426 
	`a°_ªmove_lock_öfo
(&
t
->
muãx
);

427 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error obtaining mutex: %s\n",

428 
fûíame
, 
löío
, 
func
, 
	`°ªº‹
(
ªs
));

429 
DO_THREAD_CRASH
;

432  
ªs
;

433 
	}
}

435 
ölöe
 
	$__a°_±hªad_muãx_åylock
(c⁄° *
fûíame
, 
löío
, c⁄° *
func
,

436 c⁄° * 
muãx_«me
, 
a°_muãx_t
 *
t
)

438 
ªs
;

439 
ˇ∆og
 = 
	`°rcmp
(
fûíame
, "loggî.c"Ë& 
t
->
åack
;

441 #i‡
	`deföed
(
AST_MUTEX_INIT_W_CONSTRUCTORS
)

442 i‡((
t
->
muãx
Ë=((
±hªad_muãx_t
Ë
PTHREAD_MUTEX_INITIALIZER
)) {

447 
ªs
 = 
	`__a°_±hªad_muãx_öô
(
t
->
åack
, 
fûíame
, 
löío
, 
func
, 
muãx_«me
,Å);

448 i‡((
t
->
muãx
Ë=((
±hªad_muãx_t
Ë
PTHREAD_MUTEX_INITIALIZER
)) {

449 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error: mutex '%s' is uninitializedánd unableÅo initialize.\n",

450 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

451  
ªs
;

456 i‡(
t
->
åack
)

457 
	`a°_°‹e_lock_öfo
(
AST_MUTEX
, 
fûíame
, 
löío
, 
func
, 
muãx_«me
, &
t
->
muãx
);

459 i‡(!(
ªs
 = 
	`±hªad_muãx_åylock
(&
t
->
muãx
))) {

460 
	`a°_ªíå™cy_lock
(
t
);

461 i‡(
t
->
ªíå™cy
 < 
AST_MAX_REENTRANCY
) {

462 
t
->
fûe
[t->
ªíå™cy
] = 
fûíame
;

463 
t
->
löío
[t->
ªíå™cy
] =Üineno;

464 
t
->
func
[t->
ªíå™cy
] = func;

465 
t
->
thªad
[t->
ªíå™cy
] = 
	`±hªad_£lf
();

466 
t
->
ªíå™cy
++;

468 
	`__a°_muãx_loggî
("%sÜine %d (%s): '%s'Ñeally deepÑeentrancy!\n",

469 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

471 
	`a°_ªíå™cy_u∆ock
(
t
);

472 i‡(
t
->
åack
)

473 
	`a°_m¨k_lock_acquúed
(&
t
->
muãx
);

474 } i‡(
t
->
åack
) {

475 
	`a°_m¨k_lock_Áûed
(&
t
->
muãx
);

478  
ªs
;

479 
	}
}

481 
ölöe
 
	$__a°_±hªad_muãx_u∆ock
(c⁄° *
fûíame
, 
löío
, c⁄° *
func
,

482 c⁄° *
muãx_«me
, 
a°_muãx_t
 *
t
)

484 
ªs
;

485 
ˇ∆og
 = 
	`°rcmp
(
fûíame
, "loggî.c"Ë& 
t
->
åack
;

487 #ifde‡
AST_MUTEX_INIT_W_CONSTRUCTORS


488 i‡((
t
->
muãx
Ë=((
±hªad_muãx_t
Ë
PTHREAD_MUTEX_INITIALIZER
)) {

489 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error: mutex '%s' is uninitialized.\n",

490 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

491 
ªs
 = 
	`__a°_±hªad_muãx_öô
(
t
->
åack
, 
fûíame
, 
löío
, 
func
, 
muãx_«me
,Å);

492 i‡((
t
->
muãx
Ë=((
±hªad_muãx_t
Ë
PTHREAD_MUTEX_INITIALIZER
)) {

493 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error: mutex '%s' is uninitializedánd unableÅo initialize.\n",

494 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

496  
ªs
;

500 
	`a°_ªíå™cy_lock
(
t
);

501 i‡(
t
->
ªíå™cy
 && (t->
thªad
[t->ªíå™cy-1] !
	`±hªad_£lf
())) {

502 
	`__a°_muãx_loggî
("%sÜine %d (%s):áttempted unlock mutex '%s' without owning it!\n",

503 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

504 
	`__a°_muãx_loggî
("%sÜine %d (%s): '%s' wasÜocked here.\n",

505 
t
->
fûe
[t->
ªíå™cy
-1],Å->
löío
[t->ªíå™cy-1],Å->
func
[t->ªíå™cy-1], 
muãx_«me
);

506 
DO_THREAD_CRASH
;

509 i‡(--
t
->
ªíå™cy
 < 0) {

510 
	`__a°_muãx_loggî
("%sÜine %d (%s): mutex '%s' freed moreÅimesÅhan we'veÜocked!\n",

511 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

512 
t
->
ªíå™cy
 = 0;

515 i‡(
t
->
ªíå™cy
 < 
AST_MAX_REENTRANCY
) {

516 
t
->
fûe
[t->
ªíå™cy
] = 
NULL
;

517 
t
->
löío
[t->
ªíå™cy
] = 0;

518 
t
->
func
[t->
ªíå™cy
] = 
NULL
;

519 
t
->
thªad
[t->
ªíå™cy
] = 0;

521 
	`a°_ªíå™cy_u∆ock
(
t
);

523 i‡(
t
->
åack
)

524 
	`a°_ªmove_lock_öfo
(&
t
->
muãx
);

526 i‡((
ªs
 = 
	`±hªad_muãx_u∆ock
(&
t
->
muãx
))) {

527 
	`__a°_muãx_loggî
("%sÜine %d (%s): ErrorÑeleasing mutex: %s\n",

528 
fûíame
, 
löío
, 
func
, 
	`°ªº‹
(
ªs
));

529 
DO_THREAD_CRASH
;

532  
ªs
;

533 
	}
}

535 
ölöe
 
	$__a°_c⁄d_öô
(c⁄° *
fûíame
, 
löío
, c⁄° *
func
,

536 c⁄° *
c⁄d_«me
, 
a°_c⁄d_t
 *
c⁄d
, 
±hªad_c⁄d©å_t
 *
c⁄d_©å
)

538  
	`±hªad_c⁄d_öô
(
c⁄d
, 
c⁄d_©å
);

539 
	}
}

541 
ölöe
 
	$__a°_c⁄d_sig«l
(c⁄° *
fûíame
, 
löío
, c⁄° *
func
,

542 c⁄° *
c⁄d_«me
, 
a°_c⁄d_t
 *
c⁄d
)

544  
	`±hªad_c⁄d_sig«l
(
c⁄d
);

545 
	}
}

547 
ölöe
 
	$__a°_c⁄d_brﬂdˇ°
(c⁄° *
fûíame
, 
löío
, c⁄° *
func
,

548 c⁄° *
c⁄d_«me
, 
a°_c⁄d_t
 *
c⁄d
)

550  
	`±hªad_c⁄d_brﬂdˇ°
(
c⁄d
);

551 
	}
}

553 
ölöe
 
	$__a°_c⁄d_de°roy
(c⁄° *
fûíame
, 
löío
, c⁄° *
func
,

554 c⁄° *
c⁄d_«me
, 
a°_c⁄d_t
 *
c⁄d
)

556  
	`±hªad_c⁄d_de°roy
(
c⁄d
);

557 
	}
}

559 
ölöe
 
	$__a°_c⁄d_waô
(c⁄° *
fûíame
, 
löío
, c⁄° *
func
,

560 c⁄° *
c⁄d_«me
, c⁄° *
muãx_«me
,

561 
a°_c⁄d_t
 *
c⁄d
, 
a°_muãx_t
 *
t
)

563 
ªs
;

564 
ˇ∆og
 = 
	`°rcmp
(
fûíame
, "loggî.c"Ë& 
t
->
åack
;

566 #ifde‡
AST_MUTEX_INIT_W_CONSTRUCTORS


567 i‡((
t
->
muãx
Ë=((
±hªad_muãx_t
Ë
PTHREAD_MUTEX_INITIALIZER
)) {

568 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error: mutex '%s' is uninitialized.\n",

569 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

570 
ªs
 = 
	`__a°_±hªad_muãx_öô
(
t
->
åack
, 
fûíame
, 
löío
, 
func
, 
muãx_«me
,Å);

571 i‡((
t
->
muãx
Ë=((
±hªad_muãx_t
Ë
PTHREAD_MUTEX_INITIALIZER
)) {

572 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error: mutex '%s' is uninitializedánd unableÅo initialize.\n",

573 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

575  
ªs
;

579 
	`a°_ªíå™cy_lock
(
t
);

580 i‡(
t
->
ªíå™cy
 && (t->
thªad
[t->ªíå™cy-1] !
	`±hªad_£lf
())) {

581 
	`__a°_muãx_loggî
("%sÜine %d (%s):áttempted unlock mutex '%s' without owning it!\n",

582 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

583 
	`__a°_muãx_loggî
("%sÜine %d (%s): '%s' wasÜocked here.\n",

584 
t
->
fûe
[t->
ªíå™cy
-1],Å->
löío
[t->ªíå™cy-1],Å->
func
[t->ªíå™cy-1], 
muãx_«me
);

585 
DO_THREAD_CRASH
;

588 i‡(--
t
->
ªíå™cy
 < 0) {

589 
	`__a°_muãx_loggî
("%sÜine %d (%s): mutex '%s' freed moreÅimesÅhan we'veÜocked!\n",

590 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

591 
t
->
ªíå™cy
 = 0;

594 i‡(
t
->
ªíå™cy
 < 
AST_MAX_REENTRANCY
) {

595 
t
->
fûe
[t->
ªíå™cy
] = 
NULL
;

596 
t
->
löío
[t->
ªíå™cy
] = 0;

597 
t
->
func
[t->
ªíå™cy
] = 
NULL
;

598 
t
->
thªad
[t->
ªíå™cy
] = 0;

600 
	`a°_ªíå™cy_u∆ock
(
t
);

602 i‡(
t
->
åack
)

603 
	`a°_ªmove_lock_öfo
(&
t
->
muãx
);

605 i‡((
ªs
 = 
	`±hªad_c⁄d_waô
(
c⁄d
, &
t
->
muãx
))) {

606 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error waiting on condition mutex '%s'\n",

607 
fûíame
, 
löío
, 
func
, 
	`°ªº‹
(
ªs
));

608 
DO_THREAD_CRASH
;

610 
	`a°_ªíå™cy_lock
(
t
);

611 i‡(
t
->
ªíå™cy
 < 
AST_MAX_REENTRANCY
) {

612 
t
->
fûe
[t->
ªíå™cy
] = 
fûíame
;

613 
t
->
löío
[t->
ªíå™cy
] =Üineno;

614 
t
->
func
[t->
ªíå™cy
] = func;

615 
t
->
thªad
[t->
ªíå™cy
] = 
	`±hªad_£lf
();

616 
t
->
ªíå™cy
++;

618 
	`__a°_muãx_loggî
("%sÜine %d (%s): '%s'Ñeally deepÑeentrancy!\n",

619 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

621 
	`a°_ªíå™cy_u∆ock
(
t
);

623 i‡(
t
->
åack
)

624 
	`a°_°‹e_lock_öfo
(
AST_MUTEX
, 
fûíame
, 
löío
, 
func
, 
muãx_«me
, &
t
->
muãx
);

627  
ªs
;

628 
	}
}

630 
ölöe
 
	$__a°_c⁄d_timedwaô
(c⁄° *
fûíame
, 
löío
, c⁄° *
func
,

631 c⁄° *
c⁄d_«me
, c⁄° *
muãx_«me
, 
a°_c⁄d_t
 *
c⁄d
,

632 
a°_muãx_t
 *
t
, c⁄° 
time•ec
 *
ab°ime
)

634 
ªs
;

635 
ˇ∆og
 = 
	`°rcmp
(
fûíame
, "loggî.c"Ë& 
t
->
åack
;

637 #ifde‡
AST_MUTEX_INIT_W_CONSTRUCTORS


638 i‡((
t
->
muãx
Ë=((
±hªad_muãx_t
Ë
PTHREAD_MUTEX_INITIALIZER
)) {

639 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error: mutex '%s' is uninitialized.\n",

640 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

641 
ªs
 = 
	`__a°_±hªad_muãx_öô
(
t
->
åack
, 
fûíame
, 
löío
, 
func
, 
muãx_«me
,Å);

642 i‡((
t
->
muãx
Ë=((
±hªad_muãx_t
Ë
PTHREAD_MUTEX_INITIALIZER
)) {

643 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error: mutex '%s' is uninitializedánd unableÅo initialize.\n",

644 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

646  
ªs
;

650 
	`a°_ªíå™cy_lock
(
t
);

651 i‡(
t
->
ªíå™cy
 && (t->
thªad
[t->ªíå™cy-1] !
	`±hªad_£lf
())) {

652 
	`__a°_muãx_loggî
("%sÜine %d (%s):áttempted unlock mutex '%s' without owning it!\n",

653 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

654 
	`__a°_muãx_loggî
("%sÜine %d (%s): '%s' wasÜocked here.\n",

655 
t
->
fûe
[t->
ªíå™cy
-1],Å->
löío
[t->ªíå™cy-1],Å->
func
[t->ªíå™cy-1], 
muãx_«me
);

656 
DO_THREAD_CRASH
;

659 i‡(--
t
->
ªíå™cy
 < 0) {

660 
	`__a°_muãx_loggî
("%sÜine %d (%s): mutex '%s' freed moreÅimesÅhan we'veÜocked!\n",

661 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

662 
t
->
ªíå™cy
 = 0;

665 i‡(
t
->
ªíå™cy
 < 
AST_MAX_REENTRANCY
) {

666 
t
->
fûe
[t->
ªíå™cy
] = 
NULL
;

667 
t
->
löío
[t->
ªíå™cy
] = 0;

668 
t
->
func
[t->
ªíå™cy
] = 
NULL
;

669 
t
->
thªad
[t->
ªíå™cy
] = 0;

671 
	`a°_ªíå™cy_u∆ock
(
t
);

673 i‡(
t
->
åack
)

674 
	`a°_ªmove_lock_öfo
(&
t
->
muãx
);

676 i‡((
ªs
 = 
	`±hªad_c⁄d_timedwaô
(
c⁄d
, &
t
->
muãx
, 
ab°ime
)Ë&& (ª†!
ETIMEDOUT
)) {

677 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error waiting on condition mutex '%s'\n",

678 
fûíame
, 
löío
, 
func
, 
	`°ªº‹
(
ªs
));

679 
DO_THREAD_CRASH
;

681 
	`a°_ªíå™cy_lock
(
t
);

682 i‡(
t
->
ªíå™cy
 < 
AST_MAX_REENTRANCY
) {

683 
t
->
fûe
[t->
ªíå™cy
] = 
fûíame
;

684 
t
->
löío
[t->
ªíå™cy
] =Üineno;

685 
t
->
func
[t->
ªíå™cy
] = func;

686 
t
->
thªad
[t->
ªíå™cy
] = 
	`±hªad_£lf
();

687 
t
->
ªíå™cy
++;

689 
	`__a°_muãx_loggî
("%sÜine %d (%s): '%s'Ñeally deepÑeentrancy!\n",

690 
fûíame
, 
löío
, 
func
, 
muãx_«me
);

692 
	`a°_ªíå™cy_u∆ock
(
t
);

694 i‡(
t
->
åack
)

695 
	`a°_°‹e_lock_öfo
(
AST_MUTEX
, 
fûíame
, 
löío
, 
func
, 
muãx_«me
, &
t
->
muãx
);

698  
ªs
;

699 
	}
}

701 
	#a°_muãx_de°roy
(
a
Ë
	`__a°_±hªad_muãx_de°roy
(
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #a,á)

	)

702 
	#a°_muãx_lock
(
a
Ë
	`__a°_±hªad_muãx_lock
(
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #a,á)

	)

703 
	#a°_muãx_u∆ock
(
a
Ë
	`__a°_±hªad_muãx_u∆ock
(
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #a,á)

	)

704 
	#a°_muãx_åylock
(
a
Ë
	`__a°_±hªad_muãx_åylock
(
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #a,á)

	)

705 
	#a°_c⁄d_öô
(
c⁄d
, 
©å
Ë
	`__a°_c⁄d_öô
(
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #c⁄d, c⁄d,áâr)

	)

706 
	#a°_c⁄d_de°roy
(
c⁄d
Ë
	`__a°_c⁄d_de°roy
(
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #c⁄d, c⁄d)

	)

707 
	#a°_c⁄d_sig«l
(
c⁄d
Ë
	`__a°_c⁄d_sig«l
(
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #c⁄d, c⁄d)

	)

708 
	#a°_c⁄d_brﬂdˇ°
(
c⁄d
Ë
	`__a°_c⁄d_brﬂdˇ°
(
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #c⁄d, c⁄d)

	)

709 
	#a°_c⁄d_waô
(
c⁄d
, 
muãx
Ë
	`__a°_c⁄d_waô
(
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #c⁄d, #muãx, c⁄d, muãx)

	)

710 
	#a°_c⁄d_timedwaô
(
c⁄d
, 
muãx
, 
time
Ë
	`__a°_c⁄d_timedwaô
(
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #c⁄d, #muãx, c⁄d, muãx,Åime)

	)

714 
	#DEADLOCK_AVOIDANCE
(
lock
) \

715 
	`a°_muãx_u∆ock
(
lock
); \

716 
	`u¶ìp
(1); \

717 
	`a°_muãx_lock
(
lock
);

	)

720 
±hªad_muãx_t
 
	ta°_muãx_t
;

722 
	#AST_MUTEX_INIT_VALUE
 ((
a°_muãx_t
Ë
PTHREAD_MUTEX_INIT_VALUE
)

	)

723 
	#AST_MUTEX_INIT_VALUE_NOTRACKING
 \

724 ((
a°_muãx_t
Ë
PTHREAD_MUTEX_INIT_VALUE
)

	)

726 
	#a°_muãx_öô_nŸøckög
(
m
Ë
	`a°_muãx_öô
(m)

	)

728 
ölöe
 
	$a°_muãx_öô
(
a°_muãx_t
 *
pmuãx
)

730 
ªs
;

731 
±hªad_muãx©å_t
 
©å
;

733 
	`±hªad_muãx©å_öô
(&
©å
);

734 
	`±hªad_muãx©å_£ây≥
(&
©å
, 
AST_MUTEX_KIND
);

736 
ªs
 = 
	`±hªad_muãx_öô
(
pmuãx
, &
©å
);

737 
	`±hªad_muãx©å_de°roy
(&
©å
);

738  
ªs
;

739 
	}
}

741 
	#a°_±hªad_muãx_öô
(
pmuãx
,
a
Ë
	`±hªad_muãx_öô
’muãx,a)

	)

743 
ölöe
 
	$a°_muãx_u∆ock
(
a°_muãx_t
 *
pmuãx
)

745  
	`±hªad_muãx_u∆ock
(
pmuãx
);

746 
	}
}

748 
ölöe
 
	$a°_muãx_de°roy
(
a°_muãx_t
 *
pmuãx
)

750  
	`±hªad_muãx_de°roy
(
pmuãx
);

751 
	}
}

753 
ölöe
 
	$a°_muãx_lock
(
a°_muãx_t
 *
pmuãx
)

755 
	`__MTX_PROF
(
pmuãx
);

756 
	}
}

758 
ölöe
 
	$a°_muãx_åylock
(
a°_muãx_t
 *
pmuãx
)

760  
	`±hªad_muãx_åylock
(
pmuãx
);

761 
	}
}

763 
±hªad_c⁄d_t
 
	ta°_c⁄d_t
;

765 
ölöe
 
	$a°_c⁄d_öô
(
a°_c⁄d_t
 *
c⁄d
, 
±hªad_c⁄d©å_t
 *
c⁄d_©å
)

767  
	`±hªad_c⁄d_öô
(
c⁄d
, 
c⁄d_©å
);

768 
	}
}

770 
ölöe
 
	$a°_c⁄d_sig«l
(
a°_c⁄d_t
 *
c⁄d
)

772  
	`±hªad_c⁄d_sig«l
(
c⁄d
);

773 
	}
}

775 
ölöe
 
	$a°_c⁄d_brﬂdˇ°
(
a°_c⁄d_t
 *
c⁄d
)

777  
	`±hªad_c⁄d_brﬂdˇ°
(
c⁄d
);

778 
	}
}

780 
ölöe
 
	$a°_c⁄d_de°roy
(
a°_c⁄d_t
 *
c⁄d
)

782  
	`±hªad_c⁄d_de°roy
(
c⁄d
);

783 
	}
}

785 
ölöe
 
	$a°_c⁄d_waô
(
a°_c⁄d_t
 *
c⁄d
, 
a°_muãx_t
 *
t
)

787  
	`±hªad_c⁄d_waô
(
c⁄d
, 
t
);

788 
	}
}

790 
ölöe
 
	$a°_c⁄d_timedwaô
(
a°_c⁄d_t
 *
c⁄d
, 
a°_muãx_t
 *
t
, c⁄° 
time•ec
 *
ab°ime
)

792  
	`±hªad_c⁄d_timedwaô
(
c⁄d
, 
t
, 
ab°ime
);

793 
	}
}

797 #i‡
deföed
(
AST_MUTEX_INIT_W_CONSTRUCTORS
)

800 
	#__AST_MUTEX_DEFINE
(
sc›e
, 
muãx
, 
öô_vÆ
, 
åack
) \

801 
sc›e
 
a°_muãx_t
 
muãx
 = 
öô_vÆ
; \

802 
	`__©åibuã__
 ((
c⁄°ru˘‹
)Ë
öô_
##
	`muãx
() \

804 i‡(
åack
) \

805 
	`a°_muãx_öô
(&
muãx
); \

807 
	`a°_muãx_öô_nŸøckög
(&
muãx
); \

809 
	`__©åibuã__
 ((
de°ru˘‹
)Ë
föi_
##
	`muãx
() \

811 
	`a°_muãx_de°roy
(&
muãx
); \

812 }

	)

815 
	#__AST_MUTEX_DEFINE
(
sc›e
, 
muãx
, 
öô_vÆ
, 
åack
) \

816 
sc›e
 
a°_muãx_t
 
muãx
 = 
öô_vÆ


	)

819 
	#±hªad_muãx_t
 
u£_a°_muãx_t_ö°ód_of_±hªad_muãx_t


	)

820 
	#±hªad_muãx_lock
 
u£_a°_muãx_lock_ö°ód_of_±hªad_muãx_lock


	)

821 
	#±hªad_muãx_u∆ock
 
u£_a°_muãx_u∆ock_ö°ód_of_±hªad_muãx_u∆ock


	)

822 
	#±hªad_muãx_åylock
 
u£_a°_muãx_åylock_ö°ód_of_±hªad_muãx_åylock


	)

823 
	#±hªad_muãx_öô
 
u£_a°_muãx_öô_ö°ód_of_±hªad_muãx_öô


	)

824 
	#±hªad_muãx_de°roy
 
u£_a°_muãx_de°roy_ö°ód_of_±hªad_muãx_de°roy


	)

825 
	#±hªad_c⁄d_t
 
u£_a°_c⁄d_t_ö°ód_of_±hªad_c⁄d_t


	)

826 
	#±hªad_c⁄d_öô
 
u£_a°_c⁄d_öô_ö°ód_of_±hªad_c⁄d_öô


	)

827 
	#±hªad_c⁄d_de°roy
 
u£_a°_c⁄d_de°roy_ö°ód_of_±hªad_c⁄d_de°roy


	)

828 
	#±hªad_c⁄d_sig«l
 
u£_a°_c⁄d_sig«l_ö°ód_of_±hªad_c⁄d_sig«l


	)

829 
	#±hªad_c⁄d_brﬂdˇ°
 
u£_a°_c⁄d_brﬂdˇ°_ö°ód_of_±hªad_c⁄d_brﬂdˇ°


	)

830 
	#±hªad_c⁄d_waô
 
u£_a°_c⁄d_waô_ö°ód_of_±hªad_c⁄d_waô


	)

831 
	#±hªad_c⁄d_timedwaô
 
u£_a°_c⁄d_timedwaô_ö°ód_of_±hªad_c⁄d_timedwaô


	)

833 
	#AST_MUTEX_DEFINE_STATIC
(
muãx
Ë
	`__AST_MUTEX_DEFINE
(, muãx, 
AST_MUTEX_INIT_VALUE
, 1)

	)

834 
	#AST_MUTEX_DEFINE_STATIC_NOTRACKING
(
muãx
Ë
	`__AST_MUTEX_DEFINE
(, muãx, 
AST_MUTEX_INIT_VALUE_NOTRACKING
, 0)

	)

836 
	#AST_MUTEX_INITIALIZER
 
__u£_AST_MUTEX_DEFINE_STATIC_øthî_th™_AST_MUTEX_INITIALIZER__


	)

838 
	#gëho°by«me
 
__gëho°by«me__is__nŸ__ªíå™t__u£__a°_gëho°by«me__ö°ód__


	)

840 #i‚de‡
__löux__


841 
	#±hªad_¸óã
 
__u£_a°_±hªad_¸óã_ö°ód__


	)

844 
±hªad_rwlock_t
 
	ta°_rwlock_t
;

846 #ifde‡
HAVE_PTHREAD_RWLOCK_INITIALIZER


847 
	#AST_RWLOCK_INIT_VALUE
 
PTHREAD_RWLOCK_INITIALIZER


	)

849 
	#AST_RWLOCK_INIT_VALUE
 
NULL


	)

852 #ifde‡
DEBUG_THREADS


854 
	#a°_rwlock_öô
(
rwlock
Ë
	`__a°_rwlock_öô
(
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #rwlock,Ñwlock)

	)

857 
ölöe
 
	$__a°_rwlock_öô
(c⁄° *
fûíame
, 
löío
, c⁄° *
func
, c⁄° *
rwlock_«me
, 
a°_rwlock_t
 *
¥wlock
)

859 
ªs
;

860 
±hªad_rwlock©å_t
 
©å
;

861 #ifde‡
AST_MUTEX_INIT_W_CONSTRUCTORS


862 
ˇ∆og
 = 
	`°rcmp
(
fûíame
, "logger.c");

864 i‡(*
¥wlock
 !((
a°_rwlock_t
Ë
AST_RWLOCK_INIT_VALUE
)) {

865 
	`__a°_muãx_loggî
("%sÜine %d (%s): Warning:Ñwlock '%s' isálready initialized.\n",

866 
fûíame
, 
löío
, 
func
, 
rwlock_«me
);

870 
	`±hªad_rwlock©å_öô
(&
©å
);

872 #ifde‡
HAVE_PTHREAD_RWLOCK_PREFER_WRITER_NP


873 
	`±hªad_rwlock©å_£tköd_≈
(&
©å
, 
PTHREAD_RWLOCK_PREFER_WRITER_NP
);

876 
ªs
 = 
	`±hªad_rwlock_öô
(
¥wlock
, &
©å
);

877 
	`±hªad_rwlock©å_de°roy
(&
©å
);

878  
ªs
;

879 
	}
}

881 
	#a°_rwlock_de°roy
(
rwlock
Ë
	`__a°_rwlock_de°roy
(
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, #rwlock,Ñwlock)

	)

883 
ölöe
 
	$__a°_rwlock_de°roy
(c⁄° *
fûíame
, 
löío
, c⁄° *
func
, c⁄° *
rwlock_«me
, 
a°_rwlock_t
 *
¥wlock
)

885 
ªs
;

886 
ˇ∆og
 = 
	`°rcmp
(
fûíame
, "logger.c");

888 #ifde‡
AST_MUTEX_INIT_W_CONSTRUCTORS


889 i‡(*
¥wlock
 =((
a°_rwlock_t
Ë
AST_RWLOCK_INIT_VALUE
)) {

890 
	`__a°_muãx_loggî
("%sÜine %d (%s): Warning:Ñwlock '%s' is uninitialized.\n",

891 
fûíame
, 
löío
, 
func
, 
rwlock_«me
);

896 i‡((
ªs
 = 
	`±hªad_rwlock_de°roy
(
¥wlock
)))

897 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error destroyingÑwlock %s: %s\n",

898 
fûíame
, 
löío
, 
func
, 
rwlock_«me
, 
	`°ªº‹
(
ªs
));

900  
ªs
;

901 
	}
}

903 
	#a°_rwlock_u∆ock
(
a
) \

904 
	`_a°_rwlock_u∆ock
(
a
, #a, 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

906 
ölöe
 
	$_a°_rwlock_u∆ock
(
a°_rwlock_t
 *
lock
, c⁄° *
«me
,

907 c⁄° *
fûe
, 
löe
, c⁄° *
func
)

909 
ªs
;

910 #ifde‡
AST_MUTEX_INIT_W_CONSTRUCTORS


911 
ˇ∆og
 = 
	`°rcmp
(
fûe
, "logger.c");

913 i‡(*
lock
 =((
a°_rwlock_t
Ë
AST_RWLOCK_INIT_VALUE
)) {

914 
	`__a°_muãx_loggî
("%sÜine %d (%s): Warning:Ñwlock '%s' is uninitialized.\n",

915 
fûe
, 
löe
, 
func
, 
«me
);

916 
ªs
 = 
	`__a°_rwlock_öô
(
fûe
, 
löe
, 
func
, 
«me
, 
lock
);

917 i‡(*
lock
 =((
a°_rwlock_t
Ë
AST_RWLOCK_INIT_VALUE
)) {

918 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error:Ñwlock '%s' is uninitializedánd unableÅo initialize.\n",

919 
fûe
, 
löe
, 
func
, 
«me
);

921  
ªs
;

925 
ªs
 = 
	`±hªad_rwlock_u∆ock
(
lock
);

926 
	`a°_ªmove_lock_öfo
(
lock
);

927  
ªs
;

928 
	}
}

930 
	#a°_rwlock_rdlock
(
a
) \

931 
	`_a°_rwlock_rdlock
(
a
, #a, 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

933 
ölöe
 
	$_a°_rwlock_rdlock
(
a°_rwlock_t
 *
lock
, c⁄° *
«me
,

934 c⁄° *
fûe
, 
löe
, c⁄° *
func
)

936 
ªs
;

937 #ifde‡
AST_MUTEX_INIT_W_CONSTRUCTORS


938 
ˇ∆og
 = 
	`°rcmp
(
fûe
, "logger.c");

940 i‡(*
lock
 =((
a°_rwlock_t
Ë
AST_RWLOCK_INIT_VALUE
)) {

945 
ªs
 = 
	`__a°_rwlock_öô
(
fûe
, 
löe
, 
func
, 
«me
, 
lock
);

946 i‡(*
lock
 =((
a°_rwlock_t
Ë
AST_RWLOCK_INIT_VALUE
)) {

947 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error:Ñwlock '%s' is uninitializedánd unableÅo initialize.\n",

948 
fûe
, 
löe
, 
func
, 
«me
);

949  
ªs
;

954 
	`a°_°‹e_lock_öfo
(
AST_RDLOCK
, 
fûe
, 
löe
, 
func
, 
«me
, 
lock
);

955 
ªs
 = 
	`±hªad_rwlock_rdlock
(
lock
);

956 i‡(!
ªs
)

957 
	`a°_m¨k_lock_acquúed
(
lock
);

959 
	`a°_ªmove_lock_öfo
(
lock
);

960  
ªs
;

961 
	}
}

963 
	#a°_rwlock_wæock
(
a
) \

964 
	`_a°_rwlock_wæock
(
a
, #a, 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

966 
ölöe
 
	$_a°_rwlock_wæock
(
a°_rwlock_t
 *
lock
, c⁄° *
«me
,

967 c⁄° *
fûe
, 
löe
, c⁄° *
func
)

969 
ªs
;

970 #ifde‡
AST_MUTEX_INIT_W_CONSTRUCTORS


971 
ˇ∆og
 = 
	`°rcmp
(
fûe
, "logger.c");

973 i‡(*
lock
 =((
a°_rwlock_t
Ë
AST_RWLOCK_INIT_VALUE
)) {

978 
ªs
 = 
	`__a°_rwlock_öô
(
fûe
, 
löe
, 
func
, 
«me
, 
lock
);

979 i‡(*
lock
 =((
a°_rwlock_t
Ë
AST_RWLOCK_INIT_VALUE
)) {

980 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error:Ñwlock '%s' is uninitializedánd unableÅo initialize.\n",

981 
fûe
, 
löe
, 
func
, 
«me
);

982  
ªs
;

987 
	`a°_°‹e_lock_öfo
(
AST_WRLOCK
, 
fûe
, 
löe
, 
func
, 
«me
, 
lock
);

988 
ªs
 = 
	`±hªad_rwlock_wæock
(
lock
);

989 i‡(!
ªs
)

990 
	`a°_m¨k_lock_acquúed
(
lock
);

992 
	`a°_ªmove_lock_öfo
(
lock
);

993  
ªs
;

994 
	}
}

996 
	#a°_rwlock_åyrdlock
(
a
) \

997 
	`_a°_rwlock_åyrdlock
(
a
, #a, 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

999 
ölöe
 
	$_a°_rwlock_åyrdlock
(
a°_rwlock_t
 *
lock
, c⁄° *
«me
,

1000 c⁄° *
fûe
, 
löe
, c⁄° *
func
)

1002 
ªs
;

1003 #ifde‡
AST_MUTEX_INIT_W_CONSTRUCTORS


1004 
ˇ∆og
 = 
	`°rcmp
(
fûe
, "logger.c");

1006 i‡(*
lock
 =((
a°_rwlock_t
Ë
AST_RWLOCK_INIT_VALUE
)) {

1011 
ªs
 = 
	`__a°_rwlock_öô
(
fûe
, 
löe
, 
func
, 
«me
, 
lock
);

1012 i‡(*
lock
 =((
a°_rwlock_t
Ë
AST_RWLOCK_INIT_VALUE
)) {

1013 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error:Ñwlock '%s' is uninitializedánd unableÅo initialize.\n",

1014 
fûe
, 
löe
, 
func
, 
«me
);

1015  
ªs
;

1020 
	`a°_°‹e_lock_öfo
(
AST_RDLOCK
, 
fûe
, 
löe
, 
func
, 
«me
, 
lock
);

1021 
ªs
 = 
	`±hªad_rwlock_åyrdlock
(
lock
);

1022 i‡(!
ªs
)

1023 
	`a°_m¨k_lock_acquúed
(
lock
);

1025 
	`a°_ªmove_lock_öfo
(
lock
);

1026  
ªs
;

1027 
	}
}

1029 
	#a°_rwlock_åywæock
(
a
) \

1030 
	`_a°_rwlock_åywæock
(
a
, #a, 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

1032 
ölöe
 
	$_a°_rwlock_åywæock
(
a°_rwlock_t
 *
lock
, c⁄° *
«me
,

1033 c⁄° *
fûe
, 
löe
, c⁄° *
func
)

1035 
ªs
;

1036 #ifde‡
AST_MUTEX_INIT_W_CONSTRUCTORS


1037 
ˇ∆og
 = 
	`°rcmp
(
fûe
, "logger.c");

1039 i‡(*
lock
 =((
a°_rwlock_t
Ë
AST_RWLOCK_INIT_VALUE
)) {

1044 
ªs
 = 
	`__a°_rwlock_öô
(
fûe
, 
löe
, 
func
, 
«me
, 
lock
);

1045 i‡(*
lock
 =((
a°_rwlock_t
Ë
AST_RWLOCK_INIT_VALUE
)) {

1046 
	`__a°_muãx_loggî
("%sÜine %d (%s): Error:Ñwlock '%s' is uninitializedánd unableÅo initialize.\n",

1047 
fûe
, 
löe
, 
func
, 
«me
);

1048  
ªs
;

1053 
	`a°_°‹e_lock_öfo
(
AST_WRLOCK
, 
fûe
, 
löe
, 
func
, 
«me
, 
lock
);

1054 
ªs
 = 
	`±hªad_rwlock_åywæock
(
lock
);

1055 i‡(!
ªs
)

1056 
	`a°_m¨k_lock_acquúed
(
lock
);

1058 
	`a°_ªmove_lock_öfo
(
lock
);

1059  
ªs
;

1060 
	}
}

1064 
ölöe
 
	$a°_rwlock_öô
(
a°_rwlock_t
 *
¥wlock
)

1066 
ªs
;

1067 
±hªad_rwlock©å_t
 
©å
;

1069 
	`±hªad_rwlock©å_öô
(&
©å
);

1071 #ifde‡
HAVE_PTHREAD_RWLOCK_PREFER_WRITER_NP


1072 
	`±hªad_rwlock©å_£tköd_≈
(&
©å
, 
PTHREAD_RWLOCK_PREFER_WRITER_NP
);

1075 
ªs
 = 
	`±hªad_rwlock_öô
(
¥wlock
, &
©å
);

1076 
	`±hªad_rwlock©å_de°roy
(&
©å
);

1077  
ªs
;

1078 
	}
}

1080 
ölöe
 
	$a°_rwlock_de°roy
(
a°_rwlock_t
 *
¥wlock
)

1082  
	`±hªad_rwlock_de°roy
(
¥wlock
);

1083 
	}
}

1085 
ölöe
 
	$a°_rwlock_u∆ock
(
a°_rwlock_t
 *
¥wlock
)

1087  
	`±hªad_rwlock_u∆ock
(
¥wlock
);

1088 
	}
}

1090 
ölöe
 
	$a°_rwlock_rdlock
(
a°_rwlock_t
 *
¥wlock
)

1092  
	`±hªad_rwlock_rdlock
(
¥wlock
);

1093 
	}
}

1095 
ölöe
 
	$a°_rwlock_åyrdlock
(
a°_rwlock_t
 *
¥wlock
)

1097  
	`±hªad_rwlock_åyrdlock
(
¥wlock
);

1098 
	}
}

1100 
ölöe
 
	$a°_rwlock_wæock
(
a°_rwlock_t
 *
¥wlock
)

1102  
	`±hªad_rwlock_wæock
(
¥wlock
);

1103 
	}
}

1105 
ölöe
 
	$a°_rwlock_åywæock
(
a°_rwlock_t
 *
¥wlock
)

1107  
	`±hªad_rwlock_åywæock
(
¥wlock
);

1108 
	}
}

1113 #i‚de‡
HAVE_PTHREAD_RWLOCK_INITIALIZER


1114 
	#__AST_RWLOCK_DEFINE
(
sc›e
, 
rwlock
) \

1115 
sc›e
 
a°_rwlock_t
 
rwlock
; \

1116 
	`__©åibuã__
 ((
c⁄°ru˘‹
)Ë
öô_
##
	`rwlock
() \

1118 
	`a°_rwlock_öô
(&
rwlock
); \

1120 
	`__©åibuã__
 ((
de°ru˘‹
)Ë
föi_
##
	`rwlock
() \

1122 
	`a°_rwlock_de°roy
(&
rwlock
); \

1123 }

	)

1125 
	#__AST_RWLOCK_DEFINE
(
sc›e
, 
rwlock
) \

1126 
sc›e
 
a°_rwlock_t
 
rwlock
 = 
AST_RWLOCK_INIT_VALUE


	)

1129 
	#AST_RWLOCK_DEFINE_STATIC
(
rwlock
Ë
	`__AST_RWLOCK_DEFINE
(,Ñwlock)

	)

1141 
a°_©omic_„tchadd_öt_¶ow
(vﬁ©ûê*
p
, 
v
);

1143 
	~"a°îisk/ölöe_≠i.h
"

1145 #i‡
deföed
(
HAVE_OSX_ATOMICS
)

1146 
	~"libkîn/OSAtomic.h
"

1154 #i‡
deföed
(
HAVE_GCC_ATOMICS
)

1155 
AST_INLINE_API
(
a°_©omic_„tchadd_öt
(vﬁ©ûê*
p
, 
v
),

1157  
__sync_„tch_™d_add
(
p
, 
v
);

1159 #ñi‡
deföed
(
HAVE_OSX_ATOMICS
Ë&& (
SIZEOF_INT
 == 4)

1160 
AST_INLINE_API
(
a°_©omic_„tchadd_öt
(vﬁ©ûê*
p
, 
v
),

1162  
OSAtomicAdd32
(
v
, (
öt32_t
 *Ë
p
) - v;

1164 #ñi‡
deföed
(
HAVE_OSX_ATOMICS
Ë&& (
SIZEOF_INT
 == 8)

1165 
AST_INLINE_API
(
a°_©omic_„tchadd_öt
(vﬁ©ûê*
p
, 
v
),

1167  
OSAtomicAdd64
(
v
, (
öt64_t
 *Ë
p
) - v;

1168 #ñi‡
deföed
 (
__i386__
)

1169 #ifde‡
sun


1170 
AST_INLINE_API
(
a°_©omic_„tchadd_öt
(vﬁ©ûê*
p
, 
v
),

1172 
__asm
 
__vﬁ©ûe
 (

1174 : "+r" (
v
),

1175 "=m" (*
p
)

1176 : "m" (*
p
));

1177  (
v
);

1180 
AST_INLINE_API
(
a°_©omic_„tchadd_öt
(vﬁ©ûê*
p
, 
v
),

1182 
__asm
 
__vﬁ©ûe
 (

1184 : "+r" (
v
),

1185 "=m" (*
p
)

1186 : "m" (*
p
));

1187  (
v
);

1191 
AST_INLINE_API
(
a°_©omic_„tchadd_öt
(vﬁ©ûê*
p
, 
v
),

1193  
a°_©omic_„tchadd_öt_¶ow
(
p
, 
v
);

1200 #i‡
deföed
(
HAVE_GCC_ATOMICS
)

1201 
AST_INLINE_API
(
a°_©omic_dec_™d_ã°
(vﬁ©ûê*
p
),

1203  
__sync_sub_™d_„tch
(
p
, 1) == 0;

1205 #ñi‡
deföed
(
HAVE_OSX_ATOMICS
Ë&& (
SIZEOF_INT
 == 4)

1206 
AST_INLINE_API
(
a°_©omic_dec_™d_ã°
(vﬁ©ûê*
p
),

1208  
OSAtomicAdd32
–-1, (
öt32_t
 *Ë
p
) == 0;

1210 #ñi‡
deföed
(
HAVE_OSX_ATOMICS
Ë&& (
SIZEOF_INT
 == 8)

1211 
AST_INLINE_API
(
a°_©omic_dec_™d_ã°
(vﬁ©ûê*
p
),

1213  
OSAtomicAdd64
–-1, (
öt64_t
 *Ë
p
) == 0;

1215 
AST_INLINE_API
(
a°_©omic_dec_™d_ã°
(vﬁ©ûê*
p
),

1217 
a
 = 
a°_©omic_„tchadd_öt
(
p
, -1);

1218  
a
 == 1;

1222 #i‚de‡
DEBUG_CHANNEL_LOCKS


1225 
	#a°_ch™√l_lock
(
x
Ë
	`a°_muãx_lock
(&x->
lock
)

	)

1228 
	#a°_ch™√l_u∆ock
(
x
Ë
	`a°_muãx_u∆ock
(&x->
lock
)

	)

1231 
	#a°_ch™√l_åylock
(
x
Ë
	`a°_muãx_åylock
(&x->
lock
)

	)

1234 
a°_ch™√l
;

1236 
	#a°_ch™√l_lock
(
a
Ë
	`__a°_ch™√l_lock
◊, 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

1239 
__a°_ch™√l_lock
(
a°_ch™√l
 *
ch™
, c⁄° *
fûe
, 
löío
, c⁄° *
func
);

1241 
	#a°_ch™√l_u∆ock
(
a
Ë
	`__a°_ch™√l_u∆ock
◊, 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

1245 
__a°_ch™√l_u∆ock
(
a°_ch™√l
 *
ch™
, c⁄° *
fûe
, 
löío
, c⁄° *
func
);

1247 
	#a°_ch™√l_åylock
(
a
Ë
	`__a°_ch™√l_åylock
◊, 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

1250 
__a°_ch™√l_åylock
(
a°_ch™√l
 *
ch™
, c⁄° *
fûe
, 
löío
, c⁄° *
func
);

	@/usr/include/asterisk/logger.h

25 #i‚de‡
_ASTERISK_LOGGER_H


26 
	#_ASTERISK_LOGGER_H


	)

28 
	~"a°îisk/com∑t.h
"

30 
	~<°d¨g.h
>

32 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

36 
	#EVENTLOG
 "evít_log"

	)

37 
	#QUEUELOG
 "queue_log"

	)

39 
	#DEBUG_M
(
a
) { \

40 
a
; \

41 }

	)

43 
	#VERBOSE_PREFIX_1
 " "

	)

44 
	#VERBOSE_PREFIX_2
 " ="

	)

45 
	#VERBOSE_PREFIX_3
 " -- "

	)

46 
	#VERBOSE_PREFIX_4
 " > "

	)

62 
a°_log
(
Àvñ
, c⁄° *
fûe
, 
löe
, c⁄° *
fun˘i⁄
, c⁄° *
fmt
, ...)

63 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 5, 6)));

65 
a°_backåa˚
();

68 
loggî_ªlﬂd
();

70 
a°_queue_log
(c⁄° *
queuíame
, c⁄° *
ˇŒid
, c⁄° *
agít
, c⁄° *
evít
, c⁄° *
fmt
, ...)

71 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 5, 6)));

80 
a°_vîbo£
(c⁄° *
fmt
, ...)

81 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 1, 2)));

83 
a°_ªgi°î_vîbo£
((*
vîbo£r
)(c⁄° *
°rög
));

84 
a°_uƒegi°î_vîbo£
((*
vîbo£r
)(c⁄° *
°rög
));

86 
a°_c⁄sﬁe_puts
(c⁄° *
°rög
);

88 
a°_c⁄sﬁe_puts_muèbÀ
(c⁄° *
°rög
);

89 
a°_c⁄sﬁe_toggÀ_muã
(
fd
, 
sûít
);

91 
	#_A_
 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__


	)

93 #ifde‡
LOG_DEBUG


94 #unde‡
LOG_DEBUG


96 
	#__LOG_DEBUG
 0

	)

97 
	#LOG_DEBUG
 
__LOG_DEBUG
, 
_A_


	)

99 #ifde‡
LOG_EVENT


100 #unde‡
LOG_EVENT


102 
	#__LOG_EVENT
 1

	)

103 
	#LOG_EVENT
 
__LOG_EVENT
, 
_A_


	)

105 #ifde‡
LOG_NOTICE


106 #unde‡
LOG_NOTICE


108 
	#__LOG_NOTICE
 2

	)

109 
	#LOG_NOTICE
 
__LOG_NOTICE
, 
_A_


	)

111 #ifde‡
LOG_WARNING


112 #unde‡
LOG_WARNING


114 
	#__LOG_WARNING
 3

	)

115 
	#LOG_WARNING
 
__LOG_WARNING
, 
_A_


	)

117 #ifde‡
LOG_ERROR


118 #unde‡
LOG_ERROR


120 
	#__LOG_ERROR
 4

	)

121 
	#LOG_ERROR
 
__LOG_ERROR
, 
_A_


	)

123 #ifde‡
LOG_VERBOSE


124 #unde‡
LOG_VERBOSE


126 
	#__LOG_VERBOSE
 5

	)

127 
	#LOG_VERBOSE
 
__LOG_VERBOSE
, 
_A_


	)

129 #ifde‡
LOG_DTMF


130 #unde‡
LOG_DTMF


132 
	#__LOG_DTMF
 6

	)

133 
	#LOG_DTMF
 
__LOG_DTMF
, 
_A_


	)

135 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

	@/usr/include/asterisk/module.h

28 #i‚de‡
_ASTERISK_MODULE_H


29 
	#_ASTERISK_MODULE_H


	)

31 
	~"a°îisk/utûs.h
"

33 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

38 
	#ASTERISK_GPL_KEY
 \

39 "Thi†∑øgøph i†c›yrighà(cË2006 by Digium, Inc. \
 ordî f‹ you∏moduÀÅÿlﬂd, iàmu°Ñëu∫Åhi†\
 vüá fun˘i⁄ cÆÀd \"key\". Any codêwhich \
Åhi†∑øgøph mu° bêli˚n£d undîÅhêGNU \
 Publi¯Li˚n£ vîsi⁄ 2 o∏œã∏◊àyou∏\
). I¿addôi⁄ÅÿDigium'†gíîÆÑe£rv©i⁄†\
Ñights, DigiumÉx¥es¶yÑe£rve†thêrighàtÿ\
 othîÖ¨tõ†tÿli˚n£Åhi†∑øgøph undî \
Åîms. Any u£ o‡Digium, Inc.Åødem¨k†‹ \
 (ö˛udög \"A°îisk\" o∏\"Digium\"Ëwôhouà\
 wrôã¿≥rmissi⁄ o‡Digium, Inc. i†¥ohibôed.\n"

	)

51 
	#AST_MODULE_CONFIG
 "moduÀs.c⁄f"

	)

53 
	ea°_moduÀ_u∆ﬂd_mode
 {

54 
AST_FORCE_SOFT
 = 0,

55 
AST_FORCE_FIRM
 = 1,

56 
AST_FORCE_HARD
 = 2,

60 
	ea°_moduÀ_lﬂd_ªsu…
 {

61 
AST_MODULE_LOAD_SUCCESS
 = 0,

62 
AST_MODULE_LOAD_DECLINE
 = 1,

63 
AST_MODULE_LOAD_SKIP
 = 2,

64 
AST_MODULE_LOAD_FAILURE
 = -1,

77 
a°_moduÀ_lﬂd_ªsu…
 
a°_lﬂd_ªsour˚
(c⁄° *
ªsour˚_«me
);

91 
a°_u∆ﬂd_ªsour˚
(c⁄° *
ªsour˚_«me
, 
a°_moduÀ_u∆ﬂd_mode
);

101 
a°_upd©e_u£_cou¡
();

113 
a°_upd©e_moduÀ_li°
((*
modíåy
)(c⁄° *
moduÀ
, c⁄° *
des¸ùti⁄
, 
u£˙t
, c⁄° *
like
),

114 c⁄° *
like
);

125 
a°_lﬂdî_ªgi°î
((*
upd©î
)());

135 
a°_lﬂdî_uƒegi°î
((*
upd©î
)());

142 
a°_moduÀ_shutdown
();

160 *
a°_moduÀ_hñ≥r
(c⁄° *
löe
, c⁄° *
w‹d
, 
pos
, 
°©e
, 
Ωos
, 
√ed§ñﬂd
);

164 
a°_moduÀ
;

170 
a°_moduÀ_u£r
;

171 
a°_moduÀ_u£r_li°
;

179 
	ea°_moduÀ_Êags
 {

180 
AST_MODFLAG_DEFAULT
 = 0,

181 
AST_MODFLAG_GLOBAL_SYMBOLS
 = (1 << 0),

182 
AST_MODFLAG_BUILDSUM
 = (1 << 1),

185 
	sa°_moduÀ_öfo
 {

193 
a°_moduÀ
 *
£lf
;

194 
a°_moduÀ_lﬂd_ªsu…
 (*
lﬂd
)();

195 (*
ªlﬂd
)();

196 (*
u∆ﬂd
)();

197 c⁄° *
«me
;

198 c⁄° *
des¸ùti⁄
;

206 c⁄° *
key
;

207 
Êags
;

210 c⁄° 
buûd›t_sum
[33];

213 
a°_moduÀ_ªgi°î
(c⁄° 
a°_moduÀ_öfo
 *);

214 
a°_moduÀ_uƒegi°î
(c⁄° 
a°_moduÀ_öfo
 *);

216 
a°_moduÀ_u£r
 *
__a°_moduÀ_u£r_add
(
a°_moduÀ
 *, 
a°_ch™√l
 *);

217 
__a°_moduÀ_u£r_ªmove
(
a°_moduÀ
 *, 
a°_moduÀ_u£r
 *);

218 
__a°_moduÀ_u£r_h™gup_Æl
(
a°_moduÀ
 *);

220 
	#a°_moduÀ_u£r_add
(
ch™
Ë
	`__a°_moduÀ_u£r_add
(
a°_moduÀ_öfo
->
£lf
, ch™)

	)

221 
	#a°_moduÀ_u£r_ªmove
(
u£r
Ë
	`__a°_moduÀ_u£r_ªmove
(
a°_moduÀ_öfo
->
£lf
, u£r)

	)

222 
	#a°_moduÀ_u£r_h™gup_Æl
(Ë
	`__a°_moduÀ_u£r_h™gup_Æl
(
a°_moduÀ_öfo
->
£lf
)

	)

224 
a°_moduÀ
 *
a°_moduÀ_ªf
(ast_module *);

225 
a°_moduÀ_uƒef
(
a°_moduÀ
 *);

227 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

228 
	#AST_MODULE_INFO
(
key°r
, 
Êags_to_£t
, 
desc
, 
lﬂd_func
, 
u∆ﬂd_func
, 
ªlﬂd_func
) \

229 
a°_moduÀ_öfo
 
__mod_öfo
 = { \

230 
NULL
, \

231 
lﬂd_func
, \

232 
ªlﬂd_func
, \

233 
u∆ﬂd_func
, \

234 
AST_MODULE
, \

235 
desc
, \

236 
key°r
, \

237 
Êags_to_£t
 | 
AST_MODFLAG_BUILDSUM
, \

238 
AST_BUILDOPT_SUM
, \

240 
	`__©åibuã__
 ((
c⁄°ru˘‹
)Ë
	`__ªg_moduÀ
() \

242 
	`a°_moduÀ_ªgi°î
(&
__mod_öfo
); \

244 
	`__©åibuã__
 ((
de°ru˘‹
)Ë
	`__uƒeg_moduÀ
() \

246 
	`a°_moduÀ_uƒegi°î
(&
__mod_öfo
); \

248 c⁄° 
	`__©åibuã__
((
unu£d
)Ë
a°_moduÀ_öfo
 *a°_moduÀ_öfÿ&
__mod_öfo


	)

250 
	#AST_MODULE_INFO_STANDARD
(
key°r
, 
desc
) \

251 
	`AST_MODULE_INFO
(
key°r
, 
AST_MODFLAG_DEFAULT
, 
desc
, \

252 
lﬂd_moduÀ
, \

253 
u∆ﬂd_moduÀ
, \

254 
NULL
 \

255 )

	)

260 c⁄° 
__©åibuã__
((
unu£d
)Ë
a°_moduÀ_öfo
 *ast_module_info;

262 
	#AST_MODULE_INFO
(
key°r
, 
Êags_to_£t
, 
desc
, 
fõlds
...) \

263 
a°_moduÀ_öfo
 
__mod_öfo
 = { \

264 .
«me
 = 
AST_MODULE
, \

265 .
Êags
 = 
Êags_to_£t
 | 
AST_MODFLAG_BUILDSUM
, \

266 .
des¸ùti⁄
 = 
desc
, \

267 .
key
 = 
key°r
, \

268 .
buûd›t_sum
 = 
AST_BUILDOPT_SUM
, \

269 
fõlds
 \

271 
	`__©åibuã__
 ((
c⁄°ru˘‹
)Ë
	`__ªg_moduÀ
() \

273 
	`a°_moduÀ_ªgi°î
(&
__mod_öfo
); \

275 
	`__©åibuã__
 ((
de°ru˘‹
)Ë
	`__uƒeg_moduÀ
() \

277 
	`a°_moduÀ_uƒegi°î
(&
__mod_öfo
); \

279 c⁄° 
a°_moduÀ_öfo
 *a°_moduÀ_öfÿ&
__mod_öfo


	)

281 
	#AST_MODULE_INFO_STANDARD
(
key°r
, 
desc
) \

282 
	`AST_MODULE_INFO
(
key°r
, 
AST_MODFLAG_DEFAULT
, 
desc
, \

283 .
lﬂd
 = 
lﬂd_moduÀ
, \

284 .
u∆ﬂd
 = 
u∆ﬂd_moduÀ
, \

285 )

	)

288 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

	@/usr/include/asterisk/musiconhold.h

23 #i‚de‡
_ASTERISK_MOH_H


24 
	#_ASTERISK_MOH_H


	)

26 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

42 
a°_moh_°¨t
(
a°_ch™√l
 *
ch™
, c⁄° *
m˛ass
, c⁄° *
öãΩ˛ass
);

45 
a°_moh_°›
(
a°_ch™√l
 *
ch™
);

47 
a°_ö°Æl_music_fun˘i⁄s
((*
°¨t_±r
)(
a°_ch™√l
 *, const *, const *),

48 (*
°›_±r
)(
a°_ch™√l
 *),

49 (*
˛ónup_±r
)(
a°_ch™√l
 *));

51 
a°_unö°Æl_music_fun˘i⁄s
();

53 
a°_moh_˛ónup
(
a°_ch™√l
 *
ch™
);

55 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

	@/usr/include/asterisk/options.h

23 #i‚de‡
_ASTERISK_OPTIONS_H


24 
	#_ASTERISK_OPTIONS_H


	)

26 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

30 
	#AST_CACHE_DIR_LEN
 512

	)

31 
	#AST_FILENAME_MAX
 80

	)

32 
	#AST_CHANNEL_NAME
 80

	)

35 
	ea°_›ti⁄_Êags
 {

37 
AST_OPT_FLAG_EXEC_INCLUDES
 = (1 << 0),

39 
AST_OPT_FLAG_NO_FORK
 = (1 << 1),

41 
AST_OPT_FLAG_QUIET
 = (1 << 2),

43 
AST_OPT_FLAG_CONSOLE
 = (1 << 3),

45 
AST_OPT_FLAG_HIGH_PRIORITY
 = (1 << 4),

47 
AST_OPT_FLAG_INIT_KEYS
 = (1 << 5),

49 
AST_OPT_FLAG_REMOTE
 = (1 << 6),

51 
AST_OPT_FLAG_EXEC
 = (1 << 7),

53 
AST_OPT_FLAG_NO_COLOR
 = (1 << 8),

55 
AST_OPT_FLAG_FULLY_BOOTED
 = (1 << 9),

57 
AST_OPT_FLAG_TRANSCODE_VIA_SLIN
 = (1 << 10),

59 
AST_OPT_FLAG_PRIORITY_JUMPING
 = (1 << 11),

61 
AST_OPT_FLAG_DUMP_CORE
 = (1 << 12),

63 
AST_OPT_FLAG_CACHE_RECORD_FILES
 = (1 << 13),

65 
AST_OPT_FLAG_TIMESTAMP
 = (1 << 14),

67 
AST_OPT_FLAG_OVERRIDE_CONFIG
 = (1 << 15),

69 
AST_OPT_FLAG_RECONNECT
 = (1 << 16),

71 
AST_OPT_FLAG_TRANSMIT_SILENCE
 = (1 << 17),

73 
AST_OPT_FLAG_DONT_WARN
 = (1 << 18),

75 
AST_OPT_FLAG_END_CDR_BEFORE_H_EXTEN
 = (1 << 19),

77 
AST_OPT_FLAG_INTERNAL_TIMING
 = (1 << 20),

79 
AST_OPT_FLAG_ALWAYS_FORK
 = (1 << 21),

81 
AST_OPT_FLAG_MUTE
 = (1 << 22)

85 
	#AST_DEFAULT_OPTIONS
 
AST_OPT_FLAG_TRANSCODE_VIA_SLIN


	)

87 
	#a°_›t_exec_ö˛udes
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_EXEC_INCLUDES
)

	)

88 
	#a°_›t_no_f‹k
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_NO_FORK
)

	)

89 
	#a°_›t_quõt
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_QUIET
)

	)

90 
	#a°_›t_c⁄sﬁe
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_CONSOLE
)

	)

91 
	#a°_›t_high_¥i‹ôy
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_HIGH_PRIORITY
)

	)

92 
	#a°_›t_öô_keys
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_INIT_KEYS
)

	)

93 
	#a°_›t_ªmŸe
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_REMOTE
)

	)

94 
	#a°_›t_exec
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_EXEC
)

	)

95 
	#a°_›t_no_cﬁ‹
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_NO_COLOR
)

	)

96 
	#a°_fuŒy_boŸed
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_FULLY_BOOTED
)

	)

97 
	#a°_›t_å™scode_vü_¶ö
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_TRANSCODE_VIA_SLIN
)

	)

98 
	#a°_›t_¥i‹ôy_jumpög
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_PRIORITY_JUMPING
)

	)

99 
	#a°_›t_dump_c‹e
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_DUMP_CORE
)

	)

100 
	#a°_›t_ˇche_ªc‹d_fûes
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_CACHE_RECORD_FILES
)

	)

101 
	#a°_›t_time°amp
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_TIMESTAMP
)

	)

102 
	#a°_›t_ovîride_c⁄fig
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_OVERRIDE_CONFIG
)

	)

103 
	#a°_›t_ªc⁄√˘
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_RECONNECT
)

	)

104 
	#a°_›t_å™smô_sûí˚
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_TRANSMIT_SILENCE
)

	)

105 
	#a°_›t_d⁄t_w¨n
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_DONT_WARN
)

	)

106 
	#a°_›t_íd_cdr_bef‹e_h_exãn
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_END_CDR_BEFORE_H_EXTEN
)

	)

107 
	#a°_›t_öã∫Æ_timög
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_INTERNAL_TIMING
)

	)

108 
	#a°_›t_Æways_f‹k
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_ALWAYS_FORK
)

	)

109 
	#a°_›t_muã
 
	`a°_ã°_Êag
(&
a°_›ti⁄s
, 
AST_OPT_FLAG_MUTE
)

	)

111 
a°_Êags
 
a°_›ti⁄s
;

113 
›ti⁄_vîbo£
;

114 
›ti⁄_debug
;

115 
›ti⁄_maxˇŒs
;

116 
›ti⁄_maxlﬂd
;

117 
deÁu…œnguage
[];

119 
time_t
 
a°_°¨tu±ime
;

120 
time_t
 
a°_œ°ªlﬂdtime
;

121 
pid_t
 
a°_maöpid
;

123 
ªc‹d_ˇche_dú
[
AST_CACHE_DIR_LEN
];

124 
debug_fûíame
[
AST_FILENAME_MAX
];

125 c⁄° *
dahdi_ch™_«me
;

126 c⁄° 
size_t
 *
dahdi_ch™_«me_Àn
;

127 c⁄° 
	edahdi_ch™_modes
 {

128 
CHAN_ZAP_MODE
,

129 
CHAN_DAHDI_PLUS_ZAP_MODE
,

130 } *
dahdi_ch™_mode
;

132 
a°_œnguage_is_¥efix
;

134 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

	@/usr/include/asterisk/pbx.h

23 #i‚de‡
_ASTERISK_PBX_H


24 
	#_ASTERISK_PBX_H


	)

26 
	~"a°îisk/sched.h
"

27 
	~"a°îisk/ch™√l.h
"

28 
	~"a°îisk/lökedli°s.h
"

30 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

34 
	#AST_MAX_APP
 32

	)

36 
	#AST_PBX_KEEP
 0

	)

37 
	#AST_PBX_REPLACE
 1

	)

40 
	#AST_PBX_KEEPALIVE
 10

	)

41 
	#AST_PBX_NO_HANGUP_PEER
 11

	)

44 
	#PRIORITY_HINT
 -1

	)

47 
	ea°_exãnsi⁄_°©es
 {

48 
AST_EXTENSION_REMOVED
 = -2,

49 
AST_EXTENSION_DEACTIVATED
 = -1,

50 
AST_EXTENSION_NOT_INUSE
 = 0,

51 
AST_EXTENSION_INUSE
 = 1 << 0,

52 
AST_EXTENSION_BUSY
 = 1 << 1,

53 
AST_EXTENSION_UNAVAILABLE
 = 1 << 2,

54 
AST_EXTENSION_RINGING
 = 1 << 3,

55 
AST_EXTENSION_ONHOLD
 = 1 << 4,

59 
a°_c⁄ãxt
;

60 
a°_exãn
;

61 
a°_ö˛ude
;

62 
a°_ign‹ï©
;

63 
a°_sw
;

66 (*
a°_°©e_cb_ty≥
)(*
	tc⁄ãxt
, * 
	tid
, 
	ta°_exãnsi⁄_°©es
 
	t°©e
, *
	td©a
);

69 
	sa°_cu°om_fun˘i⁄
 {

70 c⁄° *
«me
;

71 c⁄° *
syn›sis
;

72 c⁄° *
desc
;

73 c⁄° *
sy¡ax
;

74 (*
ªad
)(
a°_ch™√l
 *, *, *, *, 
size_t
);

75 (*
wrôe
)(
a°_ch™√l
 *, *, *, const *);

76 
AST_LIST_ENTRY
(
a°_cu°om_fun˘i⁄
Ë
acÊi°
;

80 (
a°_swôch_f
)(
	ta°_ch™√l
 *
	tch™
, c⁄° *
	tc⁄ãxt
,

81 c⁄° *
	texãn
, 
	t¥i‹ôy
, c⁄° *
	tˇŒîid
, c⁄° *
	td©a
);

84 
	sa°_swôch
 {

85 
AST_LIST_ENTRY
(
a°_swôch
Ë
li°
;

86 c⁄° *
«me
;

87 c⁄° *
des¸ùti⁄
;

89 
a°_swôch_f
 *
exi°s
;

90 
a°_swôch_f
 *
ˇnm©ch
;

91 
a°_swôch_f
 *
exec
;

92 
a°_swôch_f
 *
m©chm‹e
;

95 
	sa°_timög
 {

96 
ha°ime
;

97 
m⁄thmask
;

98 
daymask
;

99 
dowmask
;

100 
mömask
[24];

103 
a°_buûd_timög
(
a°_timög
 *
i
, c⁄° *
öfo
);

104 
a°_check_timög
(c⁄° 
a°_timög
 *
i
);

106 
	sa°_pbx
 {

107 
dtimeout
;

108 
πimeout
;

122 
a°_ªgi°î_swôch
(
a°_swôch
 *
sw
);

133 
a°_uƒegi°î_swôch
(
a°_swôch
 *
sw
);

146 
a°_≠p
 *
pbx_föd≠p
(c⁄° *
≠p
);

161 
pbx_exec
(
a°_ch™√l
 *
c
, 
a°_≠p
 *
≠p
, *
d©a
);

176 
a°_c⁄ãxt
 *
a°_c⁄ãxt_¸óã
(a°_c⁄ãxà**
extc⁄ãxts
, c⁄° *
«me
, c⁄° *
ªgi°ør
);

177 
a°_c⁄ãxt
 *
a°_c⁄ãxt_föd_‹_¸óã
(a°_c⁄ãxà**
extc⁄ãxts
, c⁄° *
«me
, c⁄° *
ªgi°ør
);

188 
a°_mîge_c⁄ãxts_™d_dñëe
(
a°_c⁄ãxt
 **
extc⁄ãxts
, c⁄° *
ªgi°ør
);

201 
a°_c⁄ãxt_de°roy
(
a°_c⁄ãxt
 *
c⁄
, c⁄° *
ªgi°ør
);

212 
a°_c⁄ãxt
 *
a°_c⁄ãxt_föd
(c⁄° *
«me
);

214 
	ea°_pbx_ªsu…
 {

215 
AST_PBX_SUCCESS
 = 0,

216 
AST_PBX_FAILED
 = -1,

217 
AST_PBX_CALL_LIMIT
 = -2,

230 
a°_pbx_ªsu…
 
a°_pbx_°¨t
(
a°_ch™√l
 *
c
);

244 
a°_pbx_ªsu…
 
a°_pbx_run
(
a°_ch™√l
 *
c
);

263 
a°_add_exãnsi⁄
(c⁄° *
c⁄ãxt
, 
ª∂a˚
, c⁄° *
exãnsi⁄
,

264 
¥i‹ôy
, c⁄° *
œbñ
, c⁄° *
ˇŒîid
,

265 c⁄° *
≠∂iˇti⁄
, *
d©a
, (*
d©ad
)(*), c⁄° *
ªgi°ør
);

272 
a°_add_exãnsi⁄2
(
a°_c⁄ãxt
 *
c⁄
, 
ª∂a˚
, c⁄° *
exãnsi⁄
,

273 
¥i‹ôy
, c⁄° *
œbñ
, c⁄° *
ˇŒîid
,

274 c⁄° *
≠∂iˇti⁄
, *
d©a
, (*
d©ad
)(*), c⁄° *
ªgi°ør
);

294 
a°_ªgi°î_≠∂iˇti⁄
(c⁄° *
≠p
, (*
execuã
)(
a°_ch™√l
 *, *),

295 c⁄° *
syn›sis
, c⁄° *
des¸ùti⁄
);

307 
a°_uƒegi°î_≠∂iˇti⁄
(c⁄° *
≠p
);

318 
a°_exãnsi⁄_°©e
(
a°_ch™√l
 *
c
, c⁄° *
c⁄ãxt
, c⁄° *
exãn
);

327 c⁄° *
a°_exãnsi⁄_°©e2°r
(
exãnsi⁄_°©e
);

342 
a°_exãnsi⁄_°©e_add
(c⁄° *
c⁄ãxt
, c⁄° *
exãn
,

343 
a°_°©e_cb_ty≥
 
ˇŒback
, *
d©a
);

356 
a°_exãnsi⁄_°©e_dñ
(
id
, 
a°_°©e_cb_ty≥
 
ˇŒback
);

373 
a°_gë_höt
(*
höt
, 
maxÀn
, *
«me
, 
max«mñí
,

374 
a°_ch™√l
 *
c
, c⁄° *
c⁄ãxt
, c⁄° *
exãn
);

388 
a°_exi°s_exãnsi⁄
(
a°_ch™√l
 *
c
, c⁄° *
c⁄ãxt
, c⁄° *
exãn
,

389 
¥i‹ôy
, c⁄° *
ˇŒîid
);

402 
a°_födœbñ_exãnsi⁄
(
a°_ch™√l
 *
c
, c⁄° *
c⁄ãxt
,

403 c⁄° *
exãn
, c⁄° *
œbñ
, c⁄° *
ˇŒîid
);

412 
a°_födœbñ_exãnsi⁄2
(
a°_ch™√l
 *
c
, 
a°_c⁄ãxt
 *
c⁄
,

413 c⁄° *
exãn
, c⁄° *
œbñ
, c⁄° *
ˇŒîid
);

428 
a°_ˇnm©ch_exãnsi⁄
(
a°_ch™√l
 *
c
, c⁄° *
c⁄ãxt
,

429 c⁄° *
exãn
, 
¥i‹ôy
, c⁄° *
ˇŒîid
);

445 
a°_m©chm‹e_exãnsi⁄
(
a°_ch™√l
 *
c
, c⁄° *
c⁄ãxt
,

446 c⁄° *
exãn
, 
¥i‹ôy
, c⁄° *
ˇŒîid
);

459 
a°_exãnsi⁄_m©ch
(c⁄° *
∑âîn
, c⁄° *
exãnsi⁄
);

461 
a°_exãnsi⁄_˛o£
(c⁄° *
∑âîn
, c⁄° *
d©a
, 
√edm‹e
);

477 
a°_•awn_exãnsi⁄
(
a°_ch™√l
 *
c
, c⁄° *
c⁄ãxt
,

478 c⁄° *
exãn
, 
¥i‹ôy
, c⁄° *
ˇŒîid
);

492 
a°_c⁄ãxt_add_ö˛ude
(c⁄° *
c⁄ãxt
, c⁄° *
ö˛ude
,

493 c⁄° *
ªgi°ør
);

507 
a°_c⁄ãxt_add_ö˛ude2
(
a°_c⁄ãxt
 *
c⁄
, c⁄° *
ö˛ude
,

508 c⁄° *
ªgi°ør
);

518 
a°_c⁄ãxt_ªmove_ö˛ude
(c⁄° *
c⁄ãxt
, c⁄° *
ö˛ude
,

519 c⁄° *
ªgi°ør
);

529 
a°_c⁄ãxt_ªmove_ö˛ude2
(
a°_c⁄ãxt
 *
c⁄
, c⁄° *
ö˛ude
,

530 c⁄° *
ªgi°ør
);

540 
a°_c⁄ãxt_vîify_ö˛udes
(
a°_c⁄ãxt
 *
c⁄
);

556 
a°_c⁄ãxt_add_swôch
(c⁄° *
c⁄ãxt
, c⁄° *
sw
, c⁄° *
d©a
,

557 
evÆ
, c⁄° *
ªgi°ør
);

566 
a°_c⁄ãxt_add_swôch2
(
a°_c⁄ãxt
 *
c⁄
, c⁄° *
sw
, c⁄° *
d©a
,

567 
evÆ
, c⁄° *
ªgi°ør
);

577 
a°_c⁄ãxt_ªmove_swôch
(c⁄° *
c⁄ãxt
, c⁄° *
sw
,

578 c⁄° *
d©a
, c⁄° *
ªgi°ør
);

580 
a°_c⁄ãxt_ªmove_swôch2
(
a°_c⁄ãxt
 *
c⁄
, c⁄° *
sw
,

581 c⁄° *
d©a
, c⁄° *
ªgi°ør
);

598 
a°_c⁄ãxt_ªmove_exãnsi⁄
(c⁄° *
c⁄ãxt
, c⁄° *
exãnsi⁄
, 
¥i‹ôy
,

599 c⁄° *
ªgi°ør
);

601 
a°_c⁄ãxt_ªmove_exãnsi⁄2
(
a°_c⁄ãxt
 *
c⁄
, c⁄° *
exãnsi⁄
,

602 
¥i‹ôy
, c⁄° *
ªgi°ør
);

604 
a°_c⁄ãxt_ªmove_exãnsi⁄_ˇŒîid
(c⁄° *
c⁄ãxt
, c⁄° *
exãnsi⁄
,

605 
¥i‹ôy
, c⁄° *
ˇŒîid
, 
m©chcid
, c⁄° *
ªgi°ør
);

607 
a°_c⁄ãxt_ªmove_exãnsi⁄_ˇŒîid2
(
a°_c⁄ãxt
 *
c⁄
, c⁄° *
exãnsi⁄
,

608 
¥i‹ôy
, c⁄° *
ˇŒîid
, 
m©chcid
, c⁄° *
ªgi°ør
);

622 
a°_c⁄ãxt_add_ign‹ï©
(c⁄° *
c⁄ãxt
, c⁄° *
ign‹ï©
, c⁄° *
ªgi°ør
);

624 
a°_c⁄ãxt_add_ign‹ï©2
(
a°_c⁄ãxt
 *
c⁄
, c⁄° *
ign‹ï©
, c⁄° *
ªgi°ør
);

638 
a°_c⁄ãxt_ªmove_ign‹ï©
(c⁄° *
c⁄ãxt
, c⁄° *
ign‹ï©
, c⁄° *
ªgi°ør
);

640 
a°_c⁄ãxt_ªmove_ign‹ï©2
(
a°_c⁄ãxt
 *
c⁄
, c⁄° *
ign‹ï©
, c⁄° *
ªgi°ør
);

653 
a°_ign‹e_∑âîn
(c⁄° *
c⁄ãxt
, c⁄° *
∑âîn
);

663 
a°_lock_c⁄ãxts
();

664 
a°_rdlock_c⁄ãxts
();

665 
a°_wæock_c⁄ãxts
();

673 
a°_u∆ock_c⁄ãxts
();

683 
a°_lock_c⁄ãxt
(
a°_c⁄ãxt
 *
c⁄
);

693 
a°_u∆ock_c⁄ãxt
(
a°_c⁄ãxt
 *
c⁄
);

705 
a°_c⁄ãxt_lockma¸o
(c⁄° *
ma¸oc⁄ãxt
);

717 
a°_c⁄ãxt_u∆ockma¸o
(c⁄° *
ma¸oc⁄ãxt
);

719 
a°_async_gŸo
(
a°_ch™√l
 *
ch™
, c⁄° *
c⁄ãxt
, c⁄° *
exãn
, 
¥i‹ôy
);

721 
a°_async_gŸo_by_«me
(c⁄° *
ch™
, c⁄° *
c⁄ãxt
, c⁄° *
exãn
, 
¥i‹ôy
);

725 
a°_pbx_outgoög_exãn
(c⁄° *
ty≥
, 
f‹m©
, *
d©a
, 
timeout
, c⁄° *
c⁄ãxt
, c⁄° *
exãn
, 
¥i‹ôy
, *
ªas⁄
, 
sync
, c⁄° *
cid_num
, c⁄° *
cid_«me
, 
a°_v¨übÀ
 *
v¨s
, c⁄° *
accou¡
, 
a°_ch™√l
 **
locked_ch™√l
);

729 
a°_pbx_outgoög_≠p
(c⁄° *
ty≥
, 
f‹m©
, *
d©a
, 
timeout
, c⁄° *
≠p
, c⁄° *
≠pd©a
, *
ªas⁄
, 
sync
, c⁄° *
cid_num
, c⁄° *
cid_«me
, 
a°_v¨übÀ
 *
v¨s
, c⁄° *
accou¡
, 
a°_ch™√l
 **
locked_ch™√l
);

739 
pbx_checkc⁄dôi⁄
(c⁄° *
c⁄dôi⁄
);

742 c⁄° *
a°_gë_c⁄ãxt_«me
(
a°_c⁄ãxt
 *
c⁄
);

743 c⁄° *
a°_gë_exãnsi⁄_«me
(
a°_exãn
 *
exãn
);

744 
a°_c⁄ãxt
 *
a°_gë_exãnsi⁄_c⁄ãxt
(
a°_exãn
 *
exãn
);

745 c⁄° *
a°_gë_ö˛ude_«me
(
a°_ö˛ude
 *
ö˛ude
);

746 c⁄° *
a°_gë_ign‹ï©_«me
(
a°_ign‹ï©
 *
ù
);

747 c⁄° *
a°_gë_swôch_«me
(
a°_sw
 *
sw
);

748 c⁄° *
a°_gë_swôch_d©a
(
a°_sw
 *
sw
);

751 
a°_gë_exãnsi⁄_¥i‹ôy
(
a°_exãn
 *
exãn
);

752 
a°_gë_exãnsi⁄_m©chcid
(
a°_exãn
 *
e
);

753 c⁄° *
a°_gë_exãnsi⁄_cidm©ch
(
a°_exãn
 *
e
);

754 c⁄° *
a°_gë_exãnsi⁄_≠p
(
a°_exãn
 *
e
);

755 c⁄° *
a°_gë_exãnsi⁄_œbñ
(
a°_exãn
 *
e
);

756 *
a°_gë_exãnsi⁄_≠p_d©a
(
a°_exãn
 *
e
);

759 c⁄° *
a°_gë_c⁄ãxt_ªgi°ør
(
a°_c⁄ãxt
 *
c
);

760 c⁄° *
a°_gë_exãnsi⁄_ªgi°ør
(
a°_exãn
 *
e
);

761 c⁄° *
a°_gë_ö˛ude_ªgi°ør
(
a°_ö˛ude
 *
i
);

762 c⁄° *
a°_gë_ign‹ï©_ªgi°ør
(
a°_ign‹ï©
 *
ù
);

763 c⁄° *
a°_gë_swôch_ªgi°ør
(
a°_sw
 *
sw
);

766 
a°_c⁄ãxt
 *
a°_wÆk_c⁄ãxts
(a°_c⁄ãxà*
c⁄
);

767 
a°_exãn
 *
a°_wÆk_c⁄ãxt_exãnsi⁄s
(
a°_c⁄ãxt
 *
c⁄
,

768 
a°_exãn
 *
¥i‹ôy
);

769 
a°_exãn
 *
a°_wÆk_exãnsi⁄_¥i‹ôõs
(a°_exã¿*
exãn
,

770 
a°_exãn
 *
¥i‹ôy
);

771 
a°_ö˛ude
 *
a°_wÆk_c⁄ãxt_ö˛udes
(
a°_c⁄ãxt
 *
c⁄
,

772 
a°_ö˛ude
 *
öc
);

773 
a°_ign‹ï©
 *
a°_wÆk_c⁄ãxt_ign‹ï©s
(
a°_c⁄ãxt
 *
c⁄
,

774 
a°_ign‹ï©
 *
ù
);

775 
a°_sw
 *
a°_wÆk_c⁄ãxt_swôches
(
a°_c⁄ãxt
 *
c⁄
, a°_sw *
sw
);

780 
pbx_buûtö_£rülize_v¨übÀs
(
a°_ch™√l
 *
ch™
, *
buf
, 
size_t
 
size
);

785 c⁄° *
pbx_buûtö_gëv¨_hñ≥r
(
a°_ch™√l
 *
ch™
, c⁄° *
«me
);

790 
pbx_buûtö_pushv¨_hñ≥r
(
a°_ch™√l
 *
ch™
, c⁄° *
«me
, c⁄° *
vÆue
);

795 
pbx_buûtö_£tv¨_hñ≥r
(
a°_ch™√l
 *
ch™
, c⁄° *
«me
, c⁄° *
vÆue
);

800 
pbx_ªåõve_v¨übÀ
(
a°_ch™√l
 *
c
, c⁄° *
v¨
, **
ªt
, *
w‹k•a˚
, 
w‹k•a˚Àn
, 
v¨shód
 *
hódp
);

801 
pbx_buûtö_˛ór_globÆs
();

806 
pbx_buûtö_£tv¨
(
a°_ch™√l
 *
ch™
, *
d©a
);

808 
pbx_sub°ôuã_v¨übÀs_hñ≥r
(
a°_ch™√l
 *
c
,c⁄° *
˝1
,*
˝2
,
cou¡
);

809 
pbx_sub°ôuã_v¨übÀs_v¨shód
(
v¨shód
 *
hódp
, c⁄° *
˝1
, *
˝2
, 
cou¡
);

811 
a°_exãnsi⁄_∑tm©ch
(c⁄° *
∑âîn
, c⁄° *
d©a
);

816 
pbx_£t_autoÁŒthrough
(
√wvÆ
);

821 
a°_gŸo_if_exi°s
(
a°_ch™√l
 *
ch™
, c⁄° *
c⁄ãxt
, c⁄° *
exãn
, 
¥i‹ôy
);

830 
a°_∑r£abÀ_gŸo
(
a°_ch™√l
 *
ch™
, c⁄° *
gŸo_°rög
);

835 
a°_ex∂icô_gŸo
(
a°_ch™√l
 *
ch™
, c⁄° *
c⁄ãxt
, c⁄° *
exãn
, 
¥i‹ôy
);

840 
a°_async_gŸo_if_exi°s
(
a°_ch™√l
 *
ch™
, c⁄° *
c⁄ãxt
, c⁄° *
exãn
, 
¥i‹ôy
);

842 
a°_cu°om_fun˘i⁄
* 
a°_cu°om_fun˘i⁄_föd
(c⁄° *
«me
);

847 
a°_cu°om_fun˘i⁄_uƒegi°î
(
a°_cu°om_fun˘i⁄
 *
acf
);

852 
a°_cu°om_fun˘i⁄_ªgi°î
(
a°_cu°om_fun˘i⁄
 *
acf
);

857 
a°_a˘ive_ˇŒs
();

871 
a°_func_ªad
(
a°_ch™√l
 *
ch™
, *
fun˘i⁄
, *
w‹k•a˚
, 
size_t
 
Àn
);

884 
a°_func_wrôe
(
a°_ch™√l
 *
ch™
, *
fun˘i⁄
, c⁄° *
vÆue
);

886 
a°_höt_°©e_ch™ged
(c⁄° *
devi˚
);

888 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

	@/usr/include/asterisk/stringfields.h

82 #i‚de‡
_ASTERISK_STRINGFIELDS_H


83 
	#_ASTERISK_STRINGFIELDS_H


	)

85 
	~<°rög.h
>

86 
	~<°d¨g.h
>

87 
	~<°ddef.h
>

89 
	~"a°îisk/ölöe_≠i.h
"

90 
	~"a°îisk/compûî.h
"

91 
	~"a°îisk/com∑t.h
"

100 c⁄° * 
	ta°_°rög_fõld
;

106 c⁄° 
__a°_°rög_fõld_em±y
[];

112 
	sa°_°rög_fõld_poﬁ
 {

113 
a°_°rög_fõld_poﬁ
 *
	m¥ev
;

114 
	mba£
[0];

121 
	sa°_°rög_fõld_mgr
 {

122 
a°_°rög_fõld_poﬁ
 *
	mpoﬁ
;

123 
size_t
 
	msize
;

124 
size_t
 
	m•a˚
;

125 
size_t
 
	mu£d
;

137 
__a°_°rög_fõld_öô
(
a°_°rög_fõld_mgr
 *
mgr
, 
size_t
 
size
,

138 
a°_°rög_fõld
 *
fõlds
, 
num_fõlds
);

153 
a°_°rög_fõld
 
__a°_°rög_fõld_Æloc_•a˚
(
a°_°rög_fõld_mgr
 *
mgr
, 
size_t
 
√eded
,

154 
a°_°rög_fõld
 *
fõlds
, 
num_fõlds
);

166 
__a°_°rög_fõld_ödex_buûd
(
a°_°rög_fõld_mgr
 *
mgr
,

167 
a°_°rög_fõld
 *
fõlds
, 
num_fõlds
,

168 
ödex
, c⁄° *
f‹m©
, ...);

182 
__a°_°rög_fõld_ödex_buûd_va
(
a°_°rög_fõld_mgr
 *
mgr
,

183 
a°_°rög_fõld
 *
fõlds
, 
num_fõlds
,

184 
ödex
, c⁄° *
f‹m©
, 
va_li°
 
a1
, va_li° 
a2
);

190 
	#AST_STRING_FIELD
(
«me
Ëc⁄° 
a°_°rög_fõld
 
	)
name

196 
	#AST_DECLARE_STRING_FIELDS
(
fõld_li°
) \

197 
a°_°rög_fõld
 
__begö_fõld
[0]; \

198 
fõld_li°
 \

199 
a°_°rög_fõld
 
__íd_fõld
[0]; \

200 
a°_°rög_fõld_mgr
 
__fõld_mgr


	)

207 
	#a°_°rög_fõld_cou¡
(
x
) \

208 (
	`off£tof
(
	`ty≥of
(*(
x
)), 
__íd_fõld
Ë- off£tof—y≥of(*(x)), 
__begö_fõld
)Ë/ (
a°_°rög_fõld
)

	)

217 
	#a°_°rög_fõld_ödex
(
x
, 
fõld
) \

218 (
	`off£tof
(
	`ty≥of
(*
x
), 
fõld
Ë- off£tof—y≥of(*x), 
__begö_fõld
)Ë/ (
a°_°rög_fõld
)

	)

226 
	#a°_°rög_fõld_öô
(
x
, 
size
) \

227 
	`__a°_°rög_fõld_öô
(&(
x
)->
__fõld_mgr
, 
size
, &(x)->
__begö_fõld
[0], 
	`a°_°rög_fõld_cou¡
(x))

	)

236 
	#a°_°rög_fõld_ödex_£t
(
x
, 
ödex
, 
d©a
) do { \

237 *
__zz__
 = (*Ë(
x
)->
__begö_fõld
[
ödex
]; \

238 
size_t
 
__dÀn__
 = 
	`°æí
(
d©a
) + 1; \

239 i‡–
__dÀn__
 == 1 ) {\

240 (
x
)->
__begö_fõld
[
ödex
] = 
__a°_°rög_fõld_em±y
; \

242 i‡((
__zz__
[0] !0Ë&& (
__dÀn__
 <(
	`°æí
(__zz__) + 1))) { \

243 
	`mem˝y
(
__zz__
, 
d©a
, 
__dÀn__
); \

245 i‡(((
x
)->
__begö_fõld
[
ödex
] = 
	`__a°_°rög_fõld_Æloc_•a˚
(&(x)->
__fõld_mgr
, 
__dÀn__
, &(x)->__begö_fõld[0], 
	`a°_°rög_fõld_cou¡
(x)))) \

246 
	`mem˝y
((*Ë(
x
)->
__begö_fõld
[
ödex
], 
d©a
, 
__dÀn__
); \

249 } 0)

	)

251 
	#a°_°rög_fõld_ödex_log£t
(
x
, 
ödex
, 
d©a
, 
log°r
) do { \

252 *
__zz__
 = (*Ë(
x
)->
__begö_fõld
[
ödex
]; \

253 
size_t
 
__dÀn__
 = 
	`°æí
(
d©a
) + 1; \

254 i‡–
__dÀn__
 == 1 ) {\

255 (
x
)->
__begö_fõld
[
ödex
] = 
__a°_°rög_fõld_em±y
; \

257 i‡((
__zz__
[0] !0Ë&& (
__dÀn__
 <
	`°æí
(__zz__) + 1)) { \

258 
	`a°_vîbo£
("%s: =====Ùïœcög '%s' wôh '%s'\n", 
log°r
, 
__zz__
, 
d©a
); \

259 
	`mem˝y
(
__zz__
, 
d©a
, 
__dÀn__
); \

261 i‡(((
x
)->
__begö_fõld
[
ödex
] = 
	`__a°_°rög_fõld_Æloc_•a˚
(&(x)->
__fõld_mgr
, 
__dÀn__
, &(x)->__begö_fõld[0], 
	`a°_°rög_fõld_cou¡
(x)))) \

262 
	`a°_vîbo£
("%s: ++++++ÆloˇtögÑoom f‹ '%s'Åÿª∂a˚ '%s'\n", 
log°r
, 
d©a
, 
__zz__
); \

263 
	`mem˝y
((*Ë(
x
)->
__begö_fõld
[
ödex
], 
d©a
, 
__dÀn__
); \

266 } 0)

	)

275 
	#a°_°rög_fõld_£t
(
x
, 
fõld
, 
d©a
) \

276 
	`a°_°rög_fõld_ödex_£t
(
x
, 
	`a°_°rög_fõld_ödex
(x, 
fõld
), 
d©a
)

	)

278 
	#a°_°rög_fõld_log£t
(
x
, 
fõld
, 
d©a
, 
log°r
) \

279 
	`a°_°rög_fõld_ödex_log£t
(
x
, 
	`a°_°rög_fõld_ödex
(x, 
fõld
), 
d©a
, 
log°r
)

	)

289 
	#a°_°rög_fõld_ödex_buûd
(
x
, 
ödex
, 
fmt
, 
¨gs
...) \

290 
	`__a°_°rög_fõld_ödex_buûd
(&(
x
)->
__fõld_mgr
, &(x)->
__begö_fõld
[0], 
	`a°_°rög_fõld_cou¡
(x), 
ödex
, 
fmt
, 
¨gs
)

	)

301 
	#a°_°rög_fõld_ödex_buûd_va
(
x
, 
ödex
, 
fmt
, 
¨gs1
, 
¨gs2
) \

302 
	`__a°_°rög_fõld_ödex_buûd_va
(&(
x
)->
__fõld_mgr
, &(x)->
__begö_fõld
[0], 
	`a°_°rög_fõld_cou¡
(x), 
ödex
, 
fmt
, 
¨gs1
, 
¨gs2
)

	)

312 
	#a°_°rög_fõld_buûd
(
x
, 
fõld
, 
fmt
, 
¨gs
...) \

313 
	`a°_°rög_fõld_ödex_buûd
(
x
, 
	`a°_°rög_fõld_ödex
(x, 
fõld
), 
fmt
, 
¨gs
)

	)

323 
	#a°_°rög_fõld_buûd_va
(
x
, 
fõld
, 
fmt
, 
¨gs1
, 
¨gs2
) \

324 
	`a°_°rög_fõld_ödex_buûd_va
(
x
, 
	`a°_°rög_fõld_ödex
(x, 
fõld
), 
fmt
, 
¨gs1
, 
¨gs2
)

	)

336 
	#a°_°rög_fõld_ödex_‰ì
(
x
, 
ödex
) do { \

337 (
x
)->
__begö_fõld
[
ödex
] = 
__a°_°rög_fõld_em±y
; \

338 } 0)

	)

350 
	#a°_°rög_fõld_‰ì
(
x
, 
fõld
) \

351 
	`a°_°rög_fõld_ödex_‰ì
(
x
, 
	`a°_°rög_fõld_ödex
(x, 
fõld
))

	)

362 
	#a°_°rög_fõld_‰ì_mem‹y
(
x
) do { \

363 
a°_°rög_fõld_poﬁ
 *
this
, *
¥ev
; \

364 
this
 = (
x
)->
__fõld_mgr
.
poﬁ
;Åhis;Åhi†
¥ev
) { \

365 
¥ev
 = 
this
->prev; \

366 
	`‰ì
(
this
); \

368 } 0)

	)

379 
	#a°_°rög_fõld_ª£t_Æl
(
x
) do { \

380 
ödex
; \

381 
ödex
 = 0; index < 
	`a°_°rög_fõld_cou¡
(
x
); index++) \

382 
	`a°_°rög_fõld_ödex_‰ì
(
x
, 
ödex
); \

383 (
x
)->
__fõld_mgr
.
u£d
 = 0; \

384 (
x
)->
__fõld_mgr
.
•a˚
 = (x)->__fõld_mgr.
size
; \

385 } 0)

	)

	@/usr/include/asterisk/utils.h

23 #i‚de‡
_ASTERISK_UTILS_H


24 
	#_ASTERISK_UTILS_H


	)

26 
	~"a°îisk/com∑t.h
"

28 
	~<°dlib.h
>

29 
	~<°dio.h
>

30 
	~<°d¨g.h
>

31 
	~<√töë/ö.h
>

32 
	~<¨∑/öë.h
>

33 
	~<√tdb.h
>

34 
	~<limôs.h
>

35 
	~<time.h
>

36 
	~<uni°d.h
>

38 
	~"a°îisk/lock.h
"

39 
	~"a°îisk/time.h
"

40 
	~"a°îisk/°rögs.h
"

41 
	~"a°îisk/loggî.h
"

42 
	~"a°îisk/compûî.h
"

43 
	~"a°îisk/loˇ…ime.h
"

68 
__unsig√d_öt_Êags_dummy
;

70 
	#a°_ã°_Êag
(
p
,
Êag
) ({ \

71 
	`ty≥of
 ((
p
)->
Êags
Ë
__p
 = (p)->flags; \

72 
	`ty≥of
 (
__unsig√d_öt_Êags_dummy
Ë
__x
 = 0; \

73 (Ë(&
__p
 =&
__x
); \

74 ((
p
)->
Êags
 & (
Êag
)); \

75 })

	)

77 
	#a°_£t_Êag
(
p
,
Êag
) do { \

78 
	`ty≥of
 ((
p
)->
Êags
Ë
__p
 = (p)->flags; \

79 
	`ty≥of
 (
__unsig√d_öt_Êags_dummy
Ë
__x
 = 0; \

80 (Ë(&
__p
 =&
__x
); \

81 ((
p
)->
Êags
 |(
Êag
)); \

82 } 0)

	)

84 
	#a°_˛ór_Êag
(
p
,
Êag
) do { \

85 
	`ty≥of
 ((
p
)->
Êags
Ë
__p
 = (p)->flags; \

86 
	`ty≥of
 (
__unsig√d_öt_Êags_dummy
Ë
__x
 = 0; \

87 (Ë(&
__p
 =&
__x
); \

88 ((
p
)->
Êags
 &~(
Êag
)); \

89 } 0)

	)

91 
	#a°_c›y_Êags
(
de°
,
§c
,
Êagz
) do { \

92 
	`ty≥of
 ((
de°
)->
Êags
Ë
__d
 = (dest)->flags; \

93 
	`ty≥of
 ((
§c
)->
Êags
Ë
__s
 = (src)->flags; \

94 
	`ty≥of
 (
__unsig√d_öt_Êags_dummy
Ë
__x
 = 0; \

95 (Ë(&
__d
 =&
__x
); \

96 (Ë(&
__s
 =&
__x
); \

97 (
de°
)->
Êags
 &~(
Êagz
); \

98 (
de°
)->
Êags
 |((
§c
)->Êag†& (
Êagz
)); \

99 } 0)

	)

101 
	#a°_£t2_Êag
(
p
,
vÆue
,
Êag
) do { \

102 
	`ty≥of
 ((
p
)->
Êags
Ë
__p
 = (p)->flags; \

103 
	`ty≥of
 (
__unsig√d_öt_Êags_dummy
Ë
__x
 = 0; \

104 (Ë(&
__p
 =&
__x
); \

105 i‡(
vÆue
) \

106 (
p
)->
Êags
 |(
Êag
); \

108 (
p
)->
Êags
 &~(
Êag
); \

109 } 0)

	)

111 
	#a°_£t_Êags_to
(
p
,
Êag
,
vÆue
) do { \

112 
	`ty≥of
 ((
p
)->
Êags
Ë
__p
 = (p)->flags; \

113 
	`ty≥of
 (
__unsig√d_öt_Êags_dummy
Ë
__x
 = 0; \

114 (Ë(&
__p
 =&
__x
); \

115 (
p
)->
Êags
 &~(
Êag
); \

116 (
p
)->
Êags
 |(
vÆue
); \

117 } 0)

	)

122 
	#a°_ã°_Êag_n⁄°d
(
p
,
Êag
) \

123 ((
p
)->
Êags
 & (
Êag
))

	)

125 
	#a°_£t_Êag_n⁄°d
(
p
,
Êag
) do { \

126 ((
p
)->
Êags
 |(
Êag
)); \

127 } 0)

	)

129 
	#a°_˛ór_Êag_n⁄°d
(
p
,
Êag
) do { \

130 ((
p
)->
Êags
 &~(
Êag
)); \

131 } 0)

	)

133 
	#a°_c›y_Êags_n⁄°d
(
de°
,
§c
,
Êagz
) do { \

134 (
de°
)->
Êags
 &~(
Êagz
); \

135 (
de°
)->
Êags
 |((
§c
)->Êag†& (
Êagz
)); \

136 } 0)

	)

138 
	#a°_£t2_Êag_n⁄°d
(
p
,
vÆue
,
Êag
) do { \

139 i‡(
vÆue
) \

140 (
p
)->
Êags
 |(
Êag
); \

142 (
p
)->
Êags
 &~(
Êag
); \

143 } 0)

	)

145 
	#AST_FLAGS_ALL
 
UINT_MAX


	)

147 
	sa°_Êags
 {

148 
	mÊags
;

151 
	sa°_ho°ít
 {

152 
ho°ít
 
	mhp
;

153 
	mbuf
[1024];

156 
ho°ít
 *
a°_gëho°by«me
(c⁄° *
ho°
, 
a°_ho°ít
 *
hp
);

160 
a°_md5_hash
(*
ouçut
, *
öput
);

163 
a°_sha1_hash
(*
ouçut
, *
öput
);

165 
a°_ba£64ícode_fuŒ
(*
d°
, c⁄° *
§c
, 
§˛í
, 
max
, 
löebªaks
);

166 
a°_ba£64ícode
(*
d°
, c⁄° *
§c
, 
§˛í
, 
max
);

167 
a°_ba£64decode
(*
d°
, c⁄° *
§c
, 
max
);

184 *
a°_uri_ícode
(c⁄° *
°rög
, *
outbuf
, 
buÊí
, 
d‹e£rved
);

189 
a°_uri_decode
(*
s
);

191 
f‹˚_ölöe
 
	$a°_¶öór_ßtuøãd_add
(*
öput
, *
vÆue
)

193 
ªs
;

195 
ªs
 = (Ë*
öput
 + *
vÆue
;

196 i‡(
ªs
 > 32767)

197 *
öput
 = 32767;

198 i‡(
ªs
 < -32767)

199 *
öput
 = -32767;

201 *
öput
 = (Ë
ªs
;

202 
	}
}

204 
f‹˚_ölöe
 
	$a°_¶öór_ßtuøãd_mu…ùly
(*
öput
, *
vÆue
)

206 
ªs
;

208 
ªs
 = (Ë*
öput
 * *
vÆue
;

209 i‡(
ªs
 > 32767)

210 *
öput
 = 32767;

211 i‡(
ªs
 < -32767)

212 *
öput
 = -32767;

214 *
öput
 = (Ë
ªs
;

215 
	}
}

217 
f‹˚_ölöe
 
	$a°_¶öór_ßtuøãd_divide
(*
öput
, *
vÆue
)

219 *
öput
 /*
vÆue
;

220 
	}
}

222 
ã°_f‹_thªad_ß„ty
();

234 c⁄° *
a°_öë_¡ﬂ
(
ö_addr
 
ü
);

236 #ifde‡
öë_¡ﬂ


237 #unde‡
öë_¡ﬂ


239 
	#öë_¡ﬂ
 
__d⁄t__u£__öë_¡ﬂ__u£__a°_öë_¡ﬂ__ö°ód__


	)

241 #ifde‡
loˇ…ime_r


242 #unde‡
loˇ…ime_r


244 
	#loˇ…ime_r
 
__d⁄t_u£_loˇ…ime_r_u£_a°_loˇ…ime_ö°ód__


	)

246 
a°_utûs_öô
();

247 
a°_waô_f‹_öput
(
fd
, 
ms
);

258 
a°_ˇªfulwrôe
(
fd
, *
s
, 
Àn
, 
timeoutms
);

261 
f‹˚_ölöe
 
	$öaddrcmp
(c⁄° 
sockaddr_ö
 *
sö1
, c⁄° sockaddr_ö *
sö2
)

263  ((
sö1
->
sö_addr
.
s_addr
 !
sö2
->sin_addr.s_addr)

264 || (
sö1
->
sö_p‹t
 !
sö2
->sin_port));

265 
	}
}

267 
	#AST_STACKSIZE
 240 * 1024

	)

269 #i‡
deföed
(
LOW_MEMORY
)

270 
	#AST_BACKGROUND_STACKSIZE
 48 * 1024

	)

272 
	#AST_BACKGROUND_STACKSIZE
 240 * 1024

	)

275 
a°_ªgi°î_thªad
(*
«me
);

276 
a°_uƒegi°î_thªad
(*
id
);

278 
a°_±hªad_¸óã_°ack
(
±hªad_t
 *
thªad
, 
±hªad_©å_t
 *
©å
, *(*
°¨t_routöe
)(*),

279 *
d©a
, 
size_t
 
°acksize
, c⁄° *
fûe
, c⁄° *
ˇŒî
,

280 
löe
, c⁄° *
°¨t_‚
);

282 
	#a°_±hªad_¸óã
(
a
, 
b
, 
c
, 
d
Ë
	`a°_±hªad_¸óã_°ack
(a, b, c, d, \

284 
__FILE__
, 
__FUNCTION__
, \

285 
__LINE__
, #c)

	)

287 
	#a°_±hªad_¸óã_background
(
a
, 
b
, 
c
, 
d
Ë
	`a°_±hªad_¸óã_°ack
(a, b, c, d, \

288 
AST_BACKGROUND_STACKSIZE
, \

289 
__FILE__
, 
__FUNCTION__
, \

290 
__LINE__
, #c)

	)

298 *
a°_¥o˚ss_quŸes_™d_¶ashes
(*
°¨t
, 
föd
, 
ª∂a˚_wôh
);

300 #ifde‡
löux


301 
	#a°_øndom
 
øndom


	)

303 
a°_øndom
();

312 #ifde‡
__AST_DEBUG_MALLOC


313 
	$a°_‰ì
(*
±r
Ë
©åibuã_unu£d
;

314 
	$a°_‰ì
(*
±r
)

316 
	`‰ì
(
±r
);

317 
	}
}

319 
	#a°_‰ì
 
‰ì


	)

322 #i‚de‡
__AST_DEBUG_MALLOC


324 
	#MALLOC_FAILURE_MSG
 \

325 
	`a°_log
(
LOG_ERROR
, "Mem‹y AŒoˇti⁄ Faûuª i¿fun˘i⁄ %†©Üöê%d o‡%s\n", 
func
, 
löío
, 
fûe
);

	)

334 
	#a°_mÆloc
(
Àn
) \

335 
	`_a°_mÆloc
((
Àn
), 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

337 
AST_INLINE_API
(

338 * 
©åibuã_mÆloc
 
_a°_mÆloc
(
size_t
 
Àn
, c⁄° *
fûe
, 
löío
, c⁄° *
func
),

340 *
p
;

342 i‡(!(
p
 = 
mÆloc
(
Àn
)))

343 
MALLOC_FAILURE_MSG
;

345  
p
;

357 
	#a°_ˇŒoc
(
num
, 
Àn
) \

358 
	`_a°_ˇŒoc
((
num
), (
Àn
), 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

360 
AST_INLINE_API
(

361 * 
©åibuã_mÆloc
 
_a°_ˇŒoc
(
size_t
 
num
, size_à
Àn
, c⁄° *
fûe
, 
löío
, c⁄° *
func
),

363 *
p
;

365 i‡(!(
p
 = 
ˇŒoc
(
num
, 
Àn
)))

366 
MALLOC_FAILURE_MSG
;

368  
p
;

382 
	#a°_ˇŒoc_ˇche
(
num
, 
Àn
) \

383 
	`_a°_ˇŒoc
((
num
), (
Àn
), 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

393 
	#a°_ªÆloc
(
p
, 
Àn
) \

394 
	`_a°_ªÆloc
((
p
), (
Àn
), 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

396 
AST_INLINE_API
(

397 * 
©åibuã_mÆloc
 
_a°_ªÆloc
(*
p
, 
size_t
 
Àn
, c⁄° *
fûe
, 
löío
, c⁄° *
func
),

399 *
√wp
;

401 i‡(!(
√wp
 = 
ªÆloc
(
p
, 
Àn
)))

402 
MALLOC_FAILURE_MSG
;

404  
√wp
;

420 
	#a°_°rdup
(
°r
) \

421 
	`_a°_°rdup
((
°r
), 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

423 
AST_INLINE_API
(

424 * 
©åibuã_mÆloc
 
_a°_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löío
, c⁄° *
func
),

426 *
√w°r
 = 
NULL
;

428 i‡(
°r
) {

429 i‡(!(
√w°r
 = 
°rdup
(
°r
)))

430 
MALLOC_FAILURE_MSG
;

433  
√w°r
;

449 
	#a°_°∫dup
(
°r
, 
Àn
) \

450 
	`_a°_°∫dup
((
°r
), (
Àn
), 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

452 
AST_INLINE_API
(

453 * 
©åibuã_mÆloc
 
_a°_°∫dup
(c⁄° *
°r
, 
size_t
 
Àn
, c⁄° *
fûe
, 
löío
, c⁄° *
func
),

455 *
√w°r
 = 
NULL
;

457 i‡(
°r
) {

458 i‡(!(
√w°r
 = 
°∫dup
(
°r
, 
Àn
)))

459 
MALLOC_FAILURE_MSG
;

462  
√w°r
;

474 
	#a°_a•rötf
(
ªt
, 
fmt
, ...) \

475 
	`_a°_a•rötf
((
ªt
), 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, 
fmt
, 
__VA_ARGS__
)

	)

477 
	$_a°_a•rötf
(**
ªt
, c⁄° *
fûe
, 
löío
, c⁄° *
func
, c⁄° *
fmt
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, 5, 6)));

487 
	#a°_va•rötf
(
ªt
, 
fmt
, 
≠
) \

488 
	`_a°_va•rötf
((
ªt
), 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, (
fmt
), (
≠
))

	)

490 
	`AST_INLINE_API
(

491 
	`_a°_va•rötf
(**
ªt
, c⁄° *
fûe
, 
löío
, c⁄° *
func
, c⁄° *
fmt
, 
va_li°
 
≠
),

493 
ªs
;

495 i‡((
ªs
 = 
	`va•rötf
(
ªt
, 
fmt
, 
≠
)) == -1)

496 
MALLOC_FAILURE_MSG
;

498  
ªs
;

499 
	}
}

507 
	#a°_mÆloc
(
a
Ë
	`mÆloc
◊)

	)

508 
	#a°_ˇŒoc
(
a
,
b
Ë
	`ˇŒoc
◊,b)

	)

509 
	#a°_ªÆloc
(
a
,
b
Ë
	`ªÆloc
◊,b)

	)

510 
	#a°_°rdup
(
a
Ë
	`°rdup
◊)

	)

511 
	#a°_°∫dup
(
a
,
b
Ë
	`°∫dup
◊,b)

	)

512 
	#a°_a•rötf
(
a
,
b
,...Ë
	`a•rötf
◊,b,
__VA_ARGS__
)

	)

513 
	#a°_va•rötf
(
a
,
b
,
c
Ë
	`va•rötf
◊,b,c)

	)

517 #i‡!
deföed
(
a°_°rdu∑
Ë&& deföed(
__GNUC__
)

525 
	#a°_°rdu∑
(
s
) \

526 (
__exãnsi⁄__
 \

528 c⁄° *
__ﬁd
 = (
s
); \

529 
size_t
 
__Àn
 = 
	`°æí
(
__ﬁd
) + 1; \

530 *
__√w
 = 
	`__buûtö_Æloˇ
(
__Àn
); \

531 
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

532 
__√w
; \

533 }))

	)

549 
a°_íabÀ_∑ckë_‰agmíèti⁄
(
sock
);

551 
	#ARRAY_LEN
(
a
Ë(◊Ë/ ◊[0]))

	)

553 #ifde‡
AST_DEVMODE


554 
	#a°_as£π
(
a
Ë
	`_a°_as£π
◊, #a, 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

555 
f‹˚_ölöe
 
	$_a°_as£π
(
c⁄dôi⁄
, c⁄° *
c⁄dôi⁄_°r
,

556 c⁄° *
fûe
, 
löe
, c⁄° *
fun˘i⁄
)

558 i‡(
	`__buûtö_ex≥˘
(!
c⁄dôi⁄
, 1)) {

561 
	`a°_log
(
LOG_ERROR
, "FRACK!, Failedássertion %s (%d)átÜine %d in %s of %s\n",

562 
c⁄dôi⁄_°r
, 
c⁄dôi⁄
, 
löe
, 
fun˘i⁄
, 
fûe
);

563 
	`Ârötf
(
°dîr
, "FRACK!, Failedássertion %s (%d)átÜine %d in %s of %s\n",

564 
c⁄dôi⁄_°r
, 
c⁄dôi⁄
, 
löe
, 
fun˘i⁄
, 
fûe
);

567 
	`u¶ìp
(1);

568 #ifde‡
DO_CRASH


569 
	`ab‹t
();

575 
	}
}

577 
	#a°_as£π
(
a
)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

105 #ifde‡
__USE_ATFILE


106 
	#AT_FDCWD
 -100

	)

109 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

110 
	#AT_REMOVEDIR
 0x200

	)

112 
	#AT_SYMLINK_FOLLOW
 0x400

	)

113 
	#AT_NO_AUTOMOUNT
 0x800

	)

115 
	#AT_EMPTY_PATH
 0x1000

	)

116 
	#AT_EACCESS
 0x200

	)

125 
f˙é
 (
__fd
, 
__cmd
, ...);

133 #i‚de‡
__USE_FILE_OFFSET64


134 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__REDIRECT


137 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

138 
	`__n⁄nuŒ
 ((1));

140 
	#›í
 
›í64


	)

143 #ifde‡
__USE_LARGEFILE64


144 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

147 #ifde‡
__USE_ATFILE


157 #i‚de‡
__USE_FILE_OFFSET64


158 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

159 
	`__n⁄nuŒ
 ((2));

161 #ifde‡
__REDIRECT


162 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

163 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

165 
	#›í©
 
›í©64


	)

168 #ifde‡
__USE_LARGEFILE64


169 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

170 
	`__n⁄nuŒ
 ((2));

179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

182 #ifde‡
__REDIRECT


183 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

184 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

186 
	#¸ót
 
¸ót64


	)

189 #ifde‡
__USE_LARGEFILE64


190 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

193 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

194 && !
deföed
 
__USE_POSIX
))

203 
	#F_ULOCK
 0

	)

204 
	#F_LOCK
 1

	)

205 
	#F_TLOCK
 2

	)

206 
	#F_TEST
 3

	)

208 #i‚de‡
__USE_FILE_OFFSET64


209 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

211 #ifde‡
__REDIRECT


212 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

214 
	#lockf
 
lockf64


	)

217 #ifde‡
__USE_LARGEFILE64


218 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

222 #ifde‡
__USE_XOPEN2K


225 #i‚de‡
__USE_FILE_OFFSET64


226 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

227 
__advi£
Ë
__THROW
;

229 #ifde‡
__REDIRECT_NTH


230 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

231 
__off64_t
 
__Àn
, 
__advi£
),

232 
posix_Ádvi£64
);

234 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

237 #ifde‡
__USE_LARGEFILE64


238 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

239 
__advi£
Ë
__THROW
;

247 #i‚de‡
__USE_FILE_OFFSET64


248 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

250 #ifde‡
__REDIRECT


251 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

252 
__off64_t
 
__Àn
),

253 
posix_ÁŒoˇã64
);

255 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

258 #ifde‡
__USE_LARGEFILE64


259 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

265 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

266 && 
deföed
 
__va_¨g_∑ck_Àn


267 
	~<bôs/f˙é2.h
>

270 
__END_DECLS


	@/usr/include/linux/parport.h

7 #i‚de‡
_PARPORT_H_


8 
	#_PARPORT_H_


	)

13 
	#PARPORT_MAX
 16

	)

16 
	#PARPORT_IRQ_NONE
 -1

	)

17 
	#PARPORT_DMA_NONE
 -1

	)

18 
	#PARPORT_IRQ_AUTO
 -2

	)

19 
	#PARPORT_DMA_AUTO
 -2

	)

20 
	#PARPORT_DMA_NOFIFO
 -3

	)

21 
	#PARPORT_DISABLE
 -2

	)

22 
	#PARPORT_IRQ_PROBEONLY
 -3

	)

23 
	#PARPORT_IOHI_AUTO
 -1

	)

25 
	#PARPORT_CONTROL_STROBE
 0x1

	)

26 
	#PARPORT_CONTROL_AUTOFD
 0x2

	)

27 
	#PARPORT_CONTROL_INIT
 0x4

	)

28 
	#PARPORT_CONTROL_SELECT
 0x8

	)

30 
	#PARPORT_STATUS_ERROR
 0x8

	)

31 
	#PARPORT_STATUS_SELECT
 0x10

	)

32 
	#PARPORT_STATUS_PAPEROUT
 0x20

	)

33 
	#PARPORT_STATUS_ACK
 0x40

	)

34 
	#PARPORT_STATUS_BUSY
 0x80

	)

38 
	mPARPORT_CLASS_LEGACY
 = 0,

39 
	mPARPORT_CLASS_PRINTER
,

40 
	mPARPORT_CLASS_MODEM
,

41 
	mPARPORT_CLASS_NET
,

42 
	mPARPORT_CLASS_HDC
,

43 
	mPARPORT_CLASS_PCMCIA
,

44 
	mPARPORT_CLASS_MEDIA
,

45 
	mPARPORT_CLASS_FDC
,

46 
	mPARPORT_CLASS_PORTS
,

47 
	mPARPORT_CLASS_SCANNER
,

48 
	mPARPORT_CLASS_DIGCAM
,

49 
	mPARPORT_CLASS_OTHER
,

50 
	mPARPORT_CLASS_UNSPEC
,

51 
	mPARPORT_CLASS_SCSIADAPTER


52 } 
	t∑Ω‹t_devi˚_˛ass
;

56 
	#PARPORT_MODE_PCSPP
 (1<<0Ë

	)

57 
	#PARPORT_MODE_TRISTATE
 (1<<1Ë

	)

58 
	#PARPORT_MODE_EPP
 (1<<2Ë

	)

59 
	#PARPORT_MODE_ECP
 (1<<3Ë

	)

60 
	#PARPORT_MODE_COMPAT
 (1<<4Ë

	)

61 
	#PARPORT_MODE_DMA
 (1<<5Ë

	)

62 
	#PARPORT_MODE_SAFEININT
 (1<<6Ë

	)

68 
	#IEEE1284_MODE_NIBBLE
 0

	)

69 
	#IEEE1284_MODE_BYTE
 (1<<0)

	)

70 
	#IEEE1284_MODE_COMPAT
 (1<<8)

	)

71 
	#IEEE1284_MODE_BECP
 (1<<9Ë

	)

72 
	#IEEE1284_MODE_ECP
 (1<<4)

	)

73 
	#IEEE1284_MODE_ECPRLE
 (
IEEE1284_MODE_ECP
 | (1<<5))

	)

74 
	#IEEE1284_MODE_ECPSWE
 (1<<10Ë

	)

75 
	#IEEE1284_MODE_EPP
 (1<<6)

	)

76 
	#IEEE1284_MODE_EPPSL
 (1<<11Ë

	)

77 
	#IEEE1284_MODE_EPPSWE
 (1<<12Ë

	)

78 
	#IEEE1284_DEVICEID
 (1<<2Ë

	)

79 
	#IEEE1284_EXT_LINK
 (1<<14Ë

	)

87 
	#IEEE1284_ADDR
 (1<<13Ë

	)

88 
	#IEEE1284_DATA
 0

	)

91 
	#PARPORT_EPP_FAST
 (1<<0Ë

	)

92 
	#PARPORT_W91284PIC
 (1<<1Ë

	)

	@/usr/include/linux/ppdev.h

17 
	#PP_IOCTL
 'p'

	)

20 
	#PPSETMODE
 
	`_IOW
(
PP_IOCTL
, 0x80, )

	)

23 
	#PPRSTATUS
 
	`_IOR
(
PP_IOCTL
, 0x81, )

	)

24 
	#PPWSTATUS
 
	`OBSOLETE__IOW
(
PP_IOCTL
, 0x82, )

	)

27 
	#PPRCONTROL
 
	`_IOR
(
PP_IOCTL
, 0x83, )

	)

28 
	#PPWCONTROL
 
	`_IOW
(
PP_IOCTL
, 0x84, )

	)

30 
	sµdev_‰ob_°ru˘
 {

31 
	mmask
;

32 
	mvÆ
;

34 
	#PPFCONTROL
 
	`_IOW
(
PP_IOCTL
, 0x8e, 
µdev_‰ob_°ru˘
)

	)

37 
	#PPRDATA
 
	`_IOR
(
PP_IOCTL
, 0x85, )

	)

38 
	#PPWDATA
 
	`_IOW
(
PP_IOCTL
, 0x86, )

	)

41 
	#PPRECONTROL
 
	`OBSOLETE__IOR
(
PP_IOCTL
, 0x87, )

	)

42 
	#PPWECONTROL
 
	`OBSOLETE__IOW
(
PP_IOCTL
, 0x88, )

	)

45 
	#PPRFIFO
 
	`OBSOLETE__IOR
(
PP_IOCTL
, 0x89, )

	)

46 
	#PPWFIFO
 
	`OBSOLETE__IOW
(
PP_IOCTL
, 0x8a, )

	)

49 
	#PPCLAIM
 
	`_IO
(
PP_IOCTL
, 0x8b)

	)

52 
	#PPRELEASE
 
	`_IO
(
PP_IOCTL
, 0x8c)

	)

56 
	#PPYIELD
 
	`_IO
(
PP_IOCTL
, 0x8d)

	)

59 
	#PPEXCL
 
	`_IO
(
PP_IOCTL
, 0x8f)

	)

62 
	#PPDATADIR
 
	`_IOW
(
PP_IOCTL
, 0x90, )

	)

65 
	#PPNEGOT
 
	`_IOW
(
PP_IOCTL
, 0x91, )

	)

68 
	#PPWCTLONIRQ
 
	`_IOW
(
PP_IOCTL
, 0x92, )

	)

71 
	#PPCLRIRQ
 
	`_IOR
(
PP_IOCTL
, 0x93, )

	)

74 
	#PPSETPHASE
 
	`_IOW
(
PP_IOCTL
, 0x94, )

	)

77 
	#PPGETTIME
 
	`_IOR
(
PP_IOCTL
, 0x95, 
timevÆ
)

	)

78 
	#PPSETTIME
 
	`_IOW
(
PP_IOCTL
, 0x96, 
timevÆ
)

	)

81 
	#PPGETMODES
 
	`_IOR
(
PP_IOCTL
, 0x97, )

	)

84 
	#PPGETMODE
 
	`_IOR
(
PP_IOCTL
, 0x98, )

	)

85 
	#PPGETPHASE
 
	`_IOR
(
PP_IOCTL
, 0x99, )

	)

88 
	#PPGETFLAGS
 
	`_IOR
(
PP_IOCTL
, 0x9a, )

	)

89 
	#PPSETFLAGS
 
	`_IOW
(
PP_IOCTL
, 0x9b, )

	)

92 
	#PP_FASTWRITE
 (1<<2)

	)

93 
	#PP_FASTREAD
 (1<<3)

	)

94 
	#PP_W91284PIC
 (1<<4)

	)

97 
	#PP_FLAGMASK
 (
PP_FASTWRITE
 | 
PP_FASTREAD
 | 
PP_W91284PIC
)

	)

	@/usr/include/linux/soundcard.h

1 #i‚de‡
SOUNDCARD_H


2 
	#SOUNDCARD_H


	)

36 
	#SOUND_VERSION
 0x030802

	)

37 
	#OPEN_SOUND_SYSTEM


	)

40 
	~<löux/io˘l.h
>

43 
	~<ídün.h
>

49 
	#SNDCARD_ADLIB
 1

	)

50 
	#SNDCARD_SB
 2

	)

51 
	#SNDCARD_PAS
 3

	)

52 
	#SNDCARD_GUS
 4

	)

53 
	#SNDCARD_MPU401
 5

	)

54 
	#SNDCARD_SB16
 6

	)

55 
	#SNDCARD_SB16MIDI
 7

	)

56 
	#SNDCARD_UART6850
 8

	)

57 
	#SNDCARD_GUS16
 9

	)

58 
	#SNDCARD_MSS
 10

	)

59 
	#SNDCARD_PSS
 11

	)

60 
	#SNDCARD_SSCAPE
 12

	)

61 
	#SNDCARD_PSS_MPU
 13

	)

62 
	#SNDCARD_PSS_MSS
 14

	)

63 
	#SNDCARD_SSCAPE_MSS
 15

	)

64 
	#SNDCARD_TRXPRO
 16

	)

65 
	#SNDCARD_TRXPRO_SB
 17

	)

66 
	#SNDCARD_TRXPRO_MPU
 18

	)

67 
	#SNDCARD_MAD16
 19

	)

68 
	#SNDCARD_MAD16_MPU
 20

	)

69 
	#SNDCARD_CS4232
 21

	)

70 
	#SNDCARD_CS4232_MPU
 22

	)

71 
	#SNDCARD_MAUI
 23

	)

72 
	#SNDCARD_PSEUDO_MSS
 24

	)

73 
	#SNDCARD_GUSPNP
 25

	)

74 
	#SNDCARD_UART401
 26

	)

81 #i‚de‡
_SIOWR


82 #i‡
deföed
(
_IOWR
Ë&& (deföed(
_AIX
Ë|| (!deföed(
sun
Ë&& !deföed(
•¨c
Ë&& !deföed(
__•¨c__
Ë&& !deföed(
__INCio˘lh
Ë&& !deföed(
__Lynx__
)))

84 
	#SIOCPARM_MASK
 
IOCPARM_MASK


	)

85 
	#SIOC_VOID
 
IOC_VOID


	)

86 
	#SIOC_OUT
 
IOC_OUT


	)

87 
	#SIOC_IN
 
IOC_IN


	)

88 
	#SIOC_INOUT
 
IOC_INOUT


	)

89 
	#_SIOC_SIZE
 
_IOC_SIZE


	)

90 
	#_SIOC_DIR
 
_IOC_DIR


	)

91 
	#_SIOC_NONE
 
_IOC_NONE


	)

92 
	#_SIOC_READ
 
_IOC_READ


	)

93 
	#_SIOC_WRITE
 
_IOC_WRITE


	)

94 
	#_SIO
 
_IO


	)

95 
	#_SIOR
 
_IOR


	)

96 
	#_SIOW
 
_IOW


	)

97 
	#_SIOWR
 
_IOWR


	)

107 
	#SIOCPARM_MASK
 0x1ff‡

	)

108 
	#SIOC_VOID
 0x00000000

	)

109 
	#SIOC_OUT
 0x20000000

	)

110 
	#SIOC_IN
 0x40000000

	)

111 
	#SIOC_INOUT
 (
SIOC_IN
|
SIOC_OUT
)

	)

113 
	#_SIO
(
x
,
y
Ë(()(
SIOC_VOID
|(x<<8)|y))

	)

114 
	#_SIOR
(
x
,
y
,
t
Ë(()(
SIOC_OUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

115 
	#_SIOW
(
x
,
y
,
t
Ë(()(
SIOC_IN
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

117 
	#_SIOWR
(
x
,
y
,
t
Ë(()(
SIOC_INOUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

118 
	#_SIOC_SIZE
(
x
Ë((x>>16)&
SIOCPARM_MASK
)

	)

119 
	#_SIOC_DIR
(
x
Ë(x & 0xf0000000)

	)

120 
	#_SIOC_NONE
 
SIOC_VOID


	)

121 
	#_SIOC_READ
 
SIOC_OUT


	)

122 
	#_SIOC_WRITE
 
SIOC_IN


	)

126 
	#SNDCTL_SEQ_RESET
 
	`_SIO
 ('Q', 0)

	)

127 
	#SNDCTL_SEQ_SYNC
 
	`_SIO
 ('Q', 1)

	)

128 
	#SNDCTL_SYNTH_INFO
 
	`_SIOWR
('Q', 2, 
sy¡h_öfo
)

	)

129 
	#SNDCTL_SEQ_CTRLRATE
 
	`_SIOWR
('Q', 3, Ë

	)

130 
	#SNDCTL_SEQ_GETOUTCOUNT
 
	`_SIOR
 ('Q', 4, )

	)

131 
	#SNDCTL_SEQ_GETINCOUNT
 
	`_SIOR
 ('Q', 5, )

	)

132 
	#SNDCTL_SEQ_PERCMODE
 
	`_SIOW
 ('Q', 6, )

	)

133 
	#SNDCTL_FM_LOAD_INSTR
 
	`_SIOW
 ('Q', 7, 
sbi_ö°rumít
Ë

	)

134 
	#SNDCTL_SEQ_TESTMIDI
 
	`_SIOW
 ('Q', 8, )

	)

135 
	#SNDCTL_SEQ_RESETSAMPLES
 
	`_SIOW
 ('Q', 9, )

	)

136 
	#SNDCTL_SEQ_NRSYNTHS
 
	`_SIOR
 ('Q',10, )

	)

137 
	#SNDCTL_SEQ_NRMIDIS
 
	`_SIOR
 ('Q',11, )

	)

138 
	#SNDCTL_MIDI_INFO
 
	`_SIOWR
('Q',12, 
midi_öfo
)

	)

139 
	#SNDCTL_SEQ_THRESHOLD
 
	`_SIOW
 ('Q',13, )

	)

140 
	#SNDCTL_SYNTH_MEMAVL
 
	`_SIOWR
('Q',14, Ë

	)

141 
	#SNDCTL_FM_4OP_ENABLE
 
	`_SIOW
 ('Q',15, Ë

	)

142 
	#SNDCTL_SEQ_PANIC
 
	`_SIO
 ('Q',17)

	)

143 
	#SNDCTL_SEQ_OUTOFBAND
 
	`_SIOW
 ('Q',18, 
£q_evít_ªc
)

	)

144 
	#SNDCTL_SEQ_GETTIME
 
	`_SIOR
 ('Q',19, )

	)

145 
	#SNDCTL_SYNTH_ID
 
	`_SIOWR
('Q',20, 
sy¡h_öfo
)

	)

146 
	#SNDCTL_SYNTH_CONTROL
 
	`_SIOWR
('Q',21, 
sy¡h_c⁄åﬁ
)

	)

147 
	#SNDCTL_SYNTH_REMOVESAMPLE
 
	`_SIOWR
('Q',22, 
ªmove_ßm∂e
)

	)

149 
	ssy¡h_c⁄åﬁ


151 
	mdevno
;

152 
	md©a
[4000];

153 }
	tsy¡h_c⁄åﬁ
;

155 
	sªmove_ßm∂e


157 
	mdevno
;

158 
	mb™kno
;

159 
	mö°∫o
;

160 } 
	tªmove_ßm∂e
;

162 
	s£q_evít_ªc
 {

163 
	m¨r
[8];

164 } 
	t£q_evít_ªc
;

166 
	#SNDCTL_TMR_TIMEBASE
 
	`_SIOWR
('T', 1, )

	)

167 
	#SNDCTL_TMR_START
 
	`_SIO
 ('T', 2)

	)

168 
	#SNDCTL_TMR_STOP
 
	`_SIO
 ('T', 3)

	)

169 
	#SNDCTL_TMR_CONTINUE
 
	`_SIO
 ('T', 4)

	)

170 
	#SNDCTL_TMR_TEMPO
 
	`_SIOWR
('T', 5, )

	)

171 
	#SNDCTL_TMR_SOURCE
 
	`_SIOWR
('T', 6, )

	)

172 
	#TMR_INTERNAL
 0x00000001

	)

173 
	#TMR_EXTERNAL
 0x00000002

	)

174 
	#TMR_MODE_MIDI
 0x00000010

	)

175 
	#TMR_MODE_FSK
 0x00000020

	)

176 
	#TMR_MODE_CLS
 0x00000040

	)

177 
	#TMR_MODE_SMPTE
 0x00000080

	)

178 
	#SNDCTL_TMR_METRONOME
 
	`_SIOW
 ('T', 7, )

	)

179 
	#SNDCTL_TMR_SELECT
 
	`_SIOW
 ('T', 8, )

	)

185 
	#_LINUX_PATCHKEY_H_INDIRECT


	)

186 
	~<löux/∑tchkey.h
>

187 #unde‡
_LINUX_PATCHKEY_H_INDIRECT


189 #i‡
deföed
(
__BYTE_ORDER
)

190 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


191 
	#AFMT_S16_NE
 
AFMT_S16_BE


	)

192 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


193 
	#AFMT_S16_NE
 
AFMT_S16_LE


	)

209 
	s∑tch_öfo
 {

210 
	mkey
;

211 
	#WAVE_PATCH
 
	`_PATCHKEY
(0x04)

	)

212 
	#GUS_PATCH
 
WAVE_PATCH


	)

213 
	#WAVEFRONT_PATCH
 
	`_PATCHKEY
(0x06)

	)

215 
	mdevi˚_no
;

216 
	mö°r_no
;

218 
	mmode
;

223 
	#WAVE_16_BITS
 0x01

	)

224 
	#WAVE_UNSIGNED
 0x02

	)

225 
	#WAVE_LOOPING
 0x04

	)

226 
	#WAVE_BIDIR_LOOP
 0x08

	)

227 
	#WAVE_LOOP_BACK
 0x10

	)

228 
	#WAVE_SUSTAIN_ON
 0x20

	)

229 
	#WAVE_ENVELOPES
 0x40

	)

230 
	#WAVE_FAST_RELEASE
 0x80

	)

233 
	#WAVE_VIBRATO
 0x00010000

	)

234 
	#WAVE_TREMOLO
 0x00020000

	)

235 
	#WAVE_SCALE
 0x00040000

	)

236 
	#WAVE_FRACTIONS
 0x00080000

	)

238 
	#WAVE_ROM
 0x40000000

	)

239 
	#WAVE_MULAW
 0x20000000

	)

242 
	mÀn
;

243 
	mlo›_°¨t
, 
	mlo›_íd
;

261 
	mba£_‰eq
;

262 
	mba£_nŸe
;

263 
	mhigh_nŸe
;

264 
	mlow_nŸe
;

265 
	m∑¬ög
;

266 
	mdëunög
;

271 
	mív_øã
[ 6 ];

272 
	mív_off£t
[ 6 ];

280 
	måemﬁo_swìp
;

281 
	måemﬁo_øã
;

282 
	måemﬁo_dïth
;

284 
	mvibøto_swìp
;

285 
	mvibøto_øã
;

286 
	mvibøto_dïth
;

288 
	msˇÀ_‰equícy
;

289 
	msˇÀ_Á˘‹
;

291 
	mvﬁume
;

292 
	m‰a˘i⁄s
;

293 
	mª£rved1
;

294 
	m•¨e
[2];

295 
	md©a
[1];

298 
	ssy£x_öfo
 {

299 
	mkey
;

300 
	#SYSEX_PATCH
 
	`_PATCHKEY
(0x05)

	)

301 
	#MAUI_PATCH
 
	`_PATCHKEY
(0x06)

	)

302 
	mdevi˚_no
;

303 
	mÀn
;

304 
	md©a
[1];

327 
	#SEQ_NOTEOFF
 0

	)

328 
	#SEQ_FMNOTEOFF
 
SEQ_NOTEOFF


	)

329 
	#SEQ_NOTEON
 1

	)

330 
	#SEQ_FMNOTEON
 
SEQ_NOTEON


	)

331 
	#SEQ_WAIT
 
TMR_WAIT_ABS


	)

332 
	#SEQ_PGMCHANGE
 3

	)

333 
	#SEQ_FMPGMCHANGE
 
SEQ_PGMCHANGE


	)

334 
	#SEQ_SYNCTIMER
 
TMR_START


	)

335 
	#SEQ_MIDIPUTC
 5

	)

336 
	#SEQ_DRUMON
 6

	)

337 
	#SEQ_DRUMOFF
 7

	)

338 
	#SEQ_ECHO
 
TMR_ECHO


	)

339 
	#SEQ_AFTERTOUCH
 9

	)

340 
	#SEQ_CONTROLLER
 10

	)

354 
	#CTL_BANK_SELECT
 0x00

	)

355 
	#CTL_MODWHEEL
 0x01

	)

356 
	#CTL_BREATH
 0x02

	)

358 
	#CTL_FOOT
 0x04

	)

359 
	#CTL_PORTAMENTO_TIME
 0x05

	)

360 
	#CTL_DATA_ENTRY
 0x06

	)

361 
	#CTL_MAIN_VOLUME
 0x07

	)

362 
	#CTL_BALANCE
 0x08

	)

364 
	#CTL_PAN
 0x0a

	)

365 
	#CTL_EXPRESSION
 0x0b

	)

370 
	#CTL_GENERAL_PURPOSE1
 0x10

	)

371 
	#CTL_GENERAL_PURPOSE2
 0x11

	)

372 
	#CTL_GENERAL_PURPOSE3
 0x12

	)

373 
	#CTL_GENERAL_PURPOSE4
 0x13

	)

383 
	#CTL_DAMPER_PEDAL
 0x40

	)

384 
	#CTL_SUSTAIN
 0x40

	)

385 
	#CTL_HOLD
 0x40

	)

386 
	#CTL_PORTAMENTO
 0x41

	)

387 
	#CTL_SOSTENUTO
 0x42

	)

388 
	#CTL_SOFT_PEDAL
 0x43

	)

390 
	#CTL_HOLD2
 0x45

	)

393 
	#CTL_GENERAL_PURPOSE5
 0x50

	)

394 
	#CTL_GENERAL_PURPOSE6
 0x51

	)

395 
	#CTL_GENERAL_PURPOSE7
 0x52

	)

396 
	#CTL_GENERAL_PURPOSE8
 0x53

	)

398 
	#CTL_EXT_EFF_DEPTH
 0x5b

	)

399 
	#CTL_TREMOLO_DEPTH
 0x5c

	)

400 
	#CTL_CHORUS_DEPTH
 0x5d

	)

401 
	#CTL_DETUNE_DEPTH
 0x5e

	)

402 
	#CTL_CELESTE_DEPTH
 0x5ê

	)

403 
	#CTL_PHASER_DEPTH
 0x5f

	)

404 
	#CTL_DATA_INCREMENT
 0x60

	)

405 
	#CTL_DATA_DECREMENT
 0x61

	)

406 
	#CTL_NONREG_PARM_NUM_LSB
 0x62

	)

407 
	#CTL_NONREG_PARM_NUM_MSB
 0x63

	)

408 
	#CTL_REGIST_PARM_NUM_LSB
 0x64

	)

409 
	#CTL_REGIST_PARM_NUM_MSB
 0x65

	)

414 
	#CTRL_PITCH_BENDER
 255

	)

415 
	#CTRL_PITCH_BENDER_RANGE
 254

	)

416 
	#CTRL_EXPRESSION
 253

	)

417 
	#CTRL_MAIN_VOLUME
 252

	)

418 
	#SEQ_BALANCE
 11

	)

419 
	#SEQ_VOLMODE
 12

	)

425 
	#VOL_METHOD_ADAGIO
 1

	)

426 
	#VOL_METHOD_LINEAR
 2

	)

437 
	#SEQ_FULLSIZE
 0xfd

	)

458 
	#SEQ_PRIVATE
 0x„

	)

459 
	#SEQ_EXTENDED
 0xf‡

	)

465 
	tsbi_ö°r_d©a
[32];

467 
	ssbi_ö°rumít
 {

468 
	mkey
;

469 
	#FM_PATCH
 
	`_PATCHKEY
(0x01)

	)

470 
	#OPL3_PATCH
 
	`_PATCHKEY
(0x03)

	)

471 
	mdevi˚
;

472 
	mch™√l
;

473 
sbi_ö°r_d©a
 
	m›î©‹s
;

476 
	ssy¡h_öfo
 {

477 
	m«me
[30];

478 
	mdevi˚
;

479 
	msy¡h_ty≥
;

480 
	#SYNTH_TYPE_FM
 0

	)

481 
	#SYNTH_TYPE_SAMPLE
 1

	)

482 
	#SYNTH_TYPE_MIDI
 2

	)

484 
	msy¡h_subty≥
;

485 
	#FM_TYPE_ADLIB
 0x00

	)

486 
	#FM_TYPE_OPL3
 0x01

	)

487 
	#MIDI_TYPE_MPU401
 0x401

	)

489 
	#SAMPLE_TYPE_BASIC
 0x10

	)

490 
	#SAMPLE_TYPE_GUS
 
SAMPLE_TYPE_BASIC


	)

491 
	#SAMPLE_TYPE_WAVEFRONT
 0x11

	)

493 
	m≥rc_mode
;

494 
	mƒ_voi˚s
;

495 
	mƒ_drums
;

496 
	mö°r_b™k_size
;

497 
	mˇ∑bûôõs
;

498 
	#SYNTH_CAP_PERCMODE
 0x00000001

	)

499 
	#SYNTH_CAP_OPL3
 0x00000002

	)

500 
	#SYNTH_CAP_INPUT
 0x00000004

	)

501 
	mdummõs
[19];

504 
	ssound_timî_öfo
 {

505 
	m«me
[32];

506 
	mˇps
;

509 
	#MIDI_CAP_MPU401
 1

	)

511 
	smidi_öfo
 {

512 
	m«me
[30];

513 
	mdevi˚
;

514 
	mˇ∑bûôõs
;

515 
	mdev_ty≥
;

516 
	mdummõs
[18];

523 
	mcmd
;

524 
	mƒ_¨gs
, 
	mƒ_ªtu∫s
;

525 
	md©a
[30];

526 } 
	tmpu_comm™d_ªc
;

528 
	#SNDCTL_MIDI_PRETIME
 
	`_SIOWR
('m', 0, )

	)

529 
	#SNDCTL_MIDI_MPUMODE
 
	`_SIOWR
('m', 1, )

	)

530 
	#SNDCTL_MIDI_MPUCMD
 
	`_SIOWR
('m', 2, 
mpu_comm™d_ªc
)

	)

536 
	#SNDCTL_DSP_RESET
 
	`_SIO
 ('P', 0)

	)

537 
	#SNDCTL_DSP_SYNC
 
	`_SIO
 ('P', 1)

	)

538 
	#SNDCTL_DSP_SPEED
 
	`_SIOWR
('P', 2, )

	)

539 
	#SNDCTL_DSP_STEREO
 
	`_SIOWR
('P', 3, )

	)

540 
	#SNDCTL_DSP_GETBLKSIZE
 
	`_SIOWR
('P', 4, )

	)

541 
	#SNDCTL_DSP_SAMPLESIZE
 
SNDCTL_DSP_SETFMT


	)

542 
	#SNDCTL_DSP_CHANNELS
 
	`_SIOWR
('P', 6, )

	)

543 
	#SOUND_PCM_WRITE_CHANNELS
 
SNDCTL_DSP_CHANNELS


	)

544 
	#SOUND_PCM_WRITE_FILTER
 
	`_SIOWR
('P', 7, )

	)

545 
	#SNDCTL_DSP_POST
 
	`_SIO
 ('P', 8)

	)

546 
	#SNDCTL_DSP_SUBDIVIDE
 
	`_SIOWR
('P', 9, )

	)

547 
	#SNDCTL_DSP_SETFRAGMENT
 
	`_SIOWR
('P',10, )

	)

550 
	#SNDCTL_DSP_GETFMTS
 
	`_SIOR
 ('P',11, Ë

	)

551 
	#SNDCTL_DSP_SETFMT
 
	`_SIOWR
('P',5, Ë

	)

552 
	#AFMT_QUERY
 0x00000000

	)

553 
	#AFMT_MU_LAW
 0x00000001

	)

554 
	#AFMT_A_LAW
 0x00000002

	)

555 
	#AFMT_IMA_ADPCM
 0x00000004

	)

556 
	#AFMT_U8
 0x00000008

	)

557 
	#AFMT_S16_LE
 0x00000010

	)

558 
	#AFMT_S16_BE
 0x00000020

	)

559 
	#AFMT_S8
 0x00000040

	)

560 
	#AFMT_U16_LE
 0x00000080

	)

561 
	#AFMT_U16_BE
 0x00000100

	)

562 
	#AFMT_MPEG
 0x00000200

	)

563 
	#AFMT_AC3
 0x00000400

	)

568 
	saudio_buf_öfo
 {

569 
	m‰agmíts
;

570 
	m‰ag°ŸÆ
;

571 
	m‰agsize
;

573 
	mbyãs
;

575 } 
	taudio_buf_öfo
;

577 
	#SNDCTL_DSP_GETOSPACE
 
	`_SIOR
 ('P',12, 
audio_buf_öfo
)

	)

578 
	#SNDCTL_DSP_GETISPACE
 
	`_SIOR
 ('P',13, 
audio_buf_öfo
)

	)

579 
	#SNDCTL_DSP_NONBLOCK
 
	`_SIO
 ('P',14)

	)

580 
	#SNDCTL_DSP_GETCAPS
 
	`_SIOR
 ('P',15, )

	)

581 
	#DSP_CAP_REVISION
 0x000000f‡

	)

582 
	#DSP_CAP_DUPLEX
 0x00000100

	)

583 
	#DSP_CAP_REALTIME
 0x00000200

	)

584 
	#DSP_CAP_BATCH
 0x00000400

	)

588 
	#DSP_CAP_COPROC
 0x00000800

	)

591 
	#DSP_CAP_TRIGGER
 0x00001000

	)

592 
	#DSP_CAP_MMAP
 0x00002000

	)

593 
	#DSP_CAP_MULTI
 0x00004000

	)

594 
	#DSP_CAP_BIND
 0x00008000

	)

597 
	#SNDCTL_DSP_GETTRIGGER
 
	`_SIOR
 ('P',16, )

	)

598 
	#SNDCTL_DSP_SETTRIGGER
 
	`_SIOW
 ('P',16, )

	)

599 
	#PCM_ENABLE_INPUT
 0x00000001

	)

600 
	#PCM_ENABLE_OUTPUT
 0x00000002

	)

602 
	scou¡_öfo
 {

603 
	mbyãs
;

604 
	mblocks
;

605 
	m±r
;

606 } 
	tcou¡_öfo
;

608 
	#SNDCTL_DSP_GETIPTR
 
	`_SIOR
 ('P',17, 
cou¡_öfo
)

	)

609 
	#SNDCTL_DSP_GETOPTR
 
	`_SIOR
 ('P',18, 
cou¡_öfo
)

	)

611 
	sbuffmem_desc
 {

612 *
	mbuf„r
;

613 
	msize
;

614 } 
	tbuffmem_desc
;

615 
	#SNDCTL_DSP_MAPINBUF
 
	`_SIOR
 ('P', 19, 
buffmem_desc
)

	)

616 
	#SNDCTL_DSP_MAPOUTBUF
 
	`_SIOR
 ('P', 20, 
buffmem_desc
)

	)

617 
	#SNDCTL_DSP_SETSYNCRO
 
	`_SIO
 ('P', 21)

	)

618 
	#SNDCTL_DSP_SETDUPLEX
 
	`_SIO
 ('P', 22)

	)

619 
	#SNDCTL_DSP_GETODELAY
 
	`_SIOR
 ('P', 23, )

	)

621 
	#SNDCTL_DSP_GETCHANNELMASK
 
	`_SIOWR
('P', 64, )

	)

622 
	#SNDCTL_DSP_BIND_CHANNEL
 
	`_SIOWR
('P', 65, )

	)

623 
	#DSP_BIND_QUERY
 0x00000000

	)

624 
	#DSP_BIND_FRONT
 0x00000001

	)

625 
	#DSP_BIND_SURR
 0x00000002

	)

626 
	#DSP_BIND_CENTER_LFE
 0x00000004

	)

627 
	#DSP_BIND_HANDSET
 0x00000008

	)

628 
	#DSP_BIND_MIC
 0x00000010

	)

629 
	#DSP_BIND_MODEM1
 0x00000020

	)

630 
	#DSP_BIND_MODEM2
 0x00000040

	)

631 
	#DSP_BIND_I2S
 0x00000080

	)

632 
	#DSP_BIND_SPDIF
 0x00000100

	)

634 
	#SNDCTL_DSP_SETSPDIF
 
	`_SIOW
 ('P', 66, )

	)

635 
	#SNDCTL_DSP_GETSPDIF
 
	`_SIOR
 ('P', 67, )

	)

636 
	#SPDIF_PRO
 0x0001

	)

637 
	#SPDIF_N_AUD
 0x0002

	)

638 
	#SPDIF_COPY
 0x0004

	)

639 
	#SPDIF_PRE
 0x0008

	)

640 
	#SPDIF_CC
 0x07f0

	)

641 
	#SPDIF_L
 0x0800

	)

642 
	#SPDIF_DRS
 0x4000

	)

643 
	#SPDIF_V
 0x8000

	)

656 
	#SNDCTL_DSP_PROFILE
 
	`_SIOW
 ('P', 23, )

	)

657 
	#APF_NORMAL
 0

	)

658 
	#APF_NETWORK
 1

	)

659 
	#APF_CPUINTENS
 2

	)

661 
	#SOUND_PCM_READ_RATE
 
	`_SIOR
 ('P', 2, )

	)

662 
	#SOUND_PCM_READ_CHANNELS
 
	`_SIOR
 ('P', 6, )

	)

663 
	#SOUND_PCM_READ_BITS
 
	`_SIOR
 ('P', 5, )

	)

664 
	#SOUND_PCM_READ_FILTER
 
	`_SIOR
 ('P', 7, )

	)

667 
	#SOUND_PCM_WRITE_BITS
 
SNDCTL_DSP_SETFMT


	)

668 
	#SOUND_PCM_WRITE_RATE
 
SNDCTL_DSP_SPEED


	)

669 
	#SOUND_PCM_POST
 
SNDCTL_DSP_POST


	)

670 
	#SOUND_PCM_RESET
 
SNDCTL_DSP_RESET


	)

671 
	#SOUND_PCM_SYNC
 
SNDCTL_DSP_SYNC


	)

672 
	#SOUND_PCM_SUBDIVIDE
 
SNDCTL_DSP_SUBDIVIDE


	)

673 
	#SOUND_PCM_SETFRAGMENT
 
SNDCTL_DSP_SETFRAGMENT


	)

674 
	#SOUND_PCM_GETFMTS
 
SNDCTL_DSP_GETFMTS


	)

675 
	#SOUND_PCM_SETFMT
 
SNDCTL_DSP_SETFMT


	)

676 
	#SOUND_PCM_GETOSPACE
 
SNDCTL_DSP_GETOSPACE


	)

677 
	#SOUND_PCM_GETISPACE
 
SNDCTL_DSP_GETISPACE


	)

678 
	#SOUND_PCM_NONBLOCK
 
SNDCTL_DSP_NONBLOCK


	)

679 
	#SOUND_PCM_GETCAPS
 
SNDCTL_DSP_GETCAPS


	)

680 
	#SOUND_PCM_GETTRIGGER
 
SNDCTL_DSP_GETTRIGGER


	)

681 
	#SOUND_PCM_SETTRIGGER
 
SNDCTL_DSP_SETTRIGGER


	)

682 
	#SOUND_PCM_SETSYNCRO
 
SNDCTL_DSP_SETSYNCRO


	)

683 
	#SOUND_PCM_GETIPTR
 
SNDCTL_DSP_GETIPTR


	)

684 
	#SOUND_PCM_GETOPTR
 
SNDCTL_DSP_GETOPTR


	)

685 
	#SOUND_PCM_MAPINBUF
 
SNDCTL_DSP_MAPINBUF


	)

686 
	#SOUND_PCM_MAPOUTBUF
 
SNDCTL_DSP_MAPOUTBUF


	)

693 
	sc›r_buf„r
 {

694 
	mcomm™d
;

695 
	mÊags
;

696 
	#CPF_NONE
 0x0000

	)

697 
	#CPF_FIRST
 0x0001

	)

698 
	#CPF_LAST
 0x0002

	)

699 
	mÀn
;

700 
	moffs
;

702 
	md©a
[4000];

703 } 
	tc›r_buf„r
;

705 
	sc›r_debug_buf
 {

706 
	mcomm™d
;

707 
	m∑rm1
;

708 
	m∑rm2
;

709 
	mÊags
;

710 
	mÀn
;

711 } 
	tc›r_debug_buf
;

713 
	sc›r_msg
 {

714 
	mÀn
;

715 
	md©a
[4000];

716 } 
	tc›r_msg
;

718 
	#SNDCTL_COPR_RESET
 
	`_SIO
 ('C', 0)

	)

719 
	#SNDCTL_COPR_LOAD
 
	`_SIOWR
('C', 1, 
c›r_buf„r
)

	)

720 
	#SNDCTL_COPR_RDATA
 
	`_SIOWR
('C', 2, 
c›r_debug_buf
)

	)

721 
	#SNDCTL_COPR_RCODE
 
	`_SIOWR
('C', 3, 
c›r_debug_buf
)

	)

722 
	#SNDCTL_COPR_WDATA
 
	`_SIOW
 ('C', 4, 
c›r_debug_buf
)

	)

723 
	#SNDCTL_COPR_WCODE
 
	`_SIOW
 ('C', 5, 
c›r_debug_buf
)

	)

724 
	#SNDCTL_COPR_RUN
 
	`_SIOWR
('C', 6, 
c›r_debug_buf
)

	)

725 
	#SNDCTL_COPR_HALT
 
	`_SIOWR
('C', 7, 
c›r_debug_buf
)

	)

726 
	#SNDCTL_COPR_SENDMSG
 
	`_SIOWR
('C', 8, 
c›r_msg
)

	)

727 
	#SNDCTL_COPR_RCVMSG
 
	`_SIOR
 ('C', 9, 
c›r_msg
)

	)

742 
	#SOUND_MIXER_NRDEVICES
 25

	)

743 
	#SOUND_MIXER_VOLUME
 0

	)

744 
	#SOUND_MIXER_BASS
 1

	)

745 
	#SOUND_MIXER_TREBLE
 2

	)

746 
	#SOUND_MIXER_SYNTH
 3

	)

747 
	#SOUND_MIXER_PCM
 4

	)

748 
	#SOUND_MIXER_SPEAKER
 5

	)

749 
	#SOUND_MIXER_LINE
 6

	)

750 
	#SOUND_MIXER_MIC
 7

	)

751 
	#SOUND_MIXER_CD
 8

	)

752 
	#SOUND_MIXER_IMIX
 9

	)

753 
	#SOUND_MIXER_ALTPCM
 10

	)

754 
	#SOUND_MIXER_RECLEV
 11

	)

755 
	#SOUND_MIXER_IGAIN
 12

	)

756 
	#SOUND_MIXER_OGAIN
 13

	)

763 
	#SOUND_MIXER_LINE1
 14

	)

764 
	#SOUND_MIXER_LINE2
 15

	)

765 
	#SOUND_MIXER_LINE3
 16

	)

766 
	#SOUND_MIXER_DIGITAL1
 17

	)

767 
	#SOUND_MIXER_DIGITAL2
 18

	)

768 
	#SOUND_MIXER_DIGITAL3
 19

	)

769 
	#SOUND_MIXER_PHONEIN
 20

	)

770 
	#SOUND_MIXER_PHONEOUT
 21

	)

771 
	#SOUND_MIXER_VIDEO
 22

	)

772 
	#SOUND_MIXER_RADIO
 23

	)

773 
	#SOUND_MIXER_MONITOR
 24

	)

777 
	#SOUND_ONOFF_MIN
 28

	)

778 
	#SOUND_ONOFF_MAX
 30

	)

781 
	#SOUND_MIXER_NONE
 31

	)

787 
	#SOUND_MIXER_ENHANCE
 
SOUND_MIXER_NONE


	)

788 
	#SOUND_MIXER_MUTE
 
SOUND_MIXER_NONE


	)

789 
	#SOUND_MIXER_LOUD
 
SOUND_MIXER_NONE


	)

792 
	#SOUND_DEVICE_LABELS
 {"Vol ", "Bass ", "Trebl", "Synth", "Pcm ", "Spkr ", "Line ", \

795 "Ph⁄eIn", "Ph⁄eOut", "Video", "Radio", "M⁄ô‹"}

	)

797 
	#SOUND_DEVICE_NAMES
 {"vol", "bass", "treble", "synth", "pcm", "speaker", "line", \

800 "phö", "phout", "video", "ødio", "m⁄ô‹"}

	)

804 
	#SOUND_MIXER_RECSRC
 0xf‡

	)

805 
	#SOUND_MIXER_DEVMASK
 0x„

	)

806 
	#SOUND_MIXER_RECMASK
 0xfd

	)

807 
	#SOUND_MIXER_CAPS
 0xfc

	)

808 
	#SOUND_CAP_EXCL_INPUT
 0x00000001

	)

809 
	#SOUND_MIXER_STEREODEVS
 0xfb

	)

810 
	#SOUND_MIXER_OUTSRC
 0xÁ

	)

811 
	#SOUND_MIXER_OUTMASK
 0xf9

	)

815 
	#SOUND_MASK_VOLUME
 (1 << 
SOUND_MIXER_VOLUME
)

	)

816 
	#SOUND_MASK_BASS
 (1 << 
SOUND_MIXER_BASS
)

	)

817 
	#SOUND_MASK_TREBLE
 (1 << 
SOUND_MIXER_TREBLE
)

	)

818 
	#SOUND_MASK_SYNTH
 (1 << 
SOUND_MIXER_SYNTH
)

	)

819 
	#SOUND_MASK_PCM
 (1 << 
SOUND_MIXER_PCM
)

	)

820 
	#SOUND_MASK_SPEAKER
 (1 << 
SOUND_MIXER_SPEAKER
)

	)

821 
	#SOUND_MASK_LINE
 (1 << 
SOUND_MIXER_LINE
)

	)

822 
	#SOUND_MASK_MIC
 (1 << 
SOUND_MIXER_MIC
)

	)

823 
	#SOUND_MASK_CD
 (1 << 
SOUND_MIXER_CD
)

	)

824 
	#SOUND_MASK_IMIX
 (1 << 
SOUND_MIXER_IMIX
)

	)

825 
	#SOUND_MASK_ALTPCM
 (1 << 
SOUND_MIXER_ALTPCM
)

	)

826 
	#SOUND_MASK_RECLEV
 (1 << 
SOUND_MIXER_RECLEV
)

	)

827 
	#SOUND_MASK_IGAIN
 (1 << 
SOUND_MIXER_IGAIN
)

	)

828 
	#SOUND_MASK_OGAIN
 (1 << 
SOUND_MIXER_OGAIN
)

	)

829 
	#SOUND_MASK_LINE1
 (1 << 
SOUND_MIXER_LINE1
)

	)

830 
	#SOUND_MASK_LINE2
 (1 << 
SOUND_MIXER_LINE2
)

	)

831 
	#SOUND_MASK_LINE3
 (1 << 
SOUND_MIXER_LINE3
)

	)

832 
	#SOUND_MASK_DIGITAL1
 (1 << 
SOUND_MIXER_DIGITAL1
)

	)

833 
	#SOUND_MASK_DIGITAL2
 (1 << 
SOUND_MIXER_DIGITAL2
)

	)

834 
	#SOUND_MASK_DIGITAL3
 (1 << 
SOUND_MIXER_DIGITAL3
)

	)

835 
	#SOUND_MASK_PHONEIN
 (1 << 
SOUND_MIXER_PHONEIN
)

	)

836 
	#SOUND_MASK_PHONEOUT
 (1 << 
SOUND_MIXER_PHONEOUT
)

	)

837 
	#SOUND_MASK_RADIO
 (1 << 
SOUND_MIXER_RADIO
)

	)

838 
	#SOUND_MASK_VIDEO
 (1 << 
SOUND_MIXER_VIDEO
)

	)

839 
	#SOUND_MASK_MONITOR
 (1 << 
SOUND_MIXER_MONITOR
)

	)

842 
	#SOUND_MASK_MUTE
 (1 << 
SOUND_MIXER_MUTE
)

	)

843 
	#SOUND_MASK_ENHANCE
 (1 << 
SOUND_MIXER_ENHANCE
)

	)

844 
	#SOUND_MASK_LOUD
 (1 << 
SOUND_MIXER_LOUD
)

	)

846 
	#MIXER_READ
(
dev
Ë
	`_SIOR
('M', dev, )

	)

847 
	#SOUND_MIXER_READ_VOLUME
 
	`MIXER_READ
(
SOUND_MIXER_VOLUME
)

	)

848 
	#SOUND_MIXER_READ_BASS
 
	`MIXER_READ
(
SOUND_MIXER_BASS
)

	)

849 
	#SOUND_MIXER_READ_TREBLE
 
	`MIXER_READ
(
SOUND_MIXER_TREBLE
)

	)

850 
	#SOUND_MIXER_READ_SYNTH
 
	`MIXER_READ
(
SOUND_MIXER_SYNTH
)

	)

851 
	#SOUND_MIXER_READ_PCM
 
	`MIXER_READ
(
SOUND_MIXER_PCM
)

	)

852 
	#SOUND_MIXER_READ_SPEAKER
 
	`MIXER_READ
(
SOUND_MIXER_SPEAKER
)

	)

853 
	#SOUND_MIXER_READ_LINE
 
	`MIXER_READ
(
SOUND_MIXER_LINE
)

	)

854 
	#SOUND_MIXER_READ_MIC
 
	`MIXER_READ
(
SOUND_MIXER_MIC
)

	)

855 
	#SOUND_MIXER_READ_CD
 
	`MIXER_READ
(
SOUND_MIXER_CD
)

	)

856 
	#SOUND_MIXER_READ_IMIX
 
	`MIXER_READ
(
SOUND_MIXER_IMIX
)

	)

857 
	#SOUND_MIXER_READ_ALTPCM
 
	`MIXER_READ
(
SOUND_MIXER_ALTPCM
)

	)

858 
	#SOUND_MIXER_READ_RECLEV
 
	`MIXER_READ
(
SOUND_MIXER_RECLEV
)

	)

859 
	#SOUND_MIXER_READ_IGAIN
 
	`MIXER_READ
(
SOUND_MIXER_IGAIN
)

	)

860 
	#SOUND_MIXER_READ_OGAIN
 
	`MIXER_READ
(
SOUND_MIXER_OGAIN
)

	)

861 
	#SOUND_MIXER_READ_LINE1
 
	`MIXER_READ
(
SOUND_MIXER_LINE1
)

	)

862 
	#SOUND_MIXER_READ_LINE2
 
	`MIXER_READ
(
SOUND_MIXER_LINE2
)

	)

863 
	#SOUND_MIXER_READ_LINE3
 
	`MIXER_READ
(
SOUND_MIXER_LINE3
)

	)

866 
	#SOUND_MIXER_READ_MUTE
 
	`MIXER_READ
(
SOUND_MIXER_MUTE
)

	)

867 
	#SOUND_MIXER_READ_ENHANCE
 
	`MIXER_READ
(
SOUND_MIXER_ENHANCE
)

	)

868 
	#SOUND_MIXER_READ_LOUD
 
	`MIXER_READ
(
SOUND_MIXER_LOUD
)

	)

870 
	#SOUND_MIXER_READ_RECSRC
 
	`MIXER_READ
(
SOUND_MIXER_RECSRC
)

	)

871 
	#SOUND_MIXER_READ_DEVMASK
 
	`MIXER_READ
(
SOUND_MIXER_DEVMASK
)

	)

872 
	#SOUND_MIXER_READ_RECMASK
 
	`MIXER_READ
(
SOUND_MIXER_RECMASK
)

	)

873 
	#SOUND_MIXER_READ_STEREODEVS
 
	`MIXER_READ
(
SOUND_MIXER_STEREODEVS
)

	)

874 
	#SOUND_MIXER_READ_CAPS
 
	`MIXER_READ
(
SOUND_MIXER_CAPS
)

	)

876 
	#MIXER_WRITE
(
dev
Ë
	`_SIOWR
('M', dev, )

	)

877 
	#SOUND_MIXER_WRITE_VOLUME
 
	`MIXER_WRITE
(
SOUND_MIXER_VOLUME
)

	)

878 
	#SOUND_MIXER_WRITE_BASS
 
	`MIXER_WRITE
(
SOUND_MIXER_BASS
)

	)

879 
	#SOUND_MIXER_WRITE_TREBLE
 
	`MIXER_WRITE
(
SOUND_MIXER_TREBLE
)

	)

880 
	#SOUND_MIXER_WRITE_SYNTH
 
	`MIXER_WRITE
(
SOUND_MIXER_SYNTH
)

	)

881 
	#SOUND_MIXER_WRITE_PCM
 
	`MIXER_WRITE
(
SOUND_MIXER_PCM
)

	)

882 
	#SOUND_MIXER_WRITE_SPEAKER
 
	`MIXER_WRITE
(
SOUND_MIXER_SPEAKER
)

	)

883 
	#SOUND_MIXER_WRITE_LINE
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE
)

	)

884 
	#SOUND_MIXER_WRITE_MIC
 
	`MIXER_WRITE
(
SOUND_MIXER_MIC
)

	)

885 
	#SOUND_MIXER_WRITE_CD
 
	`MIXER_WRITE
(
SOUND_MIXER_CD
)

	)

886 
	#SOUND_MIXER_WRITE_IMIX
 
	`MIXER_WRITE
(
SOUND_MIXER_IMIX
)

	)

887 
	#SOUND_MIXER_WRITE_ALTPCM
 
	`MIXER_WRITE
(
SOUND_MIXER_ALTPCM
)

	)

888 
	#SOUND_MIXER_WRITE_RECLEV
 
	`MIXER_WRITE
(
SOUND_MIXER_RECLEV
)

	)

889 
	#SOUND_MIXER_WRITE_IGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_IGAIN
)

	)

890 
	#SOUND_MIXER_WRITE_OGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_OGAIN
)

	)

891 
	#SOUND_MIXER_WRITE_LINE1
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE1
)

	)

892 
	#SOUND_MIXER_WRITE_LINE2
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE2
)

	)

893 
	#SOUND_MIXER_WRITE_LINE3
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE3
)

	)

896 
	#SOUND_MIXER_WRITE_MUTE
 
	`MIXER_WRITE
(
SOUND_MIXER_MUTE
)

	)

897 
	#SOUND_MIXER_WRITE_ENHANCE
 
	`MIXER_WRITE
(
SOUND_MIXER_ENHANCE
)

	)

898 
	#SOUND_MIXER_WRITE_LOUD
 
	`MIXER_WRITE
(
SOUND_MIXER_LOUD
)

	)

900 
	#SOUND_MIXER_WRITE_RECSRC
 
	`MIXER_WRITE
(
SOUND_MIXER_RECSRC
)

	)

902 
	smixî_öfo


904 
	mid
[16];

905 
	m«me
[32];

906 
	mmodify_cou¡î
;

907 
	mfûÀrs
[10];

908 } 
	tmixî_öfo
;

910 
	s_ﬁd_mixî_öfo


912 
	mid
[16];

913 
	m«me
[32];

914 } 
	t_ﬁd_mixî_öfo
;

916 
	#SOUND_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
mixî_öfo
)

	)

917 
	#SOUND_OLD_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
_ﬁd_mixî_öfo
)

	)

925 
	tmixî_ªc‹d
[128];

927 
	#SOUND_MIXER_ACCESS
 
	`_SIOWR
('M', 102, 
mixî_ªc‹d
)

	)

932 
	#SOUND_MIXER_AGC
 
	`_SIOWR
('M', 103, )

	)

933 
	#SOUND_MIXER_3DSE
 
	`_SIOWR
('M', 104, )

	)

939 
	#SOUND_MIXER_PRIVATE1
 
	`_SIOWR
('M', 111, )

	)

940 
	#SOUND_MIXER_PRIVATE2
 
	`_SIOWR
('M', 112, )

	)

941 
	#SOUND_MIXER_PRIVATE3
 
	`_SIOWR
('M', 113, )

	)

942 
	#SOUND_MIXER_PRIVATE4
 
	`_SIOWR
('M', 114, )

	)

943 
	#SOUND_MIXER_PRIVATE5
 
	`_SIOWR
('M', 115, )

	)

953 
	smixî_vﬁ_èbÀ
 {

954 
	mnum
;

955 
	m«me
[32];

956 
	mÀvñs
[32];

957 } 
	tmixî_vﬁ_èbÀ
;

959 
	#SOUND_MIXER_GETLEVELS
 
	`_SIOWR
('M', 116, 
mixî_vﬁ_èbÀ
)

	)

960 
	#SOUND_MIXER_SETLEVELS
 
	`_SIOWR
('M', 117, 
mixî_vﬁ_èbÀ
)

	)

968 
	#OSS_GETVERSION
 
	`_SIOR
 ('M', 118, )

	)

988 
	#EV_SEQ_LOCAL
 0x80

	)

989 
	#EV_TIMING
 0x81

	)

990 
	#EV_CHN_COMMON
 0x92

	)

991 
	#EV_CHN_VOICE
 0x93

	)

992 
	#EV_SYSEX
 0x94

	)

1002 
	#MIDI_NOTEOFF
 0x80

	)

1003 
	#MIDI_NOTEON
 0x90

	)

1004 
	#MIDI_KEY_PRESSURE
 0xA0

	)

1010 
	#MIDI_CTL_CHANGE
 0xB0

	)

1011 
	#MIDI_PGM_CHANGE
 0xC0

	)

1012 
	#MIDI_CHN_PRESSURE
 0xD0

	)

1013 
	#MIDI_PITCH_BEND
 0xE0

	)

1015 
	#MIDI_SYSTEM_PREFIX
 0xF0

	)

1020 
	#TMR_WAIT_REL
 1

	)

1021 
	#TMR_WAIT_ABS
 2

	)

1022 
	#TMR_STOP
 3

	)

1023 
	#TMR_START
 4

	)

1024 
	#TMR_CONTINUE
 5

	)

1025 
	#TMR_TEMPO
 6

	)

1026 
	#TMR_ECHO
 8

	)

1027 
	#TMR_CLOCK
 9

	)

1028 
	#TMR_SPP
 10

	)

1029 
	#TMR_TIMESIG
 11

	)

1034 
	#LOCL_STARTAUDIO
 1

	)

1052 
	#SEQ_DECLAREBUF
(Ë
	`SEQ_USE_EXTBUF
()

	)

1054 
£qbuf_dump
();

1056 
	#SEQ_PM_DEFINES
 
__foo_b¨___


	)

1058 
	#SEQ_LOAD_GMINSTR
(
dev
, 
ö°r
)

	)

1059 
	#SEQ_LOAD_GMDRUM
(
dev
, 
drum
)

	)

1061 
	#_SEQ_EXTERN
 

	)

1062 
	#SEQ_USE_EXTBUF
() \

1063 
_SEQ_EXTERN
 
_£qbuf
[]; \

1064 
_SEQ_EXTERN
 
_£qbuÊí
; _SEQ_EXTERN 
_£qbuÂå


	)

1066 #i‚de‡
USE_SIMPLE_MACROS


1086 
	#SEQ_DEFINEBUF
(
Àn
Ë
_£qbuf
[Àn]; 
_£qbuÊí
 =Üí;
_£qbuÂå
 = 0

	)

1087 
	#_SEQ_NEEDBUF
(
Àn
Ëi‡((
_£qbuÂå
+÷í)Ë> 
_£qbuÊí
Ë
	`£qbuf_dump
()

	)

1088 
	#_SEQ_ADVBUF
(
Àn
Ë
_£qbuÂå
 +
	)
len

1089 
	#SEQ_DUMPBUF
 
£qbuf_dump


	)

1105 
	#_SEQ_NEEDBUF
(
Àn
Ë

	)

1108 
	#SEQ_VOLUME_MODE
(
dev
, 
mode
Ë{
	`_SEQ_NEEDBUF
(8);\

1109 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1110 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_VOLMODE
;\

1111 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1112 
_£qbuf
[
_£qbuÂå
+3] = (
mode
);\

1113 
_£qbuf
[
_£qbuÂå
+4] = 0;\

1114 
_£qbuf
[
_£qbuÂå
+5] = 0;\

1115 
_£qbuf
[
_£qbuÂå
+6] = 0;\

1116 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1117 
	`_SEQ_ADVBUF
(8);}

	)

1123 
	#_CHN_VOICE
(
dev
, 
evít
, 
chn
, 
nŸe
, 
∑rm
) \

1124 {
	`_SEQ_NEEDBUF
(8);\

1125 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_VOICE
;\

1126 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1127 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1128 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1129 
_£qbuf
[
_£qbuÂå
+4] = (
nŸe
);\

1130 
_£qbuf
[
_£qbuÂå
+5] = (
∑rm
);\

1131 
_£qbuf
[
_£qbuÂå
+6] = (0);\

1132 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1133 
	`_SEQ_ADVBUF
(8);}

	)

1135 
	#SEQ_START_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1136 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEON
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1138 
	#SEQ_STOP_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1139 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEOFF
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1141 
	#SEQ_KEY_PRESSURE
(
dev
, 
chn
, 
nŸe
, 
¥essuª
) \

1142 
	`_CHN_VOICE
(
dev
, 
MIDI_KEY_PRESSURE
, 
chn
, 
nŸe
, 
¥essuª
)

	)

1148 
	#_CHN_COMMON
(
dev
, 
evít
, 
chn
, 
p1
, 
p2
, 
w14
) \

1149 {
	`_SEQ_NEEDBUF
(8);\

1150 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_COMMON
;\

1151 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1152 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1153 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1154 
_£qbuf
[
_£qbuÂå
+4] = (
p1
);\

1155 
_£qbuf
[
_£qbuÂå
+5] = (
p2
);\

1156 *(*)&
_£qbuf
[
_£qbuÂå
+6] = (
w14
);\

1157 
	`_SEQ_ADVBUF
(8);}

	)

1173 
	#SEQ_SYSEX
(
dev
, 
buf
, 
Àn
) \

1174 {
ii
, 
Œ
=(
Àn
); \

1175 *
buÂ
=
buf
;\

1176 i‡(
Œ
>6)ll=6;\

1177 
	`_SEQ_NEEDBUF
(8);\

1178 
_£qbuf
[
_£qbuÂå
] = 
EV_SYSEX
;\

1179 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1180 
ii
=0;ii<
Œ
;ii++)\

1181 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 
buÂ
[ii];\

1182 
ii
=
Œ
;ii<6;ii++)\

1183 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 0xff;\

1184 
	`_SEQ_ADVBUF
(8);}

	)

1186 
	#SEQ_CHN_PRESSURE
(
dev
, 
chn
, 
¥essuª
) \

1187 
	`_CHN_COMMON
(
dev
, 
MIDI_CHN_PRESSURE
, 
chn
, 
¥essuª
, 0, 0)

	)

1189 
	#SEQ_SET_PATCH
 
SEQ_PGM_CHANGE


	)

1190 
	#SEQ_PGM_CHANGE
(
dev
, 
chn
, 
∑tch
) \

1191 
	`_CHN_COMMON
(
dev
, 
MIDI_PGM_CHANGE
, 
chn
, 
∑tch
, 0, 0)

	)

1193 
	#SEQ_CONTROL
(
dev
, 
chn
, 
c⁄åﬁÀr
, 
vÆue
) \

1194 
	`_CHN_COMMON
(
dev
, 
MIDI_CTL_CHANGE
, 
chn
, 
c⁄åﬁÀr
, 0, 
vÆue
)

	)

1196 
	#SEQ_BENDER
(
dev
, 
chn
, 
vÆue
) \

1197 
	`_CHN_COMMON
(
dev
, 
MIDI_PITCH_BEND
, 
chn
, 0, 0, 
vÆue
)

	)

1200 
	#SEQ_V2_X_CONTROL
(
dev
, 
voi˚
, 
c⁄åﬁÀr
, 
vÆue
Ë{
	`_SEQ_NEEDBUF
(8);\

1201 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1202 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_CONTROLLER
;\

1203 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1204 
_£qbuf
[
_£qbuÂå
+3] = (
voi˚
);\

1205 
_£qbuf
[
_£qbuÂå
+4] = (
c⁄åﬁÀr
);\

1206 
_£qbuf
[
_£qbuÂå
+5] = ((
vÆue
)&0xff);\

1207 
_£qbuf
[
_£qbuÂå
+6] = ((
vÆue
>>8)&0xff);\

1208 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1209 
	`_SEQ_ADVBUF
(8);}

	)

1214 
	#SEQ_PITCHBEND
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER
, vÆue)

	)

1215 
	#SEQ_BENDER_RANGE
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER_RANGE
, vÆue)

	)

1216 
	#SEQ_EXPRESSION
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_EXPRESSION
, vÆue*128)

	)

1217 
	#SEQ_MAIN_VOLUME
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_MAIN_VOLUME
, (vÆue*16383)/100)

	)

1218 
	#SEQ_PANNING
(
dev
, 
voi˚
, 
pos
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_PAN
, (pos+128Ë/ 2)

	)

1224 
	#_TIMER_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1225 
_£qbuf
[
_£qbuÂå
+0] = 
EV_TIMING
; \

1226 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1227 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1228 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1229 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1230 
	`_SEQ_ADVBUF
(8);}

	)

1232 
	#SEQ_START_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_START
, 0)

	)

1233 
	#SEQ_STOP_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_STOP
, 0)

	)

1234 
	#SEQ_CONTINUE_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_CONTINUE
, 0)

	)

1235 
	#SEQ_WAIT_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_ABS
,Åicks)

	)

1236 
	#SEQ_DELTA_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_REL
,Åicks)

	)

1237 
	#SEQ_ECHO_BACK
(
key
Ë
	`_TIMER_EVENT
(
TMR_ECHO
, key)

	)

1238 
	#SEQ_SET_TEMPO
(
vÆue
Ë
	`_TIMER_EVENT
(
TMR_TEMPO
, vÆue)

	)

1239 
	#SEQ_SONGPOS
(
pos
Ë
	`_TIMER_EVENT
(
TMR_SPP
,Öos)

	)

1240 
	#SEQ_TIME_SIGNATURE
(
sig
Ë
	`_TIMER_EVENT
(
TMR_TIMESIG
, sig)

	)

1246 
	#_LOCAL_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1247 
_£qbuf
[
_£qbuÂå
+0] = 
EV_SEQ_LOCAL
; \

1248 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1249 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1250 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1251 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1252 
	`_SEQ_ADVBUF
(8);}

	)

1254 
	#SEQ_PLAYAUDIO
(
devmask
Ë
	`_LOCAL_EVENT
(
LOCL_STARTAUDIO
, devmask)

	)

1259 
	#SEQ_MIDIOUT
(
devi˚
, 
byã
Ë{
	`_SEQ_NEEDBUF
(4);\

1260 
_£qbuf
[
_£qbuÂå
] = 
SEQ_MIDIPUTC
;\

1261 
_£qbuf
[
_£qbuÂå
+1] = (
byã
);\

1262 
_£qbuf
[
_£qbuÂå
+2] = (
devi˚
);\

1263 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1264 
	`_SEQ_ADVBUF
(4);}

	)

1269 
	#SEQ_WRPATCH
(
∑tchx
, 
Àn
) \

1270 {i‡(
_£qbuÂå
Ë
	`SEQ_DUMPBUF
();\

1271 i‡(
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
)==-1) \

1272 
	`≥º‹
("Wrôê∑tch: /dev/£quí˚r");}

	)

1273 
	#SEQ_WRPATCH2
(
∑tchx
, 
Àn
) \

1274 (
	`SEQ_DUMPBUF
(), 
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
))

	)

	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

102 || 
deföed
 
__LDBL_COMPAT
)

103 #ifde‡
__LDBL_COMPAT


105 #ifde‡
__USE_ISOC99


106 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

107 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

108 #ifde‡
__REDIRECT_NTH


109 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

110 
__∆dbl_√xâow¨df
)

111 
	`__©åibuã__
 ((
__c⁄°__
));

112 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

113 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

115 (
__x
, 
__y
),

116 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

120 #unde‡
__MATHDECL_1


121 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

122 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

123 
¨gs
, 
Æüs
)

	)

124 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

125 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

131 #i‚de‡
_Ml⁄g_doubÀ_


132 
	#_Ml⁄g_doubÀ_
 

	)

134 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

135 #ifde‡
__STDC__


136 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

138 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

140 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

141 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

142 
	#__MATH_DECLARE_LDOUBLE
 1

	)

143 
	~<bôs/m©hˇŒs.h
>

144 #unde‡
_MdoubÀ_


145 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


146 #unde‡
_MdoubÀ_END_NAMESPACE


147 #unde‡
__MATH_PRECNAME


152 #unde‡
__MATHDECL_1


153 #unde‡
__MATHDECL


154 #unde‡
__MATHCALL


157 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


159 
signgam
;

164 #ifde‡
__USE_ISOC99


202 
FP_NAN
,

203 
	#FP_NAN
 
FP_NAN


	)

204 
FP_INFINITE
,

205 
	#FP_INFINITE
 
FP_INFINITE


	)

206 
FP_ZERO
,

207 
	#FP_ZERO
 
FP_ZERO


	)

208 
FP_SUBNORMAL
,

209 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

210 
FP_NORMAL


211 
	#FP_NORMAL
 
FP_NORMAL


	)

215 #ifde‡
__NO_LONG_DOUBLE_MATH


216 
	#Â˛assify
(
x
) \

217 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

219 
	#Â˛assify
(
x
) \

220 ( (
x
) ==  () \

221 ? 
	`__Â˛assifyf
 (
x
) \

222 :  (
x
) ==  () \

223 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

227 #ifde‡
__NO_LONG_DOUBLE_MATH


228 
	#signbô
(
x
) \

229 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

231 
	#signbô
(
x
) \

232 ( (
x
) ==  () \

233 ? 
	`__signbôf
 (
x
) \

234 :  (
x
) ==  () \

235 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

239 #ifde‡
__NO_LONG_DOUBLE_MATH


240 
	#isföôe
(
x
) \

241 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

243 
	#isföôe
(
x
) \

244 ( (
x
) ==  () \

245 ? 
	`__föôef
 (
x
) \

246 :  (
x
) ==  () \

247 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

251 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

255 #ifde‡
__NO_LONG_DOUBLE_MATH


256 
	#i¢™
(
x
) \

257 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

259 
	#i¢™
(
x
) \

260 ( (
x
) ==  () \

261 ? 
	`__i¢™f
 (
x
) \

262 :  (
x
) ==  () \

263 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

267 #ifde‡
__NO_LONG_DOUBLE_MATH


268 
	#isöf
(
x
) \

269 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

271 
	#isöf
(
x
) \

272 ( (
x
) ==  () \

273 ? 
	`__isöff
 (
x
) \

274 :  (
x
) ==  () \

275 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

279 
	#MATH_ERRNO
 1

	)

280 
	#MATH_ERREXCEPT
 2

	)

285 #i‚de‡
__FAST_MATH__


286 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

291 #ifdef 
__USE_MISC


295 
_IEEE_
 = -1,

296 
_SVID_
,

297 
_XOPEN_
,

298 
_POSIX_
,

299 
_ISOC_


300 } 
	t_LIB_VERSION_TYPE
;

305 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

309 #ifde‡
__USE_SVID


315 #ifde‡
__˝lu•lus


316 
__ex˚±i⁄


318 
ex˚±i⁄


321 
ty≥
;

322 *
«me
;

323 
¨g1
;

324 
¨g2
;

325 
ªtvÆ
;

326 
	}
};

328 #ifde‡
__˝lu•lus


329 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

331 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

334 
	#X_TLOSS
 1.41484755040568800000e+16

	)

337 
	#DOMAIN
 1

	)

338 
	#SING
 2

	)

339 
	#OVERFLOW
 3

	)

340 
	#UNDERFLOW
 4

	)

341 
	#TLOSS
 5

	)

342 
	#PLOSS
 6

	)

345 
	#HUGE
 3.40282347e+38F

	)

349 #ifde‡
__USE_XOPEN


351 
	#MAXFLOAT
 3.40282347e+38F

	)

358 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


359 
	#M_E
 2.7182818284590452354

	)

360 
	#M_LOG2E
 1.4426950408889634074

	)

361 
	#M_LOG10E
 0.43429448190325182765

	)

362 
	#M_LN2
 0.69314718055994530942

	)

363 
	#M_LN10
 2.30258509299404568402

	)

364 
	#M_PI
 3.14159265358979323846

	)

365 
	#M_PI_2
 1.57079632679489661923

	)

366 
	#M_PI_4
 0.78539816339744830962

	)

367 
	#M_1_PI
 0.31830988618379067154

	)

368 
	#M_2_PI
 0.63661977236758134308

	)

369 
	#M_2_SQRTPI
 1.12837916709551257390

	)

370 
	#M_SQRT2
 1.41421356237309504880

	)

371 
	#M_SQRT1_2
 0.70710678118654752440

	)

377 #ifde‡
__USE_GNU


378 
	#M_El
 2.7182818284590452353602874713526625L

	)

379 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

380 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

381 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

382 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

383 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

384 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

385 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

386 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

387 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

388 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

389 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

390 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

397 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


398 
	#__NO_MATH_INLINES
 1

	)

401 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

408 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

409 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

410 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

411 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

412 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

413 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

417 #ifde‡
__USE_EXTERN_INLINES


418 
	~<bôs/m©hölöe.h
>

423 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

424 
	~<bôs/m©h-föôe.h
>

427 #ifde‡
__USE_ISOC99


431 #i‚de‡
isgª©î


432 
	#isgª©î
(
x
, 
y
) \

433 (
__exãnsi⁄__
 \

434 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

435 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

439 #i‚de‡
isgª©îequÆ


440 
	#isgª©îequÆ
(
x
, 
y
) \

441 (
__exãnsi⁄__
 \

442 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

443 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

447 #i‚de‡
i¶ess


448 
	#i¶ess
(
x
, 
y
) \

449 (
__exãnsi⁄__
 \

450 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

451 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

455 #i‚de‡
i¶es£quÆ


456 
	#i¶es£quÆ
(
x
, 
y
) \

457 (
__exãnsi⁄__
 \

458 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

459 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

463 #i‚de‡
i¶essgª©î


464 
	#i¶essgª©î
(
x
, 
y
) \

465 (
__exãnsi⁄__
 \

466 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

467 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

471 #i‚de‡
isun‹dîed


472 
	#isun‹dîed
(
u
, 
v
) \

473 (
__exãnsi⁄__
 \

474 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

475 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

480 
	g__END_DECLS


	@/usr/include/search.h

20 #i‚de‡
_SEARCH_H


21 
	#_SEARCH_H
 1

	)

23 
	~<„©uªs.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 
	g__BEGIN_DECLS


30 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


34 #ifde‡
__USE_GNU


35 
	sqñem


37 
qñem
 *
	mq_f‹w
;

38 
qñem
 *
	mq_back
;

39 
	mq_d©a
[1];

45 
	$ösque
 (*
__ñem
, *
__¥ev
Ë
__THROW
;

48 
	$ªmque
 (*
__ñem
Ë
__THROW
;

53 #i‚de‡
__COMPAR_FN_T


54 
	#__COMPAR_FN_T


	)

55 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

57 #ifdef 
__USE_GNU


58 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

65 
FIND
,

66 
ENTER


68 
	tACTION
;

70 
	síåy


72 *
key
;

73 *
d©a
;

75 
	tENTRY
;

78 
_ENTRY
;

88 
ENTRY
 *
	$h£¨ch
 (
ENTRY
 
__ôem
, 
ACTION
 
__a˘i⁄
Ë
__THROW
;

91 
	$h¸óã
 (
size_t
 
__√l
Ë
__THROW
;

94 
	$hde°roy
 (Ë
__THROW
;

96 #ifde‡
__USE_GNU


98 
	sh£¨ch_d©a


100 
_ENTRY
 *
èbÀ
;

101 
size
;

102 
fûÀd
;

107 
	$h£¨ch_r
 (
ENTRY
 
__ôem
, 
ACTION
 
__a˘i⁄
, ENTRY **
__ªtvÆ
,

108 
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

109 
	$h¸óã_r
 (
size_t
 
__√l
, 
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

110 
	$hde°roy_r
 (
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

121 
¥e‹dî
,

122 
po°‹dî
,

123 
íd‹dî
,

124 
Àaf


126 
	tVISIT
;

130 *
	`t£¨ch
 (
__c⁄°
 *
__key
, **
__roŸp
,

131 
__com∑r_‚_t
 
__com∑r
);

135 *
	`tföd
 (
__c⁄°
 *
__key
, *__c⁄° *
__roŸp
,

136 
__com∑r_‚_t
 
__com∑r
);

139 *
	`tdñëe
 (
__c⁄°
 *
__ª°ri˘
 
__key
,

140 **
__ª°ri˘
 
__roŸp
,

141 
__com∑r_‚_t
 
__com∑r
);

143 #i‚de‡
__ACTION_FN_T


144 
	#__ACTION_FN_T


	)

145 (*
	t__a˘i⁄_‚_t
Ë(
	t__c⁄°
 *
	t__nodï
, 
	tVISIT
 
	t__vÆue
,

146 
	t__Àvñ
);

151 
	`twÆk
 (
__c⁄°
 *
__roŸ
, 
__a˘i⁄_‚_t
 
__a˘i⁄
);

153 #ifde‡
__USE_GNU


156 (*
	t__‰ì_‚_t
Ë(*
	t__nodï
);

159 
	`tde°roy
 (*
__roŸ
, 
__‰ì_‚_t
 
__‰ìf˘
);

165 *
	`lföd
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

166 
size_t
 *
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
);

170 *
	`l£¨ch
 (
__c⁄°
 *
__key
, *
__ba£
,

171 
size_t
 *
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
);

173 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

172 #ifde‡
__STDC__


174 
	#°dö
 
°dö


	)

175 
	#°dout
 
°dout


	)

176 
	#°dîr
 
°dîr


	)

179 
__BEGIN_NAMESPACE_STD


181 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

183 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

184 
__END_NAMESPACE_STD


186 #ifde‡
__USE_ATFILE


188 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

189 
__c⁄°
 *
__√w
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


197 #i‚de‡
__USE_FILE_OFFSET64


198 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

200 #ifde‡
__REDIRECT


201 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

203 
	#tmpfûe
 
tmpfûe64


	)

207 #ifde‡
__USE_LARGEFILE64


208 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

212 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

213 
__END_NAMESPACE_STD


215 #ifde‡
__USE_MISC


218 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

222 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


230 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

231 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

235 
__BEGIN_NAMESPACE_STD


240 
	`f˛o£
 (
FILE
 *
__°ªam
);

245 
	`fÊush
 (
FILE
 *
__°ªam
);

246 
__END_NAMESPACE_STD


248 #ifde‡
__USE_MISC


255 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

258 #ifde‡
__USE_GNU


265 
	`f˛o£Æl
 ();

269 
__BEGIN_NAMESPACE_STD


270 #i‚de‡
__USE_FILE_OFFSET64


275 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

276 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

281 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

282 
__c⁄°
 *
__ª°ri˘
 
__modes
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

285 #ifde‡
__REDIRECT


286 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

287 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

288 
__wur
;

289 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

290 
__c⁄°
 *
__ª°ri˘
 
__modes
,

291 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

292 
__wur
;

294 
	#f›í
 
f›í64


	)

295 
	#‰e›í
 
‰e›í64


	)

298 
__END_NAMESPACE_STD


299 #ifde‡
__USE_LARGEFILE64


300 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

302 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

303 
__c⁄°
 *
__ª°ri˘
 
__modes
,

304 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

307 #ifdef 
__USE_POSIX


309 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

312 #ifdef 
__USE_GNU


315 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

316 
__c⁄°
 *
__ª°ri˘
 
__modes
,

317 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

320 #ifde‡
__USE_XOPEN2K8


322 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

323 
__THROW
 
__wur
;

328 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

332 
__BEGIN_NAMESPACE_STD


335 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

339 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

340 
__modes
, 
size_t
 
__n
Ë
__THROW
;

341 
__END_NAMESPACE_STD


343 #ifdef 
__USE_BSD


346 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

347 
size_t
 
__size
Ë
__THROW
;

350 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

354 
__BEGIN_NAMESPACE_STD


359 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

360 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

367 
	$•rötf
 (*
__ª°ri˘
 
__s
,

368 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

374 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

375 
_G_va_li°
 
__¨g
);

380 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

382 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

383 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

384 
__END_NAMESPACE_STD


386 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


387 
__BEGIN_NAMESPACE_C99


389 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

390 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

391 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

393 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

394 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

395 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

396 
__END_NAMESPACE_C99


399 #ifde‡
__USE_GNU


402 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

403 
_G_va_li°
 
__¨g
)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

405 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

406 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

408 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

409 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

410 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

413 #ifde‡
__USE_XOPEN2K8


420 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

421 
_G_va_li°
 
__¨g
)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

423 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

424 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

428 
__BEGIN_NAMESPACE_STD


433 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

434 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

441 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

442 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

444 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

445 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

446 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

447 #ifde‡
__REDIRECT


451 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

452 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_fsˇnf
Ë
__wur
;

454 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

455 
__isoc99_sˇnf
Ë
__wur
;

456 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

457 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

458 
__isoc99_ssˇnf
);

460 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

461 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

462 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

463 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

464 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

465 
	#fsˇnf
 
__isoc99_fsˇnf


	)

466 
	#sˇnf
 
__isoc99_sˇnf


	)

467 
	#ssˇnf
 
__isoc99_ssˇnf


	)

471 
__END_NAMESPACE_STD


473 #ifdef 
__USE_ISOC99


474 
__BEGIN_NAMESPACE_C99


479 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

480 
_G_va_li°
 
__¨g
)

481 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

487 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

488 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

491 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

492 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

493 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

495 #i‡!
deföed
 
__USE_GNU
 \

496 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

497 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

498 #ifde‡
__REDIRECT


502 
	`__REDIRECT
 (
vfsˇnf
,

503 (
FILE
 *
__ª°ri˘
 
__s
,

504 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

505 
__isoc99_vfsˇnf
)

506 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

507 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

508 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

509 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

510 
	`__REDIRECT_NTH
 (
vssˇnf
,

511 (
__c⁄°
 *
__ª°ri˘
 
__s
,

512 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

513 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

514 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

516 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

517 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

520 
_G_va_li°
 
__¨g
Ë
__wur
;

521 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

522 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

523 
_G_va_li°
 
__¨g
Ë
__THROW
;

524 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

525 
	#vsˇnf
 
__isoc99_vsˇnf


	)

526 
	#vssˇnf
 
__isoc99_vssˇnf


	)

530 
__END_NAMESPACE_C99


534 
__BEGIN_NAMESPACE_STD


539 
	`fgëc
 (
FILE
 *
__°ªam
);

540 
	`gëc
 (
FILE
 *
__°ªam
);

546 
	`gëch¨
 ();

547 
__END_NAMESPACE_STD


551 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

553 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


558 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

559 
	`gëch¨_u∆ocked
 ();

562 #ifde‡
__USE_MISC


569 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

573 
__BEGIN_NAMESPACE_STD


581 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

588 
	`putch¨
 (
__c
);

589 
__END_NAMESPACE_STD


593 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

595 #ifde‡
__USE_MISC


602 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


610 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

611 
	`putch¨_u∆ocked
 (
__c
);

615 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

616 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

618 
	`gëw
 (
FILE
 *
__°ªam
);

621 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

625 
__BEGIN_NAMESPACE_STD


630 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

631 
__wur
;

638 *
	$gës
 (*
__s
Ë
__wur
;

639 
__END_NAMESPACE_STD


641 #ifde‡
__USE_GNU


648 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

649 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

653 #ifdef 
__USE_XOPEN2K8


664 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

665 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

666 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

667 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

668 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

669 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

677 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

678 
size_t
 *
__ª°ri˘
 
__n
,

679 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

683 
__BEGIN_NAMESPACE_STD


688 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

694 
	`puts
 (
__c⁄°
 *
__s
);

701 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

708 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

714 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

715 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

716 
__END_NAMESPACE_STD


718 #ifde‡
__USE_GNU


725 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

726 
FILE
 *
__ª°ri˘
 
__°ªam
);

729 #ifde‡
__USE_MISC


736 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

738 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

739 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

743 
__BEGIN_NAMESPACE_STD


748 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

753 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

758 
	`ªwöd
 (
FILE
 *
__°ªam
);

759 
__END_NAMESPACE_STD


766 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


767 #i‚de‡
__USE_FILE_OFFSET64


772 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

777 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

779 #ifde‡
__REDIRECT


780 
	`__REDIRECT
 (
f£eko
,

781 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

782 
f£eko64
);

783 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

785 
	#f£eko
 
f£eko64


	)

786 
	#·ñlo
 
·ñlo64


	)

791 
__BEGIN_NAMESPACE_STD


792 #i‚de‡
__USE_FILE_OFFSET64


797 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

802 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

804 #ifde‡
__REDIRECT


805 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

806 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

807 
	`__REDIRECT
 (
f£ços
,

808 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

810 
	#fgëpos
 
fgëpos64


	)

811 
	#f£ços
 
f£ços64


	)

814 
__END_NAMESPACE_STD


816 #ifde‡
__USE_LARGEFILE64


817 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

818 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

819 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

820 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

823 
__BEGIN_NAMESPACE_STD


825 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

827 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

829 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
__END_NAMESPACE_STD


832 #ifde‡
__USE_MISC


834 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

835 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

840 
__BEGIN_NAMESPACE_STD


845 
	`≥º‹
 (
__c⁄°
 *
__s
);

846 
__END_NAMESPACE_STD


852 
	~<bôs/sys_îæi°.h
>

855 #ifdef 
__USE_POSIX


857 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

860 #ifde‡
__USE_MISC


862 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

866 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

867 
deföed
 
__USE_MISC
)

872 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/sys/io.h

19 #i‚def 
_SYS_IO_H


20 
	#_SYS_IO_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


33 
	$i›îm
 (
__‰om
, 
__num
,

34 
__tu∫_⁄
Ë
__THROW
;

39 
	$i›l
 (
__Àvñ
Ë
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

43 
__ölöe
 

44 
	$öb
 (
__p‹t
)

46 
_v
;

48 
__asm__
 
	`__vﬁ©ûe__
 ("öb %w1,%0":"˜" (
_v
):"Nd" (
__p‹t
));

49  
_v
;

50 
	}
}

52 
__ölöe
 

53 
	$öb_p
 (
__p‹t
)

55 
_v
;

57 
__asm__
 
	`__vﬁ©ûe__
 ("öb %w1,%0\noutb %%Æ,$0x80":"˜" (
_v
):"Nd" (
__p‹t
));

58  
_v
;

59 
	}
}

61 
__ölöe
 

62 
	$öw
 (
__p‹t
)

64 
_v
;

66 
__asm__
 
	`__vﬁ©ûe__
 ("öw %w1,%0":"˜" (
_v
):"Nd" (
__p‹t
));

67  
_v
;

68 
	}
}

70 
__ölöe
 

71 
	$öw_p
 (
__p‹t
)

73 
_v
;

75 
__asm__
 
	`__vﬁ©ûe__
 ("öw %w1,%0\noutb %%Æ,$0x80":"˜" (
_v
):"Nd" (
__p‹t
));

76  
_v
;

77 
	}
}

79 
__ölöe
 

80 
	$öl
 (
__p‹t
)

82 
_v
;

84 
__asm__
 
	`__vﬁ©ûe__
 ("ö»%w1,%0":"˜" (
_v
):"Nd" (
__p‹t
));

85  
_v
;

86 
	}
}

88 
__ölöe
 

89 
	$öl_p
 (
__p‹t
)

91 
_v
;

92 
__asm__
 
	`__vﬁ©ûe__
 ("ö»%w1,%0\noutb %%Æ,$0x80":"˜" (
_v
):"Nd" (
__p‹t
));

93  
_v
;

94 
	}
}

96 
__ölöe
 

97 
	$outb
 (
__vÆue
, 
__p‹t
)

99 
__asm__
 
	`__vﬁ©ûe__
 ("outb %b0,%w1": :"a" (
__vÆue
), "Nd" (
__p‹t
));

100 
	}
}

102 
__ölöe
 

103 
	$outb_p
 (
__vÆue
, 
__p‹t
)

105 
__asm__
 
	`__vﬁ©ûe__
 ("outb %b0,%w1\noutb %%Æ,$0x80": :"a" (
__vÆue
),

106 "Nd" (
__p‹t
));

107 
	}
}

109 
__ölöe
 

110 
	$outw
 (
__vÆue
, 
__p‹t
)

112 
__asm__
 
	`__vﬁ©ûe__
 ("outw %w0,%w1": :"a" (
__vÆue
), "Nd" (
__p‹t
));

114 
	}
}

116 
__ölöe
 

117 
	$outw_p
 (
__vÆue
, 
__p‹t
)

119 
__asm__
 
	`__vﬁ©ûe__
 ("outw %w0,%w1\noutb %%Æ,$0x80": :"a" (
__vÆue
),

120 "Nd" (
__p‹t
));

121 
	}
}

123 
__ölöe
 

124 
	$oué
 (
__vÆue
, 
__p‹t
)

126 
__asm__
 
	`__vﬁ©ûe__
 ("oué %0,%w1": :"a" (
__vÆue
), "Nd" (
__p‹t
));

127 
	}
}

129 
__ölöe
 

130 
	$oué_p
 (
__vÆue
, 
__p‹t
)

132 
__asm__
 
	`__vﬁ©ûe__
 ("oué %0,%w1\noutb %%Æ,$0x80": :"a" (
__vÆue
),

133 "Nd" (
__p‹t
));

134 
	}
}

136 
__ölöe
 

137 
	$ösb
 (
__p‹t
, *
addr
, 
__cou¡
)

139 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; insb":"=D" (
addr
), "=c" (
__cou¡
)

140 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

141 
	}
}

143 
__ölöe
 

144 
	$ösw
 (
__p‹t
, *
addr
, 
__cou¡
)

146 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; insw":"=D" (
addr
), "=c" (
__cou¡
)

147 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

148 
	}
}

150 
__ölöe
 

151 
	$ö¶
 (
__p‹t
, *
addr
, 
__cou¡
)

153 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; in¶":"=D" (
addr
), "=c" (
__cou¡
)

154 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

155 
	}
}

157 
__ölöe
 

158 
	$outsb
 (
__p‹t
, c⁄° *
addr
, 
__cou¡
)

160 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; outsb":"=S" (
addr
), "=c" (
__cou¡
)

161 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

162 
	}
}

164 
__ölöe
 

165 
	$outsw
 (
__p‹t
, c⁄° *
addr
, 
__cou¡
)

167 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; outsw":"=S" (
addr
), "=c" (
__cou¡
)

168 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

169 
	}
}

171 
__ölöe
 

172 
	$out¶
 (
__p‹t
, c⁄° *
addr
, 
__cou¡
)

174 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; out¶":"=S" (
addr
), "=c" (
__cou¡
)

175 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

176 
	}
}

180 
	g__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/soundcard.h

1 
	~<löux/soundˇrd.h
>

	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
;

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 
	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 
	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 
	`∑u£
 ();

474 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 *
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 **
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 **
ívú⁄
;

552 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 
	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

740 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

753 #ifde‡
__USE_GNU


756 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
 
__wur
;

771 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
 
__wur
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 *
	$ây«me
 (
__fd
Ë
__THROW
;

797 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 
	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 
	$ây¶Ÿ
 (Ë
__THROW
;

813 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 *
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$vh™gup
 (Ë
__THROW
;

932 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 *
	$gëu£rshñl
 (Ë
__THROW
;

953 
	$ídu£rshñl
 (Ë
__THROW
;

954 
	$£tu£rshñl
 (Ë
__THROW
;

960 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 
	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 
	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 
	`gëho°id
 ();

997 
	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 
	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 
fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/usb.h

25 #i‚de‡
__USB_H__


26 
	#__USB_H__


	)

28 
	~<uni°d.h
>

29 
	~<°dlib.h
>

30 
	~<limôs.h
>

32 
	~<dúít.h
>

44 
	#USB_CLASS_PER_INTERFACE
 0

	)

45 
	#USB_CLASS_AUDIO
 1

	)

46 
	#USB_CLASS_COMM
 2

	)

47 
	#USB_CLASS_HID
 3

	)

48 
	#USB_CLASS_PRINTER
 7

	)

49 
	#USB_CLASS_PTP
 6

	)

50 
	#USB_CLASS_MASS_STORAGE
 8

	)

51 
	#USB_CLASS_HUB
 9

	)

52 
	#USB_CLASS_DATA
 10

	)

53 
	#USB_CLASS_VENDOR_SPEC
 0xff

	)

58 
	#USB_DT_DEVICE
 0x01

	)

59 
	#USB_DT_CONFIG
 0x02

	)

60 
	#USB_DT_STRING
 0x03

	)

61 
	#USB_DT_INTERFACE
 0x04

	)

62 
	#USB_DT_ENDPOINT
 0x05

	)

64 
	#USB_DT_HID
 0x21

	)

65 
	#USB_DT_REPORT
 0x22

	)

66 
	#USB_DT_PHYSICAL
 0x23

	)

67 
	#USB_DT_HUB
 0x29

	)

72 
	#USB_DT_DEVICE_SIZE
 18

	)

73 
	#USB_DT_CONFIG_SIZE
 9

	)

74 
	#USB_DT_INTERFACE_SIZE
 9

	)

75 
	#USB_DT_ENDPOINT_SIZE
 7

	)

76 
	#USB_DT_ENDPOINT_AUDIO_SIZE
 9

	)

77 
	#USB_DT_HUB_NONVAR_SIZE
 7

	)

80 
	susb_des¸ùt‹_hódî
 {

81 
u_öt8_t
 
	mbLígth
;

82 
u_öt8_t
 
	mbDes¸ùt‹Ty≥
;

86 
	susb_°rög_des¸ùt‹
 {

87 
u_öt8_t
 
	mbLígth
;

88 
u_öt8_t
 
	mbDes¸ùt‹Ty≥
;

89 
u_öt16_t
 
	mwD©a
[1];

93 
	susb_hid_des¸ùt‹
 {

94 
u_öt8_t
 
	mbLígth
;

95 
u_öt8_t
 
	mbDes¸ùt‹Ty≥
;

96 
u_öt16_t
 
	mbcdHID
;

97 
u_öt8_t
 
	mbCou¡ryCode
;

98 
u_öt8_t
 
	mbNumDes¸ùt‹s
;

105 
	#USB_MAXENDPOINTS
 32

	)

106 
	susb_ídpoöt_des¸ùt‹
 {

107 
u_öt8_t
 
	mbLígth
;

108 
u_öt8_t
 
	mbDes¸ùt‹Ty≥
;

109 
u_öt8_t
 
	mbEndpoötAddªss
;

110 
u_öt8_t
 
	mbmAâribuãs
;

111 
u_öt16_t
 
	mwMaxPackëSize
;

112 
u_öt8_t
 
	mbI¡îvÆ
;

113 
u_öt8_t
 
	mbRe‰esh
;

114 
u_öt8_t
 
	mbSynchAddªss
;

116 *
	mexåa
;

117 
	mexåÆí
;

120 
	#USB_ENDPOINT_ADDRESS_MASK
 0x0‡

	)

121 
	#USB_ENDPOINT_DIR_MASK
 0x80

	)

123 
	#USB_ENDPOINT_TYPE_MASK
 0x03

	)

124 
	#USB_ENDPOINT_TYPE_CONTROL
 0

	)

125 
	#USB_ENDPOINT_TYPE_ISOCHRONOUS
 1

	)

126 
	#USB_ENDPOINT_TYPE_BULK
 2

	)

127 
	#USB_ENDPOINT_TYPE_INTERRUPT
 3

	)

130 
	#USB_MAXINTERFACES
 32

	)

131 
	susb_öãrÁ˚_des¸ùt‹
 {

132 
u_öt8_t
 
	mbLígth
;

133 
u_öt8_t
 
	mbDes¸ùt‹Ty≥
;

134 
u_öt8_t
 
	mbI¡îÁ˚Numbî
;

135 
u_öt8_t
 
	mbA…î«ãSëtög
;

136 
u_öt8_t
 
	mbNumEndpoöts
;

137 
u_öt8_t
 
	mbI¡îÁ˚Cœss
;

138 
u_öt8_t
 
	mbI¡îÁ˚SubCœss
;

139 
u_öt8_t
 
	mbI¡îÁ˚PrŸocﬁ
;

140 
u_öt8_t
 
	miI¡îÁ˚
;

142 
usb_ídpoöt_des¸ùt‹
 *
	mídpoöt
;

144 *
	mexåa
;

145 
	mexåÆí
;

148 
	#USB_MAXALTSETTING
 128

	)

149 
	susb_öãrÁ˚
 {

150 
usb_öãrÁ˚_des¸ùt‹
 *
	mÆt£âög
;

152 
	mnum_Æt£âög
;

156 
	#USB_MAXCONFIG
 8

	)

157 
	susb_c⁄fig_des¸ùt‹
 {

158 
u_öt8_t
 
	mbLígth
;

159 
u_öt8_t
 
	mbDes¸ùt‹Ty≥
;

160 
u_öt16_t
 
	mwTŸÆLígth
;

161 
u_öt8_t
 
	mbNumI¡îÁ˚s
;

162 
u_öt8_t
 
	mbC⁄figuøti⁄VÆue
;

163 
u_öt8_t
 
	miC⁄figuøti⁄
;

164 
u_öt8_t
 
	mbmAâribuãs
;

165 
u_öt8_t
 
	mMaxPowî
;

167 
usb_öãrÁ˚
 *
	möãrÁ˚
;

169 *
	mexåa
;

170 
	mexåÆí
;

174 
	susb_devi˚_des¸ùt‹
 {

175 
u_öt8_t
 
	mbLígth
;

176 
u_öt8_t
 
	mbDes¸ùt‹Ty≥
;

177 
u_öt16_t
 
	mbcdUSB
;

178 
u_öt8_t
 
	mbDevi˚Cœss
;

179 
u_öt8_t
 
	mbDevi˚SubCœss
;

180 
u_öt8_t
 
	mbDevi˚PrŸocﬁ
;

181 
u_öt8_t
 
	mbMaxPackëSize0
;

182 
u_öt16_t
 
	midVíd‹
;

183 
u_öt16_t
 
	midProdu˘
;

184 
u_öt16_t
 
	mbcdDevi˚
;

185 
u_öt8_t
 
	miM™uÁ˘uªr
;

186 
u_öt8_t
 
	miProdu˘
;

187 
u_öt8_t
 
	miSîülNumbî
;

188 
u_öt8_t
 
	mbNumC⁄figuøti⁄s
;

191 
	susb_˘æ_£tup
 {

192 
u_öt8_t
 
	mbReque°Ty≥
;

193 
u_öt8_t
 
	mbReque°
;

194 
u_öt16_t
 
	mwVÆue
;

195 
u_öt16_t
 
	mwIndex
;

196 
u_öt16_t
 
	mwLígth
;

202 
	#USB_REQ_GET_STATUS
 0x00

	)

203 
	#USB_REQ_CLEAR_FEATURE
 0x01

	)

205 
	#USB_REQ_SET_FEATURE
 0x03

	)

207 
	#USB_REQ_SET_ADDRESS
 0x05

	)

208 
	#USB_REQ_GET_DESCRIPTOR
 0x06

	)

209 
	#USB_REQ_SET_DESCRIPTOR
 0x07

	)

210 
	#USB_REQ_GET_CONFIGURATION
 0x08

	)

211 
	#USB_REQ_SET_CONFIGURATION
 0x09

	)

212 
	#USB_REQ_GET_INTERFACE
 0x0A

	)

213 
	#USB_REQ_SET_INTERFACE
 0x0B

	)

214 
	#USB_REQ_SYNCH_FRAME
 0x0C

	)

216 
	#USB_TYPE_STANDARD
 (0x00 << 5)

	)

217 
	#USB_TYPE_CLASS
 (0x01 << 5)

	)

218 
	#USB_TYPE_VENDOR
 (0x02 << 5)

	)

219 
	#USB_TYPE_RESERVED
 (0x03 << 5)

	)

221 
	#USB_RECIP_DEVICE
 0x00

	)

222 
	#USB_RECIP_INTERFACE
 0x01

	)

223 
	#USB_RECIP_ENDPOINT
 0x02

	)

224 
	#USB_RECIP_OTHER
 0x03

	)

230 
	#USB_ENDPOINT_IN
 0x80

	)

231 
	#USB_ENDPOINT_OUT
 0x00

	)

234 
	#USB_ERROR_BEGIN
 500000

	)

237 
	gusb_devi˚
;

238 
	gusb_bus
;

245 
	susb_devi˚
 {

246 
usb_devi˚
 *
	m√xt
, *
	m¥ev
;

248 
	mfûíame
[
PATH_MAX
 + 1];

250 
usb_bus
 *
	mbus
;

252 
usb_devi˚_des¸ùt‹
 
	mdes¸ùt‹
;

253 
usb_c⁄fig_des¸ùt‹
 *
	mc⁄fig
;

255 *
	mdev
;

257 
u_öt8_t
 
	mdevnum
;

259 
	mnum_chûdªn
;

260 
usb_devi˚
 **
	mchûdªn
;

263 
	susb_bus
 {

264 
usb_bus
 *
	m√xt
, *
	m¥ev
;

266 
	mdú«me
[
PATH_MAX
 + 1];

268 
usb_devi˚
 *
	mdevi˚s
;

269 
u_öt32_t
 
	mloˇti⁄
;

271 
usb_devi˚
 *
	mroŸ_dev
;

274 
	gusb_dev_h™dÀ
;

275 
usb_dev_h™dÀ
 
	tusb_dev_h™dÀ
;

278 
usb_bus
 *
usb_bus£s
;

280 #ifde‡
__˝lu•lus


287 
usb_dev_h™dÀ
 *
usb_›í
(
usb_devi˚
 *
dev
);

288 
usb_˛o£
(
usb_dev_h™dÀ
 *
dev
);

289 
usb_gë_°rög
(
usb_dev_h™dÀ
 *
dev
, 
ödex
, 
œngid
, *
buf
,

290 
size_t
 
buÊí
);

291 
usb_gë_°rög_sim∂e
(
usb_dev_h™dÀ
 *
dev
, 
ödex
, *
buf
,

292 
size_t
 
buÊí
);

295 
usb_gë_des¸ùt‹_by_ídpoöt
(
usb_dev_h™dÀ
 *
udev
, 
ï
,

296 
ty≥
, 
ödex
, *
buf
, 
size
);

297 
usb_gë_des¸ùt‹
(
usb_dev_h™dÀ
 *
udev
, 
ty≥
,

298 
ödex
, *
buf
, 
size
);

301 
usb_bulk_wrôe
(
usb_dev_h™dÀ
 *
dev
, 
ï
, *
byãs
, 
size
,

302 
timeout
);

303 
usb_bulk_ªad
(
usb_dev_h™dÀ
 *
dev
, 
ï
, *
byãs
, 
size
,

304 
timeout
);

305 
usb_öãºu±_wrôe
(
usb_dev_h™dÀ
 *
dev
, 
ï
, *
byãs
, 
size
,

306 
timeout
);

307 
usb_öãºu±_ªad
(
usb_dev_h™dÀ
 *
dev
, 
ï
, *
byãs
, 
size
,

308 
timeout
);

309 
usb_c⁄åﬁ_msg
(
usb_dev_h™dÀ
 *
dev
, 
ªque°ty≥
, 
ªque°
,

310 
vÆue
, 
ödex
, *
byãs
, 
size
, 
timeout
);

311 
usb_£t_c⁄figuøti⁄
(
usb_dev_h™dÀ
 *
dev
, 
c⁄figuøti⁄
);

312 
usb_˛aim_öãrÁ˚
(
usb_dev_h™dÀ
 *
dev
, 
öãrÁ˚
);

313 
usb_ªÀa£_öãrÁ˚
(
usb_dev_h™dÀ
 *
dev
, 
öãrÁ˚
);

314 
usb_£t_ÆtöãrÁ˚
(
usb_dev_h™dÀ
 *
dev
, 
Æã∫©e
);

315 
usb_ª£ãp
(
usb_dev_h™dÀ
 *
dev
, 
ï
);

316 
usb_˛ór_hÆt
(
usb_dev_h™dÀ
 *
dev
, 
ï
);

317 
usb_ª£t
(
usb_dev_h™dÀ
 *
dev
);

319 
	#LIBUSB_HAS_GET_DRIVER_NP
 1

	)

320 
usb_gë_drivî_≈
(
usb_dev_h™dÀ
 *
dev
, 
öãrÁ˚
, *
«me
,

321 
«mñí
);

322 
	#LIBUSB_HAS_DETACH_KERNEL_DRIVER_NP
 1

	)

323 
usb_dëach_kî√l_drivî_≈
(
usb_dev_h™dÀ
 *
dev
, 
öãrÁ˚
);

325 *
usb_°ªº‹
();

327 
usb_öô
();

328 
usb_£t_debug
(
Àvñ
);

329 
usb_föd_bus£s
();

330 
usb_föd_devi˚s
();

331 
usb_devi˚
 *usb_devi˚(
usb_dev_h™dÀ
 *
dev
);

332 
usb_bus
 *
usb_gë_bus£s
();

334 #ifde‡
__˝lu•lus


	@answer.h

12 sig√d 
	g™swî
[] = {

	@ring10.h

12 sig√d 
	grög10
[] = {

	@xpmr/xpmr.c

53 
	~<°dio.h
>

54 
	~<˘y≥.h
>

55 
	~<m©h.h
>

56 
	~<°rög.h
>

57 
	~<uni°d.h
>

58 
	~<sys/io˘l.h
>

59 
	~<sys/io.h
>

60 
	~<f˙é.h
>

61 
	~<sys/time.h
>

62 
	~<°dlib.h
>

63 
	~<î∫o.h
>

65 
	~"xpmr.h
"

66 
	~"xpmr_c€f.h
"

67 
	~"söëabx.h
"

69 
i16
 
	gpmrCh™Index
=0;

72 #i‡(
DTX_PROG
 =1Ë|| 
XPMR_PPTP
 == 1

73 
	gµdrvdev
=0;

79 
	$°ø˚
(
i16
 
poöt
, 
t_sdbg
 *
sdbg
, i16 
ödex
, i16 
vÆue
)

82 if(!
sdbg
->
mode
 || sdbg->
poöt
[point]<0){

85 
sdbg
->
buf„r
[(
ödex
*
XPMR_DEBUG_CHANS
Ë+ sdbg->
poöt
[poöt]] = 
vÆue
;

87 
	}
}

91 
	$°ø˚2
(
t_sdbg
 *
sdbg
)

93 
i
;

94 
i
=0;i<
XPMR_DEBUG_CHANS
;i++)

96 if(
sdbg
->
sour˚
[
i
])

98 
ii
;

99 
ii
=0;ii<
SAMPLES_PER_BLOCK
;ii++)

101 
sdbg
->
buf„r
[
ii
*
XPMR_DEBUG_CHANS
 + 
i
] = sdbg->
sour˚
[i][ii];

105 
	}
}

106 #i‡
XPMR_PPTP
 == 1

110 
	$µç_öô
 ()

112 i‡(
µdrvdev
 == 0)

113 
µdrvdev
 = 
	`›í
("/dev/ppdrv_device", 0);

115 i‡(
µdrvdev
 < 0)

117 
	`a°_log
(
LOG_ERROR
, "›í /dev/µdrv_µdrvdevÑëu∫ed %i\n",
µdrvdev
);

118 
	`exô
(0);

120 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINMODE_OUT
, 
DTX_CLK
 | 
DTX_DATA
 | 
DTX_ENABLE
 | 
DTX_TXPWR
 | 
DTX_TX
 | 
DTX_TP1
 | 
DTX_TP2
);

121 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINCLEAR
, 
DTX_CLK
 | 
DTX_DATA
 | 
DTX_ENABLE
 | 
DTX_TXPWR
 | 
DTX_TX
 | 
DTX_TP1
 | 
DTX_TP2
);

122 
	}
}

125 
	$µç_wrôe
(
i16
 
bô
, i16 
°©e
)

127 if(
bô
==0)

129 if(
°©e
)
	`io˘l
(
µdrvdev
,
PPDRV_IOC_PINSET
,
DTX_TP1
);

130 
	`io˘l
(
µdrvdev
,
PPDRV_IOC_PINCLEAR
,
DTX_TP1
);

134 if(
°©e
)
	`io˘l
(
µdrvdev
,
PPDRV_IOC_PINSET
,
DTX_TP2
);

135 
	`io˘l
(
µdrvdev
,
PPDRV_IOC_PINCLEAR
,
DTX_TP2
);

137 
	}
}

146 
i16
 
	$°rög_∑r£
(*
§c
, **
de°
, ***
±rs
)

148 *
p
,*
pd
;

149 *
±°r
[1000];

150 
i16
 
i
, 
¶í
, 
numsub
;

152 
	`TRACEJ
(2,("°rög_∑r£(%s)\n",
§c
));

154 
¶í
=
	`°æí
(
§c
);

155 
	`TRACEJ
(2,(" sour˚Üí = %i\n",
¶í
));

157 
pd
=*
de°
;

158 if(
pd
Ë
	`‰ì
(pd);

159 
pd
=
	`ˇŒoc
(
¶í
+1,1);

160 
	`mem˝y
(
pd
,
§c
,
¶í
);

161 *
de°
=
pd
;

163 
p
=0;

164 
numsub
=0;

165 
i
=0;i<
¶í
+1;i++)

167 
	`TRACEJ
(5,("Öd[%i] = %c\n",
i
,
pd
[i]));

169 if–
p
==0 && 
pd
[
i
]!=',' &&Öd[i]!=' ' )

171 
p
=&(
pd
[
i
]);

173 if(
pd
[
i
]==',' ||Öd[i]==0 )

175 
±°r
[
numsub
]=
p
;

176 
pd
[
i
]=0;

177 
p
=0;

178 
numsub
++;

182 
i
=0;i<
numsub
;i++)

184 
	`TRACEJ
(5,("Öt°r[%i] = %∞%s\n",
i
,
±°r
[i],ptstr[i]));

187 if(*
±rs
)
	`‰ì
(*ptrs);

188 *
±rs
=
	`ˇŒoc
(
numsub
,4);

189 
i
=0;i<
numsub
;i++)

191 (*
±rs
)[
i
]=
±°r
[i];

192 
	`TRACEJ
(5,(" %ò%s\n",
i
,(*
±rs
)[i]));

194 
	`TRACEJ
(5,("°rög_∑r£()=%i\n\n",
numsub
));

196  
numsub
;

197 
	}
}

204 
i16
 
	$code_°rög_∑r£
(
t_pmr_ch™
 *
pCh™
)

206 
i16
 
i
, 
ii
, 
hô
, 
ti
;

207 *
p
;

208 
f
, 
max˘cs°x‰eq
;

210 
t_pmr_•s
 *
pSps
;

211 
i16
 
max˘cssödex
;

213 
	`TRACEF
(1,("code_string_parse(%i)\n",0));

214 
	`TRACEF
(1,("pCh™->pRxCodeSr¯%†\n",
pCh™
->
pRxCodeSrc
));

215 
	`TRACEF
(1,("pCh™->pTxCodeSr¯%†\n",
pCh™
->
pTxCodeSrc
));

216 
	`TRACEF
(1,("pCh™->pTxCodeDeÁu… %†\n",
pCh™
->
pTxCodeDeÁu…
));

220 
max˘cssödex
=
CTCSS_NULL
;

221 
max˘cs°x‰eq
=
CTCSS_NULL
;

222 
pCh™
->
tx˘cssdeÁu…_ödex
=
CTCSS_NULL
;

223 
pCh™
->
tx˘cssdeÁu…_vÆue
=
CTCSS_NULL
;

225 
pCh™
->
b
.
˘cssRxE«bÀ
ıCh™->b.
˘cssTxE«bÀ
=0;

226 
pCh™
->
b
.
dcsRxE«bÀ
ıCh™->b.
dcsTxE«bÀ
=0;

227 
pCh™
->
b
.
lmrRxE«bÀ
ıCh™->b.
lmrTxE«bÀ
=0;

228 
pCh™
->
b
.
mdcRxE«bÀ
ıCh™->b.
mdcTxE«bÀ
=0;

229 
pCh™
->
b
.
d°RxE«bÀ
ıCh™->b.
d°TxE«bÀ
=0;

230 
pCh™
->
b
.
p25RxE«bÀ
ıCh™->b.
p25TxE«bÀ
=0;

232 if(
pCh™
->
•sLsdGí
){

233 
pCh™
->
•sLsdGí
->
íabÀd
=0;

234 
pCh™
->
•sLsdGí
->
°©e
=0;

237 
	`TRACEF
(1,("code_string_parse(%i) 05\n",0));

239 
pCh™
->
numrxcodes
 = 
	`°rög_∑r£
–pCh™->
pRxCodeSrc
, &’Ch™->
pRxCodeSå
), &’Ch™->
pRxCode
));

240 
pCh™
->
numtxcodes
 = 
	`°rög_∑r£
–pCh™->
pTxCodeSrc
, &’Ch™->
pTxCodeSå
), &’Ch™->
pTxCode
));

242 if(
pCh™
->
numrxcodes
!ıCh™->
numtxcodes
)
	`¥ötf
("ERROR:Çumrxcodes !=Çumtxcodes \n");

244 
pCh™
->
rxCtcss
->
íabÀd
=0;

245 
pCh™
->
rxCtcss
->
gaö
=1*
M_Q8
;

246 
pCh™
->
rxCtcss
->
limô
=8192;

247 
pCh™
->
rxCtcss
->
öput
ıCh™->
pRxLsdLimô
;

248 
pCh™
->
rxCtcss
->
decode
=
CTCSS_NULL
;

250 
pCh™
->
rxCtcss
->
ã°Index
=0;

251 if(!
pCh™
->
rxCtcss
->
ã°Index
)pChan->rxCtcss->testIndex=3;

253 
pCh™
->
rx˘css‰eq
[0]=0;

255 
i
=0;i<
CTCSS_NUM_CODES
;i++)

257 
pCh™
->
rx˘css
[
i
]=0;

258 
pCh™
->
tx˘css
[
i
]=0;

259 
pCh™
->
rxCtcssM≠
[
i
]=
CTCSS_NULL
;

262 
	`TRACEF
(1,("code_string_parse(%i) 10\n",0));

264 #ifde‡
XPMRX_H


265 
	`xpmrx
(
pCh™
,
XXO_LSDCODEPARSE
);

269 
i
=0;i<
pCh™
->
numrxcodes
;i++)

271 
i16
 
ii
,
ri
,
ti
;

272 
f
;

274 
p
=
pCh™
->
pSå
ıCh™->
pRxCode
[
i
];

276 #ifde‡
HAVE_XPMRX


277 if(!
	`xpmrx
(
pCh™
,
XXO_LSDCODEPARSE_1
))

280 
	`ssˇnf
(
p
,"%f",&
f
);

281 
ri
=
	`CtcssFªqIndex
(
f
);

282 if(
ri
>
max˘cssödex
)maxctcssindex=ri;

284 
	`ssˇnf
(
pCh™
->
pTxCode
[
i
],"%f",&
f
);

285 
ti
=
	`CtcssFªqIndex
(
f
);

286 if(
f
>
max˘cs°x‰eq
)maxctcsstxfreq=f;

288 if(
ri
>
CTCSS_NULL
 && 
ti
>CTCSS_NULL)

290 
pCh™
->
b
.
˘cssRxE«bÀ
ıCh™->b.
˘cssTxE«bÀ
=1;

291 
pCh™
->
rxCtcssM≠
[
ri
]=
ti
;

292 
pCh™
->
numrx˘css‰eqs
++;

293 
	`TRACEF
(1,("pCh™->rx˘css[%i]=%†ÖCh™->rxCtcssM≠[%i]=%i\n",
i
,
pCh™
->
rx˘css
[i],
ri
,
ti
));

295 if(
ri
>
CTCSS_NULL
 && 
f
==0)

297 
pCh™
->
b
.
˘cssRxE«bÀ
=1;

298 
pCh™
->
rxCtcssM≠
[
ri
]=
CTCSS_RXONLY
;

299 
pCh™
->
numrx˘css‰eqs
++;

300 
	`TRACEF
(1,("pCh™->rx˘css[%i]=%†ÖCh™->rxCtcssM≠[%i]=%òRXONLY\n",
i
,
pCh™
->
rx˘css
[i],
ri
,
ti
));

304 
pCh™
->
numrx˘css‰eqs
=0;

305 
ii
=0;ii<
CTCSS_NUM_CODES
;ii++Ë
pCh™
->
rxCtcssM≠
[ii]=
CTCSS_NULL
;

306 
	`TRACEF
(1,("WARNING: InvÆid Ch™√»codêdëe˘edánd ign‹ed. %ò%†%†\n",
i
,
pCh™
->
pRxCode
[i],pCh™->
pTxCode
[i]));

311 
	`TRACEF
(1,("code_°rög_∑r£(ËCTCSS Inô Såu˘ %ò %i\n",
pCh™
->
b
.
˘cssRxE«bÀ
,pCh™->b.
˘cssTxE«bÀ
));

312 if(
pCh™
->
b
.
˘cssRxE«bÀ
)

314 
pCh™
->
rxHpfE«bÀ
=1;

315 
pCh™
->
•sRxLsdNrz
->
íabÀd
ıCh™->
rxCíãrSli˚rE«bÀ
=1;

316 
pCh™
->
rxCtcssDecodeE«bÀ
=1;

317 
pCh™
->
rxCtcss
->
íabÀd
=1;

321 
pCh™
->
rxHpfE«bÀ
=1;

322 
pCh™
->
•sRxLsdNrz
->
íabÀd
ıCh™->
rxCíãrSli˚rE«bÀ
=0;

323 
pCh™
->
rxCtcssDecodeE«bÀ
=0;

324 
pCh™
->
rxCtcss
->
íabÀd
=0;

327 
	`TRACEF
(1,("code_string_parse() CTCSS Init Decoders \n"));

328 
i
=0;i<
CTCSS_NUM_CODES
;i++)

330 
t_tdë
 *
±dë
;

331 
±dë
=&(
pCh™
->
rxCtcss
->
tdë
[
i
]);

332 
±dë
->
cou¡îFa˘‹
=
c€f_˘css_div
[
i
];

333 
±dë
->
°©e
=1;

334 
±dë
->
£çt
=(
M_Q15
*0.041);

335 
±dë
->
hy°
 =(
M_Q15
*0.0130);

336 
±dë
->
böFa˘‹
=(
M_Q15
*0.135);

337 
±dë
->
fudgeFa˘‹
=8;

342 
	`TRACEF
(1,("code_°rög_∑r£(ËDeÁu… Tx Codê%†\n",
pCh™
->
pTxCodeDeÁu…
));

343 
pCh™
->
txcodedeÁu…smode
=
SMODE_NULL
;

344 
p
=
pCh™
->
pSå
ıCh™->
pTxCodeDeÁu…
;

346 #ifde‡
HAVE_XPMRX


347 if(!
	`lsd_code_∑r£
(
pCh™
,3))

350 
	`ssˇnf
(
p
,"%f",&
f
);

351 
ti
=
	`CtcssFªqIndex
(
f
);

352 if(
f
>
max˘cs°x‰eq
)maxctcsstxfreq=f;

354 if(
ti
>
CTCSS_NULL
)

356 
pCh™
->
b
.
˘cssTxE«bÀ
=1;

357 
pCh™
->
tx˘cssdeÁu…_ödex
=
ti
;

358 
pCh™
->
tx˘cssdeÁu…_vÆue
=
f
;

359 
pCh™
->
•sSigGí0
->
‰eq
=
f
*10;

360 
pCh™
->
txcodedeÁu…smode
=
SMODE_CTCSS
;

361 
	`TRACEF
(1,("code_°rög_∑r£(ËTx DeÁu… CTCSS = %†%ò%f\n",
p
,
ti
,
f
));

367 
	`TRACEF
(1,("code_string_parse() Filter Config \n"));

368 
pSps
=
pCh™
->
•sTxLsdLpf
;

369 if(
pSps
->
x
)
	`‰ì
(pSps->x);

370 if(
max˘cs°x‰eq
>203.5)

372 
pSps
->
nc€f
=
èps_fú_Õf_250_9_66
;

373 
pSps
->
size_c€f
=2;

374 
pSps
->
c€f
=(*)
c€f_fú_Õf_250_9_66
;

375 
pSps
->
nx
=
èps_fú_Õf_250_9_66
;

376 
pSps
->
size_x
=2;

377 
pSps
->
x
=(*)(
	`ˇŒoc
’Sps->
nx
,pSps->
size_x
));

378 
pSps
->
ˇlcAdju°
=
gaö_fú_Õf_250_9_66
;

379 
	`TRACEF
(1,("code_string_parse() Tx Filter Freq High\n"));

383 
pSps
->
nc€f
=
èps_fú_Õf_215_9_88
;

384 
pSps
->
size_c€f
=2;

385 
pSps
->
c€f
=(*)
c€f_fú_Õf_215_9_88
;

386 
pSps
->
nx
=
èps_fú_Õf_215_9_88
;

387 
pSps
->
size_x
=2;

388 
pSps
->
x
=(*)(
	`ˇŒoc
’Sps->
nx
,pSps->
size_x
));

389 
pSps
->
ˇlcAdju°
=
gaö_fú_Õf_215_9_88
;

390 
	`TRACEF
(1,("code_string_parse() Tx Filter Freq Low\n"));

394 
hô
=0;

395 
ii

	`CtcssFªqIndex
(203.5);

396 
i
=
ii
;i<
CTCSS_NUM_CODES
;i++)

398 if(
pCh™
->
rxCtcssM≠
[
i
]>
CTCSS_NULL
)
hô
=1;

401 
pSps
=
pCh™
->
•sRxLsd
;

402 if(
pSps
->
x
)
	`‰ì
(pSps->x);

403 if(
hô
)

405 
pSps
->
nc€f
=
èps_fú_Õf_250_9_66
;

406 
pSps
->
size_c€f
=2;

407 
pSps
->
c€f
=(*)
c€f_fú_Õf_250_9_66
;

408 
pSps
->
nx
=
èps_fú_Õf_250_9_66
;

409 
pSps
->
size_x
=2;

410 
pSps
->
x
=(*)(
	`ˇŒoc
’Sps->
nx
,pSps->
size_x
));

411 
pSps
->
ˇlcAdju°
=
gaö_fú_Õf_250_9_66
;

412 
	`TRACEF
(1,("code_string_parse() Rx Filter Freq High\n"));

416 
pSps
->
nc€f
=
èps_fú_Õf_215_9_88
;

417 
pSps
->
size_c€f
=2;

418 
pSps
->
c€f
=(*)
c€f_fú_Õf_215_9_88
;

419 
pSps
->
nx
=
èps_fú_Õf_215_9_88
;

420 
pSps
->
size_x
=2;

421 
pSps
->
x
=(*)(
	`ˇŒoc
’Sps->
nx
,pSps->
size_x
));

422 
pSps
->
ˇlcAdju°
=
gaö_fú_Õf_215_9_88
;

423 
	`TRACEF
(1,("code_string_parse() Rx Filter Freq Low\n"));

426 if(
pCh™
->
b
.
˘cssRxE«bÀ
 ||ÖCh™->b.
dcsRxE«bÀ
 ||ÖCh™->b.
lmrRxE«bÀ
)

428 
pCh™
->
rxCíãrSli˚rE«bÀ
=1;

429 
pSps
->
íabÀd
=1;

433 
pCh™
->
rxCíãrSli˚rE«bÀ
=0;

434 
pSps
->
íabÀd
=0;

437 #i‡
XPMR_DEBUG0
 == 1

438 
	`TRACEF
(2,("code_°rög_∑r£(Ë˘cssRxE«bÀ = %ò\n",
pCh™
->
b
.
˘cssRxE«bÀ
));

439 
	`TRACEF
(2,(" ctcssTxE«bÀ = %ò\n",
pCh™
->
b
.
˘cssTxE«bÀ
));

440 
	`TRACEF
(2,(" dcsRxE«bÀ = %ò\n",
pCh™
->
b
.
dcsRxE«bÀ
));

441 
	`TRACEF
(2,("ÜmrRxE«bÀ = %ò\n",
pCh™
->
b
.
lmrRxE«bÀ
));

442 
	`TRACEF
(2,("ÅxcodedeÁu…smodê%ò\n",
pCh™
->
txcodedeÁu…smode
));

443 
i
=0;i<
CTCSS_NUM_CODES
;i++)

445 
	`TRACEF
(2,("rxCtcssM≠[%i] = %ò\n",
i
,
pCh™
->
rxCtcssM≠
[i]));

449 #ifde‡
HAVE_XPMRX


450 
	`lsd_code_∑r£
(
pCh™
,5);

453 
	`TRACEF
(1,("code_string_parse(%i)Énd\n",0));

456 
	}
}

460 
i16
 
	$CtcssFªqIndex
(
‰eq
)

462 
i16
 
i
,
hô
=
CTCSS_NULL
;

464 
i
=0;i<
CTCSS_NUM_CODES
;i++){

465 if(
‰eq
==
‰eq_˘css
[
i
])
hô
=i;

467  
hô
;

468 
	}
}

470 #i‚de‡
HAVE_XPMRX_2


477 
i16
 
	$pmr_rx_‰⁄ãnd
(
t_pmr_•s
 *
mySps
)

479 
	#DCgaöBpfNoi£
 65536

	)

481 
i16
 
ßm∂es
,
nx
,
iOuçut
, *
öput
, *
ouçut
, *
nouçut
;

482 
i16
 *
x
, *
c€f
;

483 
i16
 
decim©‹
, 
decim©e
, 
doNoi£
;

484 
i32
 
i
, 
«ccum
, 
ouçutGaö
, 
ˇlcAdju°
;

485 
i64
 
y
, 
≈wr
;

487 
	`TRACEJ
(5,("pmr_rx_frontend()\n"));

489 if(!
mySps
->
íabÀd
)(1);

491 
decim©‹
 = 
mySps
->decimator;

492 
decim©e
 = 
mySps
->decimate;

494 
öput
 = 
mySps
->
sour˚
;

495 
ouçut
 = 
mySps
->
sök
;

496 
nouçut
 = 
mySps
->
∑ª¡Ch™
->
pRxNoi£
;

498 
nx
 = 
mySps
->nx;

499 
c€f
 = 
mySps
->coef;

501 
ˇlcAdju°
 = 
mySps
->calcAdjust;

502 
ouçutGaö
 = 
mySps
->outputGain;

504 
ßm∂es
=
mySps
->
nSam∂es
*
decim©e
;

505 
x
=
mySps
->x;

506 
iOuçut
=0;

507 
≈wr
=0;

509 if(
mySps
->
∑ª¡Ch™
->
rxCdTy≥
!=
CD_XPMR_VOX
)
doNoi£
=1;

510 
doNoi£
=0;

512 
i
=0;i<
ßm∂es
;i++)

514 
i16
 
n
;

518 
n
=
nx
-1;Ç>0;Ç--)

519 
x
[
n
] = x[n-1];

521 
	`memmove
(
x
+1,x,
nx
-1);

523 
x
[0] = 
öput
[
i
*2];

525 #if 
XPMR_TRACE_FRONTEND
 == 1

526 
y
=0;

527 
n
=0;Ç<
nx
;Ç++)

528 
y
 +
c€f_fú_Õf_3K_1
[
n
] * 
x
[n];

530 
y
=((y/
ˇlcAdju°
)*
ouçutGaö
)/
M_Q8
;

531 
öput
[
i
*2]=
y
;

534 if(
doNoi£
)

537 
«ccum
=0;

538 if(
mySps
->
∑ª¡Ch™
->
rxNoi£FûTy≥
==0)

540 
n
=0;Ç<
nx
;Ç++)

541 
«ccum
 +
c€f_fú_bpf_noi£_1
[
n
] * 
x
[n];

542 
«ccum
 /
DCgaöBpfNoi£
;

546 
n
=0;Ç<
èps_fú_bpf_noi£_2
;Ç++)

547 
«ccum
 +
c€f_fú_bpf_noi£_2
[
n
] * 
x
[n];

548 
«ccum
 /
gaö_fú_bpf_noi£_2
;

550 #if 
XPMR_TRACE_FRONTEND
 == 1

551 
öput
[
i
*2+1]=
«ccum
;

553 
≈wr
+=
«ccum
*naccum;

557 --
decim©‹
;

559 if(
decim©‹
<=0)

561 
decim©‹
=
decim©e
;

563 
y
=0;

564 
n
=0;Ç<
nx
;Ç++)

565 
y
 +
c€f_fú_Õf_3K_1
[
n
] * 
x
[n];

567 
y
=((y/
ˇlcAdju°
)*
ouçutGaö
)/
M_Q8
;

569 #if 
XPMR_TRACE_OVFLW
 == 1

570 if(
y
>32767)

572 
y
=32767;

573 
	`¥ötf
("pmr_rx_frontend() OVRFLW \n" );

575 if(
y
<-32767)

577 
y
=-32767;

578 
	`¥ötf
("pmr_rx_frontend() UNDFLW \n" );

581 if(
y
>32767)y=32767;

582 if(
y
<-32767)y=-32767;

584 
ouçut
[
iOuçut
++]=
y
;

589 if(
doNoi£
)

591 
≈wr
=
	`sqπ
(npwr)/16;

594 if(
mySps
->
bœnkög
)mySps->blanking--;

595 
mySps
->
bœnkög
=0;

596 if–!
mySps
->
compOut
 &&

597 –(
≈wr
>(
mySps
->
£çt
+mySps->
hy°
)) ||

598 –(
mySps
->
≠ók
<(mySps->
£çt
/4)Ë&& (
≈wr
>mySps->setpt) )

602 if(!
mySps
->
compOut
)

604 
mySps
->
bœnkög
=2;

605 
mySps
->
compOut
=1;

608 i‡((
≈wr
<
mySps
->
£çt
)&&(!mySps->
bœnkög
))

610 
mySps
->
compOut
=0;

613 #if 
XPMR_DEBUG0
 == 1

614 if(
mySps
->
∑ª¡Ch™
->
åa˚ty≥
)

616 
i
=0;i<
mySps
->
nSam∂es
;i++)

618 
nouçut
[
i
] = 
≈wr
;

623 ((
t_pmr_ch™
 *)(
mySps
->
∑ª¡Ch™
))->
rxRssi
=mySps->
≠ók
=
≈wr
;

627 
	}
}

633 
i16
 
	$pmr_gp_fú
(
t_pmr_•s
 *
mySps
)

635 
i32
 
nßm∂es
,
öputGaö
,
ouçutGaö
,
ˇlcAdju°
;

636 
i16
 *
öput
, *
ouçut
;

637 
i16
 *
x
, *
c€f
;

638 
i32
 
i
, 
ii
;

639 
i16
 
nx
, 
hy°
, 
£çt
, 
compOut
;

640 
i16
 
amax
, 
amö
, 
≠ók
=0, 
discou¡îu
=0, 
discou¡îl
=0, 
discÁ˘‹
;

641 
i16
 
decim©‹
, 
decim©e
, 
öãΩﬁ©e
;

642 
i16
 
numCh™Out
, 
£lCh™Out
, 
mixOut
, 
m⁄oOut
;

644 
	`TRACEJ
(5,("pmr_gp_fú(Ë%ò%i\n",
mySps
->
ödex
, mySps->
íabÀd
));

646 if(!
mySps
->
íabÀd
)(1);

648 
öputGaö
 = 
mySps
->inputGain;

649 
ˇlcAdju°
 = 
mySps
->calcAdjust;

650 
ouçutGaö
 = 
mySps
->outputGain;

652 
öput
 = 
mySps
->
sour˚
;

653 
ouçut
 = 
mySps
->
sök
;

654 
x
 = 
mySps
->x;

655 
nx
 = 
mySps
->nx;

656 
c€f
 = 
mySps
->coef;

658 
decim©‹
 = 
mySps
->decimator;

659 
decim©e
 = 
mySps
->decimate;

660 
öãΩﬁ©e
 = 
mySps
->interpolate;

662 
£çt
 = 
mySps
->setpt;

663 
compOut
 = 
mySps
->compOut;

665 
öputGaö
 = 
mySps
->inputGain;

666 
ouçutGaö
 = 
mySps
->outputGain;

667 
numCh™Out
 = 
mySps
->numChanOut;

668 
£lCh™Out
 = 
mySps
->selChanOut;

669 
mixOut
 = 
mySps
->mixOut;

670 
m⁄oOut
 = 
mySps
->monoOut;

672 
amax
=
mySps
->amax;

673 
amö
=
mySps
->amin;

675 
discÁ˘‹
=
mySps
->discfactor;

676 
hy°
=
mySps
->hyst;

677 
£çt
=
mySps
->setpt;

678 
nßm∂es
=
mySps
->
nSam∂es
;

680 if(
mySps
->
›ti⁄
==3)

682 
mySps
->
›ti⁄
=0;

683 
mySps
->
íabÀd
=0;

684 
i
=0;i<
nßm∂es
;i++)

686 if(
m⁄oOut
)

687 
ouçut
[(
i
*2)]=output[(i*2)+1]=0;

689 
ouçut
[(
i
*
numCh™Out
)+
£lCh™Out
]=0;

694 
ii
=0;

695 
i
=0;i<
nßm∂es
;i++)

697 
ix
;

699 
öt64_t
 
y
=0;

701 if(
decim©e
<0)

703 
decim©‹
=
decim©e
;

706 
ix
=0;ix<
öãΩﬁ©e
;ix++)

708 
i16
 
n
;

709 
y
=0;

711 
n
=
nx
-1;Ç>0;Ç--)

712 
x
[
n
] = x[n-1];

713 
x
[0] = (
öput
[
i
]*
öputGaö
)/
M_Q8
;

716 --
decim©‹
;

717 if(
decim©‹
<=0)

719 
decim©‹
=
decim©e
;

720 
n
=0;Ç<
nx
;Ç++)

721 
y
 +
c€f
[
n
] * 
x
[n];

722 
y
 /(
ouçutGaö
*3);

723 
ouçut
[
ii
++]=
y
;

726 
n
=0;Ç<
nx
;Ç++)

727 
y
 +
c€f
[
n
] * 
x
[n];

729 
y
=((y/
ˇlcAdju°
)*
ouçutGaö
)/
M_Q8
;

731 i‡(
y
>32767)y=32767;

732 if(
y
<-32767)y=-32767;

734 if(
mixOut
){

735 if(
m⁄oOut
){

736 
ouçut
[(
ii
*2)]=ouçut[(ii*2)+1]+=
y
;

739 
ouçut
[(
ii
*
numCh™Out
)+
£lCh™Out
]+=
y
;

743 if(
m⁄oOut
){

744 
ouçut
[(
ii
*2)]=ouçut[(ii*2)+1]=
y
;

747 
ouçut
[(
ii
*
numCh™Out
)+
£lCh™Out
]=
y
;

750 
ii
++;

755 if(
£çt
)

757 
i16
 
accum
=
y
;

759 if(
accum
>
amax
)

761 
amax
=
accum
;

762 
discou¡îu
=
discÁ˘‹
;

764 if(--
discou¡îu
<=0)

766 
discou¡îu
=
discÁ˘‹
;

767 
amax
=(
i32
)((amax*32700)/32768);

770 if(
accum
<
amö
)

772 
amö
=
accum
;

773 
discou¡îl
=
discÁ˘‹
;

775 if(--
discou¡îl
<=0)

777 
discou¡îl
=
discÁ˘‹
;

778 
amö
=(
i32
)((amin*32700)/32768);

781 
≠ók
 = (
i32
)(
amax
-
amö
)/2;

783 if(
≠ók
>
£çt
)
compOut
=1;

784 if(
compOut
&&(
≠ók
<(
£çt
-
hy°
)))compOut=0;

788 
mySps
->
decim©‹
 = decimator;

790 
mySps
->
amax
=amax;

791 
mySps
->
amö
=amin;

792 
mySps
->
≠ók
=apeak;

793 
mySps
->
discou¡îu
=discounteru;

794 
mySps
->
discou¡îl
=discounterl;

796 
mySps
->
compOut
=compOut;

799 
	}
}

803 
i16
 
	$gp_öã_00
(
t_pmr_•s
 *
mySps
)

805 
i16
 
≈oöts
;

806 
i16
 *
öput
, *
ouçut
;

808 
i32
 
öputGaö
, 
ouçutGaö
,
ˇlcAdju°
;

809 
i32
 
i
;

810 
i32
 
accum
;

812 
i32
 
°©e00
;

813 
i16
 
c€ff00
, 
c€ff01
;

815 
	`TRACEJ
(5,("gp_öã_00(Ë%i\n",
mySps
->
íabÀd
));

816 if(!
mySps
->
íabÀd
)(1);

818 
öput
 = 
mySps
->
sour˚
;

819 
ouçut
 = 
mySps
->
sök
;

821 
≈oöts
=
mySps
->
nSam∂es
;

823 
öputGaö
=
mySps
->inputGain;

824 
ouçutGaö
=
mySps
->outputGain;

825 
ˇlcAdju°
=
mySps
->calcAdjust;

827 
c€ff00
=((
i16
*)
mySps
->
c€f
)[0];

828 
c€ff01
=((
i16
*)
mySps
->
c€f
)[1];

829 
°©e00
=((
i32
*)
mySps
->
x
)[0];

834 
i
=0;i<
≈oöts
;i++)

836 
accum
=
öput
[
i
];

837 
°©e00
 = 
accum
 + (°©e00*
c€ff01
)/
M_Q15
;

838 
accum
 = (
°©e00
*
c€ff00
)/(
M_Q15
/4);

839 
ouçut
[
i
]=(
accum
*
ouçutGaö
)/
M_Q8
;

842 ((
i32
*)(
mySps
->
x
))[0]=
°©e00
;

845 
	}
}

849 
i16
 
	$gp_diff
(
t_pmr_•s
 *
mySps
)

851 
i16
 *
öput
, *
ouçut
;

852 
i16
 
≈oöts
;

853 
i32
 
öputGaö
, 
ouçutGaö
, 
ˇlcAdju°
;

854 
i32
 
i
;

855 
i32
 
ãmp0
,
ãmp1
;

856 
i16
 
x0
;

857 
i32
 
y0
;

858 
i16
 
a0
,
a1
;

859 
i16
 
b0
;

860 
i16
 *
c€f
;

861 
i16
 *
x
;

863 
öput
 = 
mySps
->
sour˚
;

864 
ouçut
 = 
mySps
->
sök
;

866 
≈oöts
=
mySps
->
nSam∂es
;

868 
öputGaö
=
mySps
->inputGain;

869 
ouçutGaö
=
mySps
->outputGain;

870 
ˇlcAdju°
=
mySps
->calcAdjust;

872 
c€f
=(
i16
*)(
mySps
->coef);

873 
x
=(
i16
*)(
mySps
->x);

874 
a0
=
c€f
[0];

875 
a1
=
c€f
[1];

876 
b0
=
c€f
[2];

878 
x0
=
x
[0];

880 
	`TRACEJ
(5,("gp_diff()\n"));

882 
i
=0;i<
≈oöts
;i++)

884 
ãmp0
 = 
x0
 * 
a1
;

885 
x0
 = 
öput
[
i
];

886 
ãmp1
 = 
öput
[
i
] * 
a0
;

887 
y0
 = (
ãmp0
 + 
ãmp1
)/
ˇlcAdju°
;

888 
y0
 =(y0*
ouçutGaö
)/
M_Q8
;

890 if(
y0
>32767)y0=32767;

891 if(
y0
<-32767)y0=-32767;

892 
ouçut
[
i
]=
y0
;

895 
x
[0]=
x0
;

898 
	}
}

902 
i16
 
	$CíãrSli˚r
(
t_pmr_•s
 *
mySps
)

904 
i16
 
≈oöts
,
lhô
,
uhô
;

905 
i16
 *
öput
, *
ouçut
, *
buff
;

907 
i32
 
öputGaö
, 
ouçutGaö
, 
öputGaöB
;

908 
i32
 
i
;

909 
i32
 
accum
;

911 
i32
 
amax
;

912 
i32
 
amö
;

913 
i32
 
≠ók
;

914 
i32
 
˚¡î
;

915 
i32
 
£çt
;

917 
i32
 
discou¡îu
;

918 
i32
 
discou¡îl
;

919 
i32
 
discÁ˘‹
;

921 
	`TRACEJ
(5,("CíãrSli˚r(Ë%i\n",
mySps
->
íabÀd
));

922 if(!
mySps
->
íabÀd
)(1);

924 
öput
 = 
mySps
->
sour˚
;

925 
ouçut
 = 
mySps
->
sök
;

926 
buff
 = 
mySps
->buff;

928 
≈oöts
=
mySps
->
nSam∂es
;

930 
öputGaö
=
mySps
->inputGain;

931 
ouçutGaö
=
mySps
->outputGain;

932 
öputGaöB
=
mySps
->inputGainB;

934 
amax
=
mySps
->amax;

935 
amö
=
mySps
->amin;

936 
£çt
=
mySps
->setpt;

937 
≠ók
=
mySps
->apeak;

938 
discou¡îu
=
mySps
->discounteru;

939 
discou¡îl
=
mySps
->discounterl;

941 
discÁ˘‹
=
mySps
->discfactor;

942 
≈oöts
=
mySps
->
nSam∂es
;

944 
i
=0;i<
≈oöts
;i++)

946 
accum
=
öput
[
i
];

948 
lhô
=
uhô
=0;

950 if(
accum
>
amax
)

952 
amax
=
accum
;

953 
uhô
=1;

954 if(
amö
<(
amax
-
£çt
))

956 
amö
=(
amax
-
£çt
);

957 
lhô
=1;

960 if(
accum
<
amö
)

962 
amö
=
accum
;

963 
lhô
=1;

964 if(
amax
>(
amö
+
£çt
))

966 
amax
=(
amö
+
£çt
);

967 
uhô
=1;

971 if((
discou¡îu
-=1)<=0 && 
amax
>
amö
)

973 if((
amax
-=10)<
amö
)amax=amin;

974 
uhô
=1;

977 if((
discou¡îl
-=1)<=0 && 
amö
<
amax
)

979 if((
amö
+=10)>
amax
)amin=amax;

980 
lhô
=1;

982 if(
uhô
)
discou¡îu
=
discÁ˘‹
;

983 if(
lhô
)
discou¡îl
=
discÁ˘‹
;

987 if((
amax
-=
discÁ˘‹
)<
amö
)amax=amin;

988 if((
amö
+=
discÁ˘‹
)>
amax
)amin=amax;

992 
≠ók
 = (
amax
-
amö
)/2;

993 
˚¡î
 = (
amax
+
amö
)/2;

994 
accum
 =áccum - 
˚¡î
;

996 
ouçut
[
i
]=
accum
;

999 if(
accum
>
öputGaöB
)accum=inputGainB;

1000 if(
accum
<-
öputGaöB
)accum=-inputGainB;

1001 
buff
[
i
]=
accum
;

1003 #i‡
XPMR_DEBUG0
 == 1

1005 
mySps
->
∑ª¡Ch™
->
pRxLsdCí
[
i
]=
˚¡î
;

1007 
i32
 
tfx
=0;

1008 if((
tfx
++/8)&1)

1009 
mySps
->
∑ª¡Ch™
->
pRxLsdCí
[
i
]=
amax
;

1011 
mySps
->
∑ª¡Ch™
->
pRxLsdCí
[
i
]=
amö
;

1014 if(
mySps
->
∑ª¡Ch™
->
‰ameCou¡Rx
&0x01ËmySps->∑ª¡Ch™->
¥xDebug1
[
i
]=
amax
;

1015 
mySps
->
∑ª¡Ch™
->
¥xDebug1
[
i
]=
amö
;

1020 
mySps
->
amax
=amax;

1021 
mySps
->
amö
=amin;

1022 
mySps
->
≠ók
=apeak;

1023 
mySps
->
discou¡îu
=discounteru;

1024 
mySps
->
discou¡îl
=discounterl;

1027 
	}
}

1032 
i16
 
	$MósuªBlock
(
t_pmr_•s
 *
mySps
)

1034 
i16
 
≈oöts
;

1035 
i16
 *
öput
, *
ouçut
;

1037 
i32
 
öputGaö
, 
ouçutGaö
;

1038 
i32
 
i
;

1039 
i32
 
accum
;

1041 
i16
 
amax
;

1042 
i16
 
amö
;

1043 
i16
 
≠ók
=0;

1044 
i16
 
£çt
;

1046 
i32
 
discou¡îu
;

1047 
i32
 
discou¡îl
;

1048 
i32
 
discÁ˘‹
;

1050 
	`TRACEJ
(5,("MósuªBlock(Ë%i\n",
mySps
->
íabÀd
));

1052 if(!
mySps
->
íabÀd
) 1;

1054 if(
mySps
->
›ti⁄
==3)

1056 
mySps
->
amax
 = mySps->
amö
 = mySps->
≠ók
 = \

1057 
mySps
->
discou¡îu
 = mySps->
discou¡îl
 = \

1058 
mySps
->
íabÀd
 = 0;

1062 
öput
 = 
mySps
->
sour˚
;

1063 
ouçut
 = 
mySps
->
sök
;

1065 
≈oöts
=
mySps
->
nSam∂es
;

1067 
öputGaö
=
mySps
->inputGain;

1068 
ouçutGaö
=
mySps
->outputGain;

1070 
amax
=
mySps
->amax;

1071 
amö
=
mySps
->amin;

1072 
£çt
=
mySps
->setpt;

1073 
discou¡îu
=
mySps
->discounteru;

1074 
discou¡îl
=
mySps
->discounterl;

1076 
discÁ˘‹
=
mySps
->discfactor;

1077 
≈oöts
=
mySps
->
nSam∂es
;

1079 
i
=0;i<
≈oöts
;i++)

1081 
accum
=
öput
[
i
];

1083 if(
accum
>
amax
)

1085 
amax
=
accum
;

1086 
discou¡îu
=
discÁ˘‹
;

1088 if(--
discou¡îu
<=0)

1090 
discou¡îu
=
discÁ˘‹
;

1091 
amax
=(
i32
)((amax*32700)/32768);

1094 if(
accum
<
amö
)

1096 
amö
=
accum
;

1097 
discou¡îl
=
discÁ˘‹
;

1099 if(--
discou¡îl
<=0)

1101 
discou¡îl
=
discÁ˘‹
;

1102 
amö
=(
i32
)((amin*32700)/32768);

1105 
≠ók
 = (
i32
)(
amax
-
amö
)/2;

1106 if(
ouçut
)ouçut[
i
]=
≠ók
;

1109 
mySps
->
amax
=amax;

1110 
mySps
->
amö
=amin;

1111 
mySps
->
≠ók
=apeak;

1112 
mySps
->
discou¡îu
=discounteru;

1113 
mySps
->
discou¡îl
=discounterl;

1114 if(
≠ók
>=
£çt
Ë
mySps
->
compOut
=1;

1115 
mySps
->
compOut
=0;

1119 
	}
}

1123 
i16
 
	$So·Limôî
(
t_pmr_•s
 *
mySps
)

1125 
i16
 
≈oöts
;

1127 
i16
 *
öput
, *
ouçut
;

1129 
i32
 
öputGaö
, 
ouçutGaö
;

1130 
i32
 
i
;

1131 
i32
 
accum
;

1132 
i32
 
tmp
;

1134 
i32
 
amax
;

1135 
i32
 
amö
;

1137 
i32
 
£çt
;

1138 
i16
 
compOut
;

1140 
öput
 = 
mySps
->
sour˚
;

1141 
ouçut
 = 
mySps
->
sök
;

1143 
öputGaö
=
mySps
->inputGain;

1144 
ouçutGaö
=
mySps
->outputGain;

1146 
≈oöts
=
mySps
->
nSam∂es
;

1148 
£çt
=
mySps
->setpt;

1149 
amax
=(
£çt
*124)/128;

1150 
amö
=-
amax
;

1152 
	`TRACEJ
(5,("So·Limôî(Ë%ò%ò%iË\n",
amö
, 
amax
,
£çt
));

1154 
i
=0;i<
≈oöts
;i++)

1156 
accum
=
öput
[
i
];

1159 if(
accum
>
£çt
)

1161 
tmp
=((
accum
-
£çt
)*4)/128;

1162 
accum
=
£çt
+
tmp
;

1163 if(
accum
>
amax
)accum=amax;

1164 
compOut
=1;

1165 
accum
=
£çt
;

1167 if(
accum
<-
£çt
)

1169 
tmp
=((
accum
+
£çt
)*4)/128;

1170 
accum
=(-
£çt
)-
tmp
;

1171 if(
accum
<
amö
)accum=amin;

1172 
compOut
=1;

1173 
accum
=-
£çt
;

1176 
ouçut
[
i
]=(
accum
*
ouçutGaö
)/
M_Q8
;

1180 
	}
}

1190 
i16
 
	$SigGí
(
t_pmr_•s
 *
mySps
)

1192 
	#PH_FRACT_FACT
 128

	)

1194 
i32
 
ph
;

1195 
i16
 
i
,
ouçutgaö
,
wavef‹m
,
numCh™Out
,
£lCh™Out
;

1196 
i32
 
accum
;

1198 
t_pmr_ch™
 *
pCh™
;

1199 
pCh™
=
mySps
->
∑ª¡Ch™
;

1200 
	`TRACEC
(5,("SigGí(%ò%ò%i)\n",
mySps
->
›ti⁄
,mySps->
íabÀd
,mySps->
°©e
));

1202 if(!
mySps
->
‰eq
 ||!mySps->
íabÀd
) 0;

1204 
ouçutgaö
=
mySps
->
ouçutGaö
;

1205 
wavef‹m
=0;

1206 
numCh™Out
=
mySps
->numChanOut;

1207 
£lCh™Out
=
mySps
->selChanOut;

1209 if(
mySps
->
›ti⁄
==1)

1211 
mySps
->
›ti⁄
=0;

1212 
mySps
->
°©e
=1;

1213 
mySps
->
discÁ˘‹
=

1214 (
SAMPLES_PER_SINE
*
mySps
->
‰eq
*
PH_FRACT_FACT
)/mySps->
ßm∂eR©e
/10;

1216 
	`TRACEF
(5,(" SigGí(ËdiscÁ˘‹ = %i\n",
mySps
->
discÁ˘‹
));

1217 if(
mySps
->
discou¡îl
)mySps->
°©e
=2;

1219 if(
mySps
->
›ti⁄
==2)

1221 
i16
 
shi·Á˘‹
=
CTCSS_TURN_OFF_SHIFT
;

1223 
mySps
->
›ti⁄
=0;

1224 
mySps
->
°©e
=2;

1225 
mySps
->
discou¡îl
=
CTCSS_TURN_OFF_TIME
-(2*
MS_PER_FRAME
);

1227 
mySps
->
discou¡îu
 = \

1228 (
mySps
->
discou¡îu
 + (((
SAMPLES_PER_SINE
*
shi·Á˘‹
)/360)*
PH_FRACT_FACT
)) % (SAMPLES_PER_SINE*PH_FRACT_FACT);

1232 if(
mySps
->
›ti⁄
==3)

1235 
mySps
->
›ti⁄
=0;

1236 
mySps
->
°©e
=0;

1237 
mySps
->
íabÀd
=0;

1238 
mySps
->
b
.
muã
=0;

1239 
i
=0;i<
mySps
->
nSam∂es
;i++)

1240 
mySps
->
sök
[(
i
*
numCh™Out
)+
£lCh™Out
]=0;

1243 if(
mySps
->
°©e
==2)

1246 
mySps
->
discou¡îl
-=
MS_PER_FRAME
;

1247 if(
mySps
->
discou¡îl
<=0)

1249 
mySps
->
›ti⁄
=3;

1250 
mySps
->
°©e
=2;

1253 if(
mySps
->
°©e
==0)

1258 
ph
=
mySps
->
discou¡îu
;

1260 
i
=0;i<
mySps
->
nSam∂es
;i++)

1262 if(!
wavef‹m
)

1266 
accum
=
söëabÀx
[
ph
/
PH_FRACT_FACT
];

1267 
accum
=◊ccum*
ouçutgaö
)/
M_Q8
;

1272 if(
ph
>
SAMPLES_PER_SINE
/2)

1273 
accum
=
ouçutgaö
/
M_Q8
;

1275 
accum
=-
ouçutgaö
/
M_Q8
;

1278 if(
mySps
->
sour˚
)
accum
+=mySps->sour˚[
i
];

1280 if(
mySps
->
b
.
muã
Ë
accum
 = 0;

1282 
mySps
->
sök
[(
i
*
numCh™Out
)+
£lCh™Out
]=
accum
;

1284 
ph
=’h+
mySps
->
discÁ˘‹
)%(
SAMPLES_PER_SINE
*
PH_FRACT_FACT
);

1287 
mySps
->
discou¡îu
=
ph
;

1290 
	}
}

1296 
i16
 
	$pmrMixî
(
t_pmr_•s
 *
mySps
)

1298 
i32
 
accum
;

1299 
i16
 
i
, *
öput
, *
öputB
, *
ouçut
;

1300 
i16
 
öputGaö
, 
öputGaöB
;

1301 
i16
 
ouçutGaö
;

1302 
i16
 
discou¡îu
,
discou¡îl
,
amax
,
amö
,
£çt
,
discÁ˘‹
;

1303 
i16
 
≈oöts
,
uhô
,
lhô
,
≠ók
,
mósPók
;

1305 
t_pmr_ch™
 *
pCh™
;

1306 
pCh™
=
mySps
->
∑ª¡Ch™
;

1307 
	`TRACEF
(5,("pmrMixer()\n"));

1310 
öput
 = 
mySps
->
sour˚
;

1311 
öputB
 = 
mySps
->
sour˚B
;

1312 
ouçut
 = 
mySps
->
sök
;

1314 
öputGaö
=
mySps
->inputGain;

1315 
öputGaöB
=
mySps
->inputGainB;

1316 
ouçutGaö
=
mySps
->outputGain;

1318 
amax
=
mySps
->amax;

1319 
amö
=
mySps
->amin;

1320 
£çt
=
mySps
->setpt;

1321 
discou¡îu
=
mySps
->discounteru;

1322 
discou¡îl
=
mySps
->
discou¡îu
;

1324 
discÁ˘‹
=
mySps
->discfactor;

1325 
≈oöts
=
mySps
->
nSam∂es
;

1326 
mósPók
=
mySps
->measPeak;

1328 
i
=0;i<
≈oöts
;i++)

1330 i‡(
öputB
)

1332 
accum
 = ((
öput
[
i
]*
öputGaö
)/
M_Q8
) +

1333 ((
öputB
[
i
]*
öputGaöB
)/
M_Q8
);

1337 
accum
 = (
öput
[
i
]*
öputGaö
)/
M_Q8
;

1339 
accum
=◊ccum*
ouçutGaö
)/
M_Q8
;

1340 
ouçut
[
i
]=
accum
;

1342 if(
mósPók
){

1343 
lhô
=
uhô
=0;

1345 if(
accum
>
amax
){

1346 
amax
=
accum
;

1347 
uhô
=1;

1348 if(
amö
<(
amax
-
£çt
)){

1349 
amö
=(
amax
-
£çt
);

1350 
lhô
=1;

1353 if(
accum
<
amö
){

1354 
amö
=
accum
;

1355 
lhô
=1;

1356 if(
amax
>(
amö
+
£çt
)){

1357 
amax
=(
amö
+
£çt
);

1358 
uhô
=1;

1362 if(--
discou¡îu
<=0 && 
amax
>0){

1363 
amax
--;

1364 
uhô
=1;

1367 if(--
discou¡îl
<=0 && 
amö
<0){

1368 
amö
++;

1369 
lhô
=1;

1372 if(
uhô
)
discou¡îu
=
discÁ˘‹
;

1373 if(
lhô
)
discou¡îl
=
discÁ˘‹
;

1377 if(
mósPók
){

1378 
≠ók
 = (
amax
-
amö
)/2;

1379 
mySps
->
≠ók
=apeak;

1380 
mySps
->
amax
=amax;

1381 
mySps
->
amö
=amin;

1382 
mySps
->
discou¡îu
=discounteru;

1383 
mySps
->
discou¡îl
=discounterl;

1387 
	}
}

1391 
i16
 
	$DñayLöe
(
t_pmr_•s
 *
mySps
)

1393 
i16
 *
öput
, *
ouçut
, *
buff
;

1394 
i16
 
i
, 
≈oöts
,
buffsize
,
öödex
,
outödex
;

1396 
t_pmr_ch™
 *
pCh™
;

1397 
pCh™
=
mySps
->
∑ª¡Ch™
;

1398 
	`TRACEF
(5,(" DñayLöe(Ë%i\n",
mySps
->
íabÀd
));

1400 if(!
mySps
->
íabÀd
 || mySps->
b
.
outzîo
)

1402 if(
mySps
->
b
.
dúty
)

1404 
mySps
->
b
.
dúty
=0;

1405 
mySps
->
buffInIndex
=0;

1406 
	`mem£t
((*)(
mySps
->
buff
),0,mySps->
buffSize
*2);

1407 
	`mem£t
((*)(
mySps
->
sök
),0,mySps->
nSam∂es
*2);

1412 
öput
 = 
mySps
->
sour˚
;

1413 
ouçut
 = 
mySps
->
sök
;

1414 
buff
 = (
i16
*)(
mySps
->buff);

1415 
buffsize
 = 
mySps
->
buffSize
;

1416 
≈oöts
 = 
mySps
->
nSam∂es
;

1417 
öödex
 = 
mySps
->
buffInIndex
;

1418 
outödex
 = 
öödex
-
mySps
->
buffLód
;

1420 if(
outödex
<0)outödex+=
buffsize
;

1422 
i
=0;i<
≈oöts
;i++)

1424 
öödex
 %
buffsize
;

1425 
outödex
 %
buffsize
;

1426 
buff
[
öödex
]=
öput
[
i
];

1427 
ouçut
[
i
]=
buff
[
outödex
];

1428 
öödex
++;

1429 
outödex
++;

1431 
mySps
->
buffInIndex
=
öödex
;

1432 
mySps
->
b
.
dúty
=1;

1434 
	}
}

1438 
i16
 
	$˘css_dëe˘
(
t_pmr_ch™
 *
pCh™
)

1440 
i16
 
i
,
poöts2do
,*
pI≈ut
,
hô
,
thô
,
ªœx
;

1441 
i16
 
äum
, 
tmp
,
ödexNow
,
gaö
,
difÂók
;

1442 
i16
 
dif·rig
;

1443 
i16
 
tv0
,
tv1
,
tv2
,
tv3
,
ödexDebug
;

1444 
i16
 
poöts
=0;

1445 
i16
 
ödexWas
=0;

1447 
	`TRACEF
(5,("˘css_dëe˘(%pË%ò%ò%ò%i\n",
pCh™
,

1448 
pCh™
->
rxCtcss
->
íabÀd
,

1450 
pCh™
->
rxCtcss
->
ã°Index
,

1451 
pCh™
->
rxCtcss
->
decode
));

1453 if(!
pCh™
->
rxCtcss
->
íabÀd
)(1);

1455 
ªœx
 = 
pCh™
->
rxCtcss
->relax;

1456 
pI≈ut
 = 
pCh™
->
rxCtcss
->
öput
;

1457 
gaö
 = 
pCh™
->
rxCtcss
->gain;

1459 if(
ªœx
Ë
dif·rig
=(-0.1*
M_Q15
);

1460 
dif·rig
=(-0.05*
M_Q15
);

1462 
thô
=
hô
=-1;

1466 
äum
=0;äum<
CTCSS_NUM_CODES
;tnum++)

1468 
i32
 
accum
, 
≥ak
;

1469 
t_tdë
 *
±dë
;

1470 
i16
 
fudgeFa˘‹
;

1471 
i16
 
böFa˘‹
;

1473 
	`TRACEF
(6,(" ctcss_dëe˘(Ëäum=%ò%i\n",
äum
,
pCh™
->
rxCtcssM≠
[tnum]));

1476 if–(
pCh™
->
rxCtcssM≠
[
äum
]==
CTCSS_NULL
) ||

1477 (
pCh™
->
rxCtcss
->
decode
>
CTCSS_NULL
 && (
äum
!=ÖChan->rxCtcss->decode))

1481 
	`TRACEF
(6,(" ctcss_dëe˘(Ëäum=%i\n",
äum
));

1483 
±dë
=&(
pCh™
->
rxCtcss
->
tdë
[
äum
]);

1484 
ödexDebug
=0;

1485 
poöts
=
poöts2do
=
pCh™
->
nSam∂esRx
;

1486 
fudgeFa˘‹
=
±dë
->fudgeFactor;

1487 
böFa˘‹
=
±dë
->binFactor;

1489 
±dë
->
cou¡î
 < (
poöts2do
*
CTCSS_SCOUNT_MUL
))

1491 
tmp
=(
±dë
->
cou¡î
/
CTCSS_SCOUNT_MUL
)+1;

1492 
±dë
->
cou¡î
-=(
tmp
*
CTCSS_SCOUNT_MUL
);

1493 
poöts2do
-=
tmp
;

1494 
ödexNow
=
poöts
-
poöts2do
;

1496 
±dë
->
cou¡î
 +±dë->
cou¡îFa˘‹
;

1498 
accum
 = 
pI≈ut
[
ödexNow
-1];

1500 
±dë
->
z
[±dë->
zIndex
]+=

1501 (((
accum
 - 
±dë
->
z
[±dë->
zIndex
])*
böFa˘‹
)/
M_Q15
);

1503 
≥ak
 = 
	`abs
(
±dë
->
z
[0]-ptdet->z[2]) +ábs(ptdet->z[1]-ptdet->z[3]);

1505 i‡(
±dë
->
≥ak
 <Öeak)

1506 
±dë
->
≥ak
 +–(’ók-±dë->≥ak)*
böFa˘‹
)/
M_Q15
);

1508 
±dë
->
≥ak
=peak;

1511 c⁄° 
i16
 
a0
=13723;

1512 c⁄° 
i16
 
a1
=-13723;

1513 
i32
 
ãmp0
,
ãmp1
;

1514 
i16
 
x0
;

1517 
x0
=
±dë
->
zd
;

1518 
ãmp0
 = 
x0
 * 
a1
;

1519 
±dë
->
zd
 =Ötdë->
≥ak
;

1520 
ãmp1
 = 
±dë
->
≥ak
 * 
a0
;

1521 
difÂók
 = (
ãmp0
 + 
ãmp1
)/1024;

1524 if(
difÂók
<(-0.03*
M_Q15
))
±dë
->
dvd
-=4;

1525 if(
±dë
->
dvd
<0)ptdet->dvd++;

1527 if((
±dë
->
dvd
 < -12Ë&& 
difÂók
 > (-0.02*
M_Q15
)Ìtdë->
dvu
+=2;

1528 if(
±dë
->
dvu
)ptdet->dvu--;

1530 
tmp
=
±dë
->
£çt
;

1531 if(
pCh™
->
rxCtcss
->
decode
==
äum
)

1533 if(
ªœx
)
tmp
=(tmp*55)/100;

1534 
tmp
=(tmp*80)/100;

1537 if(
±dë
->
≥ak
 > 
tmp
)

1539 if(
±dë
->
decode
<(
fudgeFa˘‹
*32))ptdet->decode++;

1541 if(
pCh™
->
rxCtcss
->
decode
==
äum
)

1543 if(
±dë
->
≥ak
 >Ötdë->
hy°
Ìtdë->
decode
--;

1544 if(
ªœx
Ë
±dë
->
decode
--;

1545 
±dë
->
decode
-=4;

1549 
±dë
->
decode
=0;

1552 if((
pCh™
->
rxCtcss
->
decode
==
äum
Ë&& !
ªœx
 && (
±dë
->
dvu
 > (0.00075*
M_Q15
)))

1554 
±dë
->
decode
=0;

1555 
±dë
->
z
[0]ıtdë->z[1]ıtdë->z[2]ıtdë->z[3]ıtdë->
dvu
=0;

1556 
	`TRACEF
(4,("˘css_dëe˘(Ëtu∫of‡dëe˘ed by dvdàf‹Ånum = %i.\n",
äum
));

1559 if(
±dë
->
decode
<0 || !
pCh™
->
rxC¨rõrDëe˘
)ptdet->decode=0;

1561 if(
±dë
->
decode
>=
fudgeFa˘‹
)

1563 
thô
=
äum
;

1564 if(
pCh™
->
rxCtcss
->
decode
!=
äum
)

1566 
±dë
->
zd
ıtdë->
dvu
ıtdë->
dvd
=0;

1570 #i‡
XPMR_DEBUG0
 == 1

1571 if(
thô
>=0 &&Åhô==
äum
)

1572 
	`TRACEF
(6,(" ctcss_dëe˘(Ë%ò%ò%ò%ò\n",
äum
,
±dë
->
≥ak
,±dë->
£çt
,±dë->
hy°
));

1574 if(
±dë
->
pDebug0
)

1576 
tv0
=
±dë
->
≥ak
;

1577 
tv1
=
±dë
->
decode
;

1578 
tv2
=
tmp
;

1579 
tv3
=
±dë
->
dvu
*32;

1581 if(
ödexDebug
==0)

1583 
±dë
->
œ°tv0
ıtdë->
pDebug0
[
poöts
-1];

1584 
±dë
->
œ°tv1
ıtdë->
pDebug1
[
poöts
-1];

1585 
±dë
->
œ°tv2
ıtdë->
pDebug2
[
poöts
-1];

1586 
±dë
->
œ°tv3
ıtdë->
pDebug3
[
poöts
-1];

1589 
ödexDebug
<
ödexNow
)

1591 
±dë
->
pDebug0
[
ödexDebug
]ıtdë->
œ°tv0
;

1592 
±dë
->
pDebug1
[
ödexDebug
]ıtdë->
œ°tv1
;

1593 
±dë
->
pDebug2
[
ödexDebug
]ıtdë->
œ°tv2
;

1594 
±dë
->
pDebug3
[
ödexDebug
]ıtdë->
œ°tv3
;

1595 
ödexDebug
++;

1597 
±dë
->
œ°tv0
=
tv0
;

1598 
±dë
->
œ°tv1
=
tv1
;

1599 
±dë
->
œ°tv2
=
tv2
;

1600 
±dë
->
œ°tv3
=
tv3
;

1603 
ödexWas
=
ödexNow
;

1604 
±dë
->
zIndex
=(++ptdet->zIndex)%4;

1606 
±dë
->
cou¡î
-=(
poöts2do
*
CTCSS_SCOUNT_MUL
);

1608 #i‡
XPMR_DEBUG0
 == 1

1609 
i
=
ödexWas
;i<
poöts
;i++)

1611 
±dë
->
pDebug0
[
i
]ıtdë->
œ°tv0
;

1612 
±dë
->
pDebug1
[
i
]ıtdë->
œ°tv1
;

1613 
±dë
->
pDebug2
[
i
]ıtdë->
œ°tv2
;

1614 
±dë
->
pDebug3
[
i
]ıtdë->
œ°tv3
;

1621 if(
pCh™
->
rxCtcss
->
BœnkögTimî
>0ÌCh™->rxCtcss->BœnkögTimî-=
poöts
;

1622 if(
pCh™
->
rxCtcss
->
BœnkögTimî
<0)pChan->rxCtcss->BlankingTimer=0;

1624 if(
thô
>
CTCSS_NULL
 && 
pCh™
->
rxCtcss
->
decode
<=CTCSS_NULL && !pCh™->rxCtcss->
BœnkögTimî
)

1626 
pCh™
->
rxCtcss
->
decode
=
thô
;

1627 
	`•rötf
(
pCh™
->
rx˘css‰eq
,"%.1f",
‰eq_˘css
[
thô
]);

1628 
	`TRACEC
(1,("˘cs†decodê %ò %.1f\n",
thô
,
‰eq_˘css
[thit]));

1630 if(
thô
<=
CTCSS_NULL
 && 
pCh™
->
rxCtcss
->
decode
>CTCSS_NULL)

1632 
pCh™
->
rxCtcss
->
BœnkögTimî
=
SAMPLE_RATE_NETWORK
/5;

1633 
pCh™
->
rxCtcss
->
decode
=
CTCSS_NULL
;

1634 
	`°r˝y
(
pCh™
->
rx˘css‰eq
,"0");

1635 
	`TRACEC
(1,("ctcss decode NULL\n"));

1636 
äum
=0;äum<
CTCSS_NUM_CODES
;tnum++)

1638 
t_tdë
 *
±dë
=
NULL
;

1639 
±dë
=&(
pCh™
->
rxCtcss
->
tdë
[
äum
]);

1640 
±dë
->
decode
=0;

1641 
±dë
->
z
[0]=ptdet->z[1]=ptdet->z[2]=ptdet->z[3]=0;

1646 
	}
}

1647 #i‚def 
XPMR_VOTER


1651 
i16
 
	$TxTe°T⁄e
(
t_pmr_ch™
 *
pCh™
, 
i16
 
fun˘i⁄
)

1653 if(
fun˘i⁄
==1)

1655 
pCh™
->
•sSigGí1
->
íabÀd
=1;

1656 
pCh™
->
•sSigGí1
->
›ti⁄
=1;

1657 
pCh™
->
•sSigGí1
->
ouçutGaö
=(.23125*
M_Q8
);

1658 
pCh™
->
•sTx
->
sour˚
ıCh™->
•sSigGí1
->
sök
;

1662 
pCh™
->
•sSigGí1
->
›ti⁄
=3;

1665 
	}
}

1673 
t_pmr_ch™
 *
	$¸óãPmrCh™√l
(
t_pmr_ch™
 *
tCh™
, 
i16
 
numSam∂es
)

1675 
i16
 
i
, *
öputTmp
;

1676 
t_pmr_ch™
 *
pCh™
;

1677 
t_pmr_•s
 *
pSps
;;

1678 
t_dec_˘css
 *
pDecCtcss
;

1680 
	`TRACEJ
(1,("¸óãPmrCh™√l(%p,%i)\n",
tCh™
,
numSam∂es
));

1682 
pCh™
 = (
t_pmr_ch™
 *)
	`ˇŒoc
((t_pmr_chan),1);

1683 if(
pCh™
==
NULL
)

1685 
	`¥ötf
("createPmrChannel() failed\n");

1686 (
NULL
);

1689 #i‡
XPMR_PPTP
 == 1

1690 
	`µç_öô
();

1693 
pCh™
->
ödex
=
pmrCh™Index
++;

1694 
pCh™
->
nSam∂esTx
ıCh™->
nSam∂esRx
=
numSam∂es
;

1696 
pDecCtcss
 = (
t_dec_˘css
 *)
	`ˇŒoc
((t_dec_ctcss),1);

1697 
pCh™
->
rxCtcss
=
pDecCtcss
;

1698 
pCh™
->
rx˘css‰eq
[0]=0;

1700 #ifde‡
HAVE_XPMRX


1701 if(
tCh™
->
Ωäum
>=
LSD_CHAN_MAX
)tChan->rptnum=0;

1704 if(
tCh™
==
NULL
)

1706 
	`¥ötf
("createPmrChannel() WARNING: NULLÅChan!\n");

1707 
pCh™
->
rxNoi£SquñchE«bÀ
=0;

1708 
pCh™
->
rxHpfE«bÀ
=0;

1709 
pCh™
->
rxDeEmpE«bÀ
=0;

1710 
pCh™
->
rxCíãrSli˚rE«bÀ
=0;

1711 
pCh™
->
rxCtcssDecodeE«bÀ
=0;

1712 
pCh™
->
rxDcsDecodeE«bÀ
=0;

1714 
pCh™
->
rxC¨rõrPoöt
 = 17000;

1715 
pCh™
->
rxC¨rõrHy°
 = 2500;

1717 
pCh™
->
txHpfE«bÀ
=0;

1718 
pCh™
->
txLimôîE«bÀ
=0;

1719 
pCh™
->
txPªEmpE«bÀ
=0;

1720 
pCh™
->
txLpfE«bÀ
=1;

1721 
pCh™
->
txMixA
=
TX_OUT_VOICE
;

1722 
pCh™
->
txMixB
=
TX_OUT_LSD
;

1726 
pCh™
->
rxDemod
=
tCh™
->rxDemod;

1727 
pCh™
->
rxCdTy≥
=
tCh™
->rxCdType;

1728 
pCh™
->
rxSquñchPoöt
 = 
tCh™
->rxSquelchPoint;

1729 
pCh™
->
rxC¨rõrHy°
 = 
tCh™
->rxCarrierHyst;

1730 
pCh™
->
rxSqVoxAdj
=
tCh™
->rxSqVoxAdj;

1731 
pCh™
->
rxSquñchDñay
=
tCh™
->rxSquelchDelay;

1732 
pCh™
->
rxNoi£FûTy≥
=
tCh™
->rxNoiseFilType;

1734 
pCh™
->
txMod
=
tCh™
->txMod;

1735 
pCh™
->
txHpfE«bÀ
=1;

1736 
pCh™
->
txLpfE«bÀ
=1;

1738 
pCh™
->
pTxCodeDeÁu…
=
tCh™
->pTxCodeDefault;

1739 
pCh™
->
pRxCodeSrc
=
tCh™
->pRxCodeSrc;

1740 
pCh™
->
pTxCodeSrc
=
tCh™
->pTxCodeSrc;

1742 
pCh™
->
txMixA
=
tCh™
->txMixA;

1743 
pCh™
->
txMixB
=
tCh™
->txMixB;

1744 
pCh™
->
ødioDu∂ex
=
tCh™
->radioDuplex;

1745 
pCh™
->
¨ó
=
tCh™
->area;

1746 
pCh™
->
Ωäum
=
tCh™
->rptnum;

1747 
pCh™
->
idÀöãrvÆ
=
tCh™
->idleinterval;

1748 
pCh™
->
tu∫offs
=
tCh™
->turnoffs;

1749 
pCh™
->
b
.
rxpﬁ¨ôy
=
tCh™
->b.rxpolarity;

1750 
pCh™
->
b
.
txpﬁ¨ôy
=
tCh™
->b.txpolarity;

1751 
pCh™
->
b
.
dc§xpﬁ¨ôy
=
tCh™
->b.dcsrxpolarity;

1752 
pCh™
->
b
.
dc°xpﬁ¨ôy
=
tCh™
->b.dcstxpolarity;

1753 
pCh™
->
b
.
lsdrxpﬁ¨ôy
=
tCh™
->b.lsdrxpolarity;

1754 
pCh™
->
b
.
lsdtxpﬁ¨ôy
=
tCh™
->b.lsdtxpolarity;

1755 
pCh™
->
b
.
txboo°
=
tCh™
->b.txboost;

1757 
pCh™
->
tx£âÀtime
=
tCh™
->txsettletime;

1758 
pCh™
->
åa˚Àvñ
=
tCh™
->tracelevel;

1759 
pCh™
->
åa˚ty≥
=
tCh™
->tracetype;

1760 
pCh™
->
ukey
=
tCh™
->ukey;

1761 
pCh™
->
«me
=
tCh™
->name;

1764 if(
pCh™
->
rxC¨rõrHy°
==0)

1765 
pCh™
->
rxC¨rõrHy°
 = 3000;

1767 
pCh™
->
txHpfE«bÀ
=1;

1768 
pCh™
->
txLpfE«bÀ
=1;

1770 if(
pCh™
->
rxCdTy≥
==
CD_XPMR_NOISE
ËpCh™->
rxNoi£SquñchE«bÀ
=1;

1772 if(
pCh™
->
rxDemod
==
RX_AUDIO_FLAT
ËpCh™->
rxDeEmpE«bÀ
=1;

1774 
pCh™
->
rxC¨rõrPoöt
=’Ch™->
rxSquñchPoöt
*32767)/100;

1775 
pCh™
->
rxC¨rõrHy°
 = 3000;

1777 
pCh™
->
rxDcsDecodeE«bÀ
=0;

1779 if(
pCh™
->
b
.
˘cssRxE«bÀ
 ||ÖCh™->b.
dcsRxE«bÀ
 ||ÖCh™->b.
lmrRxE«bÀ
)

1781 
pCh™
->
rxHpfE«bÀ
=1;

1782 
pCh™
->
rxCíãrSli˚rE«bÀ
=1;

1783 
pCh™
->
rxCtcssDecodeE«bÀ
=1;

1786 if(
pCh™
->
txMod
)

1787 
pCh™
->
txLimôîE«bÀ
=1;

1788 if(
pCh™
->
txMod
 > 1)

1789 
pCh™
->
txPªEmpE«bÀ
=1;

1791 
pCh™
->
dd
.
›ti⁄
=9;

1792 
	`dedri·
(
pCh™
);

1794 
pCh™
->
œ°rxdecode
 = 
CTCSS_NULL
;

1796 
	`TRACEF
(1,("calloc buffers \n"));

1798 
pCh™
->
pRxDemod
 = 
	`ˇŒoc
(
numSam∂es
,2);

1799 
pCh™
->
pRxNoi£
 = 
	`ˇŒoc
(
numSam∂es
,2);

1800 
pCh™
->
pRxBa£
 = 
	`ˇŒoc
(
numSam∂es
,2);

1801 
pCh™
->
pRxHpf
 = 
	`ˇŒoc
(
numSam∂es
,2);

1802 
pCh™
->
pRxLsd
 = 
	`ˇŒoc
(
numSam∂es
,2);

1803 
pCh™
->
pRxS≥akî
 = 
	`ˇŒoc
(
numSam∂es
,2);

1804 
pCh™
->
pRxCtcss
 = 
	`ˇŒoc
(
numSam∂es
,2);

1805 
pCh™
->
pRxDcTøck
 = 
	`ˇŒoc
(
numSam∂es
,2);

1806 
pCh™
->
pRxLsdLimô
 = 
	`ˇŒoc
(
numSam∂es
,2);

1808 
pCh™
->
pTxI≈ut
 = 
	`ˇŒoc
(
numSam∂es
,2);

1809 
pCh™
->
pTxBa£
 = 
	`ˇŒoc
(
numSam∂es
,2);

1810 
pCh™
->
pTxHpf
 = 
	`ˇŒoc
(
numSam∂es
,2);

1811 
pCh™
->
pTxPªEmp
 = 
	`ˇŒoc
(
numSam∂es
,2);

1812 
pCh™
->
pTxLimôî
 = 
	`ˇŒoc
(
numSam∂es
,2);

1813 
pCh™
->
pTxLsd
 = 
	`ˇŒoc
(
numSam∂es
,2);

1814 
pCh™
->
pTxLsdLpf
 = 
	`ˇŒoc
(
numSam∂es
,2);

1815 
pCh™
->
pTxComposôe
 = 
	`ˇŒoc
(
numSam∂es
,2);

1816 
pCh™
->
pSigGí0
 = 
	`ˇŒoc
(
numSam∂es
,2);

1817 
pCh™
->
pSigGí1
 = 
	`ˇŒoc
(
numSam∂es
,2);

1819 
pCh™
->
¥xMósuª
 = 
	`ˇŒoc
(
numSam∂es
,2);

1821 
pCh™
->
pTxOut
 = 
	`ˇŒoc
(
numSam∂es
,2*2*6);

1823 #ifde‡
HAVE_XPMRX


1824 
pCh™
->
pLsdEnc
 = 
	`ˇŒoc
((
t_ícLsd
),1);

1827 #i‡
XPMR_DEBUG0
 == 1

1828 
	`TRACEF
(1,("configureÅracing\n"));

1830 
pCh™
->
pT°TxOut
 = 
	`ˇŒoc
(
numSam∂es
,2);

1831 
pCh™
->
pRxLsdCí
 = 
	`ˇŒoc
(
numSam∂es
,2);

1832 
pCh™
->
¥xDebug0
 = 
	`ˇŒoc
(
numSam∂es
,2);

1833 
pCh™
->
¥xDebug1
 = 
	`ˇŒoc
(
numSam∂es
,2);

1834 
pCh™
->
¥xDebug2
 = 
	`ˇŒoc
(
numSam∂es
,2);

1835 
pCh™
->
¥xDebug3
 = 
	`ˇŒoc
(
numSam∂es
,2);

1836 
pCh™
->
±xDebug0
 = 
	`ˇŒoc
(
numSam∂es
,2);

1837 
pCh™
->
±xDebug1
 = 
	`ˇŒoc
(
numSam∂es
,2);

1838 
pCh™
->
±xDebug2
 = 
	`ˇŒoc
(
numSam∂es
,2);

1839 
pCh™
->
±xDebug3
 = 
	`ˇŒoc
(
numSam∂es
,2);

1840 
pCh™
->
pNuŒ
 = 
	`ˇŒoc
(
numSam∂es
,2);

1842 
i
=0;i<
numSam∂es
;i++)
pCh™
->
pNuŒ
[i]=((i%(numSamples/2))*8000)-4000;

1844 
pCh™
->
rxCtcss
->
pDebug0
=
	`ˇŒoc
(
numSam∂es
,2);

1845 
pCh™
->
rxCtcss
->
pDebug1
=
	`ˇŒoc
(
numSam∂es
,2);

1846 
pCh™
->
rxCtcss
->
pDebug2
=
	`ˇŒoc
(
numSam∂es
,2);

1847 
pCh™
->
rxCtcss
->
pDebug3
=
	`ˇŒoc
(
numSam∂es
,2);

1849 
i
=0;i<
CTCSS_NUM_CODES
;i++)

1851 
pCh™
->
rxCtcss
->
tdë
[
i
].
pDebug0
=
	`ˇŒoc
(
numSam∂es
,2);

1852 
pCh™
->
rxCtcss
->
tdë
[
i
].
pDebug1
=
	`ˇŒoc
(
numSam∂es
,2);

1853 
pCh™
->
rxCtcss
->
tdë
[
i
].
pDebug2
=
	`ˇŒoc
(
numSam∂es
,2);

1854 
pCh™
->
rxCtcss
->
tdë
[
i
].
pDebug3
=
	`ˇŒoc
(
numSam∂es
,2);

1858 
pCh™
->
¥xDebug
=
	`ˇŒoc
(
numSam∂es
*16,2);

1859 
pCh™
->
±xDebug
=
	`ˇŒoc
(
numSam∂es
*16,2);

1862 
pCh™
->
sdbg
 = (
t_sdbg
 *)
	`ˇŒoc
((t_sdbg),1);

1864 
i
=0;i<
XPMR_DEBUG_CHANS
;i++)
pCh™
->
sdbg
->
åa˚
[i]=-1;

1866 
	`TRACEF
(1,("pCh™->åa˚ty≥ = %i\n",
pCh™
->
åa˚ty≥
));

1868 if(
pCh™
->
åa˚ty≥
==1)

1870 
pCh™
->
sdbg
->
sour˚
 [0]ıCh™->
pRxDemod
;

1871 
pCh™
->
sdbg
->
sour˚
 [1]ıCh™->
pRxBa£
;

1872 
pCh™
->
sdbg
->
sour˚
 [2]ıCh™->
pRxNoi£
;

1873 
pCh™
->
sdbg
->
åa˚
 [3]=
RX_NOISE_TRIG
;

1874 
pCh™
->
sdbg
->
sour˚
 [4]ıCh™->
pRxLsd
;

1875 
pCh™
->
sdbg
->
sour˚
 [5]ıCh™->
pRxLsdCí
;

1876 
pCh™
->
sdbg
->
sour˚
 [6]ıCh™->
pRxLsdLimô
;

1877 
pCh™
->
sdbg
->
sour˚
 [7]ıCh™->
rxCtcss
->
tdë
[3].
pDebug0
;

1878 
pCh™
->
sdbg
->
åa˚
 [8]=
RX_CTCSS_DECODE
;

1879 
pCh™
->
sdbg
->
åa˚
 [9]=
RX_SMODE
;

1880 
pCh™
->
sdbg
->
sour˚
 [10]ıCh™->
pRxBa£
;

1881 
pCh™
->
sdbg
->
sour˚
 [11]ıCh™->
pRxS≥akî
;

1883 if(
pCh™
->
åa˚ty≥
==2)

1885 
pCh™
->
sdbg
->
sour˚
 [0]ıCh™->
pRxDemod
;

1886 
pCh™
->
sdbg
->
sour˚
 [1]ıCh™->
pRxBa£
;

1887 
pCh™
->
sdbg
->
åa˚
 [2]=
RX_NOISE_TRIG
;

1888 
pCh™
->
sdbg
->
sour˚
 [3]ıCh™->
pRxLsd
;

1889 
pCh™
->
sdbg
->
sour˚
 [4]ıCh™->
pRxLsdCí
;

1890 
pCh™
->
sdbg
->
sour˚
 [5]ıCh™->
pRxDcTøck
;

1891 
pCh™
->
sdbg
->
sour˚
 [6]ıCh™->
pRxLsdLimô
;

1892 
pCh™
->
sdbg
->
sour˚
 [7]ıCh™->
rxCtcss
->
tdë
[3].
pDebug0
;

1893 
pCh™
->
sdbg
->
sour˚
 [8]ıCh™->
rxCtcss
->
tdë
[3].
pDebug1
;

1894 
pCh™
->
sdbg
->
sour˚
 [9]ıCh™->
rxCtcss
->
tdë
[3].
pDebug2
;

1895 
pCh™
->
sdbg
->
sour˚
 [10]ıCh™->
rxCtcss
->
tdë
[3].
pDebug3
;

1896 
pCh™
->
sdbg
->
åa˚
 [11]=
RX_CTCSS_DECODE
;

1897 
pCh™
->
sdbg
->
åa˚
 [12]=
RX_SMODE
;

1898 
pCh™
->
sdbg
->
åa˚
 [13]=
TX_PTT_IN
;

1899 
pCh™
->
sdbg
->
åa˚
 [14]=
TX_PTT_OUT
;

1900 
pCh™
->
sdbg
->
sour˚
 [15]ıCh™->
pTxLsdLpf
;

1902 if(
pCh™
->
åa˚ty≥
==3)

1904 
pCh™
->
sdbg
->
sour˚
 [0]ıCh™->
pRxDemod
;

1905 
pCh™
->
sdbg
->
sour˚
 [1]ıCh™->
pRxBa£
;

1906 
pCh™
->
sdbg
->
åa˚
 [2]=
RX_NOISE_TRIG
;

1907 
pCh™
->
sdbg
->
sour˚
 [3]ıCh™->
pRxLsd
;

1908 
pCh™
->
sdbg
->
sour˚
 [4]ıCh™->
pRxLsdCí
;

1909 
pCh™
->
sdbg
->
sour˚
 [5]ıCh™->
pRxDcTøck
;

1910 
pCh™
->
sdbg
->
åa˚
 [6]=
RX_DCS_CLK
;

1911 
pCh™
->
sdbg
->
åa˚
 [7]=
RX_DCS_DIN
;

1912 
pCh™
->
sdbg
->
åa˚
 [8]=
RX_DCS_DEC
;

1913 
pCh™
->
sdbg
->
åa˚
 [9]=
RX_SMODE
;

1914 
pCh™
->
sdbg
->
åa˚
 [10]=
TX_PTT_IN
;

1915 
pCh™
->
sdbg
->
åa˚
 [11]=
TX_PTT_OUT
;

1916 
pCh™
->
sdbg
->
åa˚
 [12]=
TX_LSD_CLK
;

1917 
pCh™
->
sdbg
->
åa˚
 [13]=
TX_LSD_DAT
;

1918 
pCh™
->
sdbg
->
åa˚
 [14]=
TX_LSD_GEN
;

1919 
pCh™
->
sdbg
->
sour˚
 [14]ıCh™->
pTxLsd
;

1920 
pCh™
->
sdbg
->
sour˚
 [15]ıCh™->
pTxLsdLpf
;

1922 if(
pCh™
->
åa˚ty≥
==4)

1924 
pCh™
->
sdbg
->
sour˚
 [0]ıCh™->
pRxDemod
;

1925 
pCh™
->
sdbg
->
sour˚
 [1]ıCh™->
pRxBa£
;

1926 
pCh™
->
sdbg
->
åa˚
 [2]=
RX_NOISE_TRIG
;

1927 
pCh™
->
sdbg
->
sour˚
 [3]ıCh™->
pRxLsd
;

1928 
pCh™
->
sdbg
->
sour˚
 [4]ıCh™->
pRxLsdCí
;

1929 
pCh™
->
sdbg
->
sour˚
 [5]ıCh™->
pRxDcTøck
;

1930 
pCh™
->
sdbg
->
åa˚
 [6]=
RX_LSD_CLK
;

1931 
pCh™
->
sdbg
->
åa˚
 [7]=
RX_LSD_DAT
;

1932 
pCh™
->
sdbg
->
åa˚
 [8]=
RX_LSD_ERR
;

1933 
pCh™
->
sdbg
->
åa˚
 [9]=
RX_LSD_SYNC
;

1934 
pCh™
->
sdbg
->
åa˚
 [10]=
RX_SMODE
;

1935 
pCh™
->
sdbg
->
åa˚
 [11]=
TX_PTT_IN
;

1936 
pCh™
->
sdbg
->
åa˚
 [12]=
TX_PTT_OUT
;

1937 
pCh™
->
sdbg
->
åa˚
 [13]=
TX_LSD_CLK
;

1938 
pCh™
->
sdbg
->
åa˚
 [14]=
TX_LSD_DAT
;

1941 
pCh™
->
sdbg
->
sour˚
 [15]ıCh™->
pTxLsdLpf
;

1943 if(
pCh™
->
åa˚ty≥
==5)

1945 
pCh™
->
sdbg
->
sour˚
 [0]ıCh™->
pRxBa£
;

1946 
pCh™
->
sdbg
->
åa˚
 [1]=
RX_NOISE_TRIG
;

1947 
pCh™
->
sdbg
->
sour˚
 [2]ıCh™->
pRxDcTøck
;

1948 
pCh™
->
sdbg
->
åa˚
 [3]=
RX_LSD_SYNC
;

1949 
pCh™
->
sdbg
->
åa˚
 [4]=
RX_SMODE
;

1950 
pCh™
->
sdbg
->
åa˚
 [5]=
TX_PTT_IN
;

1951 
pCh™
->
sdbg
->
åa˚
 [6]=
TX_PTT_OUT
;

1952 
pCh™
->
sdbg
->
sour˚
 [7]ıCh™->
pTxLsdLpf
;

1954 if(
pCh™
->
åa˚ty≥
==6)

1957 
pCh™
->
sdbg
->
sour˚
 [0]ıCh™->
pRxDemod
;

1958 
pCh™
->
sdbg
->
sour˚
 [5]ıCh™->
pTxBa£
;

1959 
pCh™
->
sdbg
->
åa˚
 [6]=
TX_DEDRIFT_LEAD
;

1960 
pCh™
->
sdbg
->
åa˚
 [7]=
TX_DEDRIFT_ERR
;

1961 
pCh™
->
sdbg
->
åa˚
 [8]=
TX_DEDRIFT_FACTOR
;

1962 
pCh™
->
sdbg
->
åa˚
 [9]=
TX_DEDRIFT_DRIFT
;

1964 if(
pCh™
->
åa˚ty≥
==7)

1967 
pCh™
->
sdbg
->
sour˚
 [0]ıCh™->
pRxBa£
;

1968 
pCh™
->
sdbg
->
åa˚
 [1]=
RX_NOISE_TRIG
;

1969 
pCh™
->
sdbg
->
sour˚
 [2]ıCh™->
pRxLsd
;

1970 
pCh™
->
sdbg
->
åa˚
 [3]=
RX_CTCSS_DECODE
;

1971 
pCh™
->
sdbg
->
sour˚
 [4]ıCh™->
pRxHpf
;

1973 
pCh™
->
sdbg
->
åa˚
 [5]=
TX_PTT_IN
;

1974 
pCh™
->
sdbg
->
åa˚
 [6]=
TX_PTT_OUT
;

1976 
pCh™
->
sdbg
->
sour˚
 [7]ıCh™->
pTxBa£
;

1977 
pCh™
->
sdbg
->
sour˚
 [8]ıCh™->
pTxHpf
;

1978 
pCh™
->
sdbg
->
sour˚
 [9]ıCh™->
pTxPªEmp
;

1979 
pCh™
->
sdbg
->
sour˚
 [10]ıCh™->
pTxLimôî
;

1980 
pCh™
->
sdbg
->
sour˚
 [11]ıCh™->
pTxComposôe
;

1981 
pCh™
->
sdbg
->
sour˚
 [12]ıCh™->
pTxLsdLpf
;

1984 
i
=0;i<
XPMR_DEBUG_CHANS
;i++){

1985 if(
pCh™
->
sdbg
->
åa˚
[
i
]>=0ÌCh™->sdbg->
poöt
[pChan->sdbg->trace[i]]=i;

1987 
pCh™
->
sdbg
->
mode
=1;

1990 #ifde‡
XPMRX_H


1992 
pSps
=
pCh™
->
•sLsdGí
=
	`¸óãPmrSps
(pChan);

1993 
pSps
->
sour˚
=
NULL
;

1994 
pSps
->
sök
=
pCh™
->
pTxLsd
;

1995 
pSps
->
numCh™Out
=1;

1996 
pSps
->
£lCh™Out
=0;

1997 
pSps
->
sigProc
=
LsdGí
;

1998 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esTx
;

1999 
pSps
->
ouçutGaö
=(.49*
M_Q8
);

2000 
pSps
->
›ti⁄
=0;

2001 
pSps
->
öãΩﬁ©e
=1;

2002 
pSps
->
decim©e
=1;

2003 
pSps
->
íabÀd
=0;

2007 
pSps
=
pCh™
->
•sSigGí1
=
	`¸óãPmrSps
(pChan);

2008 
pSps
->
sök
=
pCh™
->
pSigGí1
;

2009 
pSps
->
numCh™Out
=1;

2010 
pSps
->
£lCh™Out
=0;

2011 
pSps
->
sigProc
=
SigGí
;

2012 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esTx
;

2013 
pSps
->
ßm∂eR©e
=
SAMPLE_RATE_NETWORK
;

2014 
pSps
->
‰eq
=10000;

2015 
pSps
->
ouçutGaö
=(.25*
M_Q8
);

2016 
pSps
->
›ti⁄
=0;

2017 
pSps
->
öãΩﬁ©e
=1;

2018 
pSps
->
decim©e
=1;

2019 
pSps
->
íabÀd
=0;

2023 
pSps
 = 
pCh™
->
•sSigGí0
 = 
	`¸óãPmrSps
(pChan);

2024 
pSps
->
sök
=
pCh™
->
pTxLsd
;

2025 
pSps
->
sigProc
=
SigGí
;

2026 
pSps
->
numCh™Out
=1;

2027 
pSps
->
£lCh™Out
=0;

2028 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esTx
;

2029 
pSps
->
ßm∂eR©e
=
SAMPLE_RATE_NETWORK
;

2030 
pSps
->
‰eq
=1000;

2031 
pSps
->
ouçutGaö
=(0.5*
M_Q8
);

2032 
pSps
->
›ti⁄
=0;

2033 
pSps
->
öãΩﬁ©e
=1;

2034 
pSps
->
decim©e
=1;

2035 
pSps
->
íabÀd
=0;

2038 
pSps
=
pCh™
->
•sTxLsdLpf
=
	`¸óãPmrSps
(pChan);

2039 
pSps
->
sour˚
=
pCh™
->
pTxLsd
;

2040 
pSps
->
sök
=
pCh™
->
pTxLsdLpf
;

2041 
pSps
->
sigProc
=
pmr_gp_fú
;

2042 
pSps
->
íabÀd
=0;

2043 
pSps
->
numCh™Out
=1;

2044 
pSps
->
£lCh™Out
=0;

2045 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esTx
;

2046 
pSps
->
decim©‹
ıSps->
decim©e
=1;

2047 
pSps
->
öãΩﬁ©e
=1;

2048 
pSps
->
öputGaö
=(1*
M_Q8
);

2049 
pSps
->
ouçutGaö
=(1*
M_Q8
);

2052 
pSps
->
nc€f
=
èps_fú_Õf_215_9_88
;

2053 
pSps
->
size_c€f
=2;

2054 
pSps
->
c€f
=(*)
c€f_fú_Õf_215_9_88
;

2055 
pSps
->
nx
=
èps_fú_Õf_215_9_88
;

2056 
pSps
->
size_x
=2;

2057 
pSps
->
x
=(*)(
	`ˇŒoc
’Sps->
nx
,pSps->
size_x
));

2058 
pSps
->
ˇlcAdju°
=
gaö_fú_Õf_215_9_88
;

2060 
pSps
->
öputGaö
=(1*
M_Q8
);

2061 
pSps
->
ouçutGaö
=(1*
M_Q8
);

2063 
	`TRACEF
(1,("spsTxLsdLpf = sps \n"));

2065 if(
pSps
==
NULL
)
	`¥ötf
("Error: calloc(), createPmrChannel()\n");

2069 
	`TRACEF
(1,("createÑx\n"));

2070 
pSps
 = 
NULL
;

2073 
pSps
=
pCh™
->
•sRx
=
	`¸óãPmrSps
(pChan);

2074 
pSps
->
sour˚
=
NULL
;

2075 
pSps
->
sök
=
pCh™
->
pRxBa£
;

2076 
pSps
->
sigProc
=
pmr_rx_‰⁄ãnd
;

2077 
pSps
->
íabÀd
=1;

2078 
pSps
->
decim©‹
ıSps->
decim©e
=6;

2079 
pSps
->
öãΩﬁ©e
=pSps->interpolate=1;

2080 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esRx
;

2081 
pSps
->
nc€f
=
èps_fú_bpf_noi£_1
;

2082 
pSps
->
size_c€f
=2;

2083 
pSps
->
c€f
=(*)
c€f_fú_Õf_3K_1
;

2084 
pSps
->
nx
=
èps_fú_bpf_noi£_1
;

2085 
pSps
->
size_x
=2;

2086 
pSps
->
x
=(*)(
	`ˇŒoc
’Sps->
nx
,pSps->
size_c€f
));

2087 
pSps
->
ˇlcAdju°
=(
gaö_fú_Õf_3K_1
*256)/0x0100;

2088 
pSps
->
ouçutGaö
=(1.0*
M_Q8
);

2089 
pSps
->
discÁ˘‹
=2;

2090 
pSps
->
hy°
=
pCh™
->
rxC¨rõrHy°
;

2091 
pSps
->
£çt
=
pCh™
->
rxC¨rõrPoöt
;

2092 
pCh™
->
¥xSquñchAdju°
=&
pSps
->
£çt
;

2093 #i‡
XPMR_DEBUG0
 == 1

2094 
pSps
->
debugBuff0
=
pCh™
->
pRxDemod
;

2095 
pSps
->
debugBuff1
=
pCh™
->
pRxNoi£
;

2096 
pSps
->
debugBuff2
=
pCh™
->
¥xDebug0
;

2102 
pSps
=
pCh™
->
•sRxLsd
ıSps->
√xtSps
=
	`¸óãPmrSps
(pChan);

2103 
pSps
->
sour˚
=
pCh™
->
pRxBa£
;

2104 
pSps
->
sök
=
pCh™
->
pRxLsd
;

2105 
pSps
->
sigProc
=
pmr_gp_fú
;

2106 
pSps
->
íabÀd
=1;

2107 
pSps
->
numCh™Out
=1;

2108 
pSps
->
£lCh™Out
=0;

2109 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esRx
;

2110 
pSps
->
decim©‹
ıSps->
decim©e
=1;

2111 
pSps
->
öãΩﬁ©e
=1;

2114 
pSps
->
nc€f
=
èps_fú_Õf_215_9_88
;

2115 
pSps
->
size_c€f
=2;

2116 
pSps
->
c€f
=(*)
c€f_fú_Õf_215_9_88
;

2117 
pSps
->
nx
=
èps_fú_Õf_215_9_88
;

2118 
pSps
->
size_x
=2;

2119 
pSps
->
x
=(*)(
	`ˇŒoc
’Sps->
nx
,pSps->
size_x
));

2120 
pSps
->
ˇlcAdju°
=
gaö_fú_Õf_215_9_88
;

2122 
pSps
->
öputGaö
=(1*
M_Q8
);

2123 
pSps
->
ouçutGaö
=(1*
M_Q8
);

2124 
pCh™
->
¥xCtcssMósuª
=
pSps
->
sök
;

2125 
pCh™
->
¥xCtcssAdju°
=&(
pSps
->
ouçutGaö
);

2128 
pSps
=
pCh™
->
•sRxLsdNrz
ıSps->
√xtSps
=
	`¸óãPmrSps
(pChan);

2129 
pSps
->
sour˚
=
pCh™
->
pRxLsd
;

2130 
pSps
->
sök
=
pCh™
->
pRxDcTøck
;

2131 
pSps
->
buff
=
pCh™
->
pRxLsdLimô
;

2132 
pSps
->
sigProc
=
CíãrSli˚r
;

2133 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esRx
;

2134 
pSps
->
discÁ˘‹
=
LSD_DFS
;

2135 
pSps
->
öputGaö
=(1*
M_Q8
);

2136 
pSps
->
ouçutGaö
=(1*
M_Q8
);

2137 
pSps
->
£çt
=4900;

2138 
pSps
->
öputGaöB
=625;

2139 
pSps
->
íabÀd
=0;

2143 
pSps
ıSps->
√xtSps
=
	`¸óãPmrSps
(
pCh™
);

2144 
pCh™
->
•sRxHpf
=
pSps
;

2145 
pSps
->
sour˚
=
pCh™
->
pRxBa£
;

2146 
pSps
->
sök
=
pCh™
->
pRxHpf
;

2147 
pSps
->
sigProc
=
pmr_gp_fú
;

2148 
pSps
->
íabÀd
=1;

2149 
pSps
->
numCh™Out
=1;

2150 
pSps
->
£lCh™Out
=0;

2151 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esRx
;

2152 
pSps
->
decim©‹
ıSps->
decim©e
=1;

2153 
pSps
->
öãΩﬁ©e
=1;

2154 
pSps
->
nc€f
=
èps_fú_hpf_300_9_66
;

2155 
pSps
->
size_c€f
=2;

2156 
pSps
->
c€f
=(*)
c€f_fú_hpf_300_9_66
;

2157 
pSps
->
nx
=
èps_fú_hpf_300_9_66
;

2158 
pSps
->
size_x
=2;

2159 
pSps
->
x
=(*)(
	`ˇŒoc
’Sps->
nx
,pSps->
size_x
));

2160 if(
pSps
==
NULL
)
	`¥ötf
("Error: calloc(), createPmrChannel()\n");

2161 
pSps
->
ˇlcAdju°
=
gaö_fú_hpf_300_9_66
;

2162 
pSps
->
öputGaö
=(1*
M_Q8
);

2163 
pSps
->
ouçutGaö
=(1*
M_Q8
);

2164 
pCh™
->
¥xVoi˚Adju°
=&(
pSps
->
ouçutGaö
);

2165 
pCh™
->
•sRxOut
=
pSps
;

2169 if(
pCh™
->
rxDeEmpE«bÀ
){

2170 
pSps
ıSps->
√xtSps
=
	`¸óãPmrSps
(
pCh™
);

2171 
pCh™
->
•sRxDeEmp
=
pSps
;

2172 
pSps
->
sour˚
=
pCh™
->
pRxHpf
;

2173 
pSps
->
sök
=
pCh™
->
pRxS≥akî
;

2174 
pCh™
->
•sRxOut
=
pSps
;

2175 
pSps
->
sigProc
=
gp_öã_00
;

2176 
pSps
->
íabÀd
=1;

2177 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esRx
;

2179 
pSps
->
nc€f
=
èps_öt_Õf_300_1_2
;

2180 
pSps
->
size_c€f
=2;

2181 
pSps
->
c€f
=(*)
c€f_öt_Õf_300_1_2
;

2183 
pSps
->
nx
=
èps_öt_Õf_300_1_2
;

2184 
pSps
->
size_x
=4;

2185 
pSps
->
x
=(*)(
	`ˇŒoc
’Sps->
nx
,pSps->
size_x
));

2186 if(
pSps
==
NULL
)
	`¥ötf
("Error: calloc(), createPmrChannel()\n");

2187 
pSps
->
ˇlcAdju°
=
gaö_öt_Õf_300_1_2
/2;

2188 
pSps
->
öputGaö
=(1.0*
M_Q8
);

2189 
pSps
->
ouçutGaö
=(1.0*
M_Q8
);

2190 
pCh™
->
¥xVoi˚Mósuª
=
pSps
->
sök
;

2191 
pCh™
->
¥xVoi˚Adju°
=&(
pSps
->
ouçutGaö
);

2194 if(
pCh™
->
rxSquñchDñay
>
RXSQDELAYBUFSIZE
/8-1)

2196 
pCh™
->
rxSquñchDñay
=
RXSQDELAYBUFSIZE
/8-1;

2198 if(
pCh™
->
rxSquñchDñay
>0)

2200 
	`TRACEF
(1,("createÑx squelch delay\n"));

2201 
pSps
=
pCh™
->
•sDñayLöe
ıSps->
√xtSps
=
	`¸óãPmrSps
(pChan);

2202 
pCh™
->
•sRxSquñchDñay
=
pSps
;

2203 
pSps
->
sigProc
=
DñayLöe
;

2204 
pSps
->
sour˚
=
pCh™
->
pRxS≥akî
;

2205 
pSps
->
sök
=
pCh™
->
pRxS≥akî
;

2206 
pCh™
->
•sRxOut
=
pSps
;

2207 
pSps
->
íabÀd
=1;

2208 
pSps
->
b
.
outzîo
=0;

2209 
pSps
->
öputGaö
=1*
M_Q8
;

2210 
pSps
->
ouçutGaö
=1*
M_Q8
;

2211 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esRx
;

2212 
pSps
->
buffSize
=
RXSQDELAYBUFSIZE
;

2213 
pSps
->
buff
=
	`ˇŒoc
(
RXSQDELAYBUFSIZE
,2);

2214 
pSps
->
buffLód
 = 
pCh™
->
rxSquñchDñay
*8;

2215 
pSps
->
buffInIndex
=0;

2216 
pSps
->
buffOutIndex
=0;

2219 if(
pCh™
->
rxCdTy≥
==
CD_XPMR_VOX
)

2221 
	`TRACEF
(1,("create vox measureblock\n"));

2222 
pCh™
->
¥xVoxMós
=
	`ˇŒoc
’Ch™->
nSam∂esRx
,2);

2224 
pSps
=
pCh™
->
•sRxVox
ıSps->
√xtSps
=
	`¸óãPmrSps
(pChan);

2225 
pSps
->
sigProc
=
MósuªBlock
;

2226 
pSps
->
∑ª¡Ch™
=
pCh™
;

2227 
pSps
->
sour˚
=
pCh™
->
pRxBa£
;

2228 
pSps
->
sök
=
pCh™
->
¥xVoxMós
;

2229 
pSps
->
öputGaö
=1*
M_Q8
;

2230 
pSps
->
ouçutGaö
=1*
M_Q8
;

2231 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esRx
;

2232 
pSps
->
discÁ˘‹
=3;

2233 if(
pCh™
->
rxSqVoxAdj
==0)

2234 
pSps
->
£çt
=(0.011*
M_Q15
);

2236 
pSps
->
£çt
=(
pCh™
->
rxSqVoxAdj
);

2237 
pSps
->
hy°
=’Sps->
£çt
/10);

2238 
pSps
->
íabÀd
=1;

2242 
pSps
=
pCh™
->
•sMósuª
ıSps->
√xtSps
=
	`¸óãPmrSps
(pChan);

2243 
pSps
->
sour˚
=
pCh™
->
•sRx
->
sök
;

2244 
pSps
->
sök
=
pCh™
->
¥xMósuª
;

2245 
pSps
->
sigProc
=
MósuªBlock
;

2246 
pSps
->
íabÀd
=0;

2247 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esRx
;

2248 
pSps
->
discÁ˘‹
=10;

2250 
pSps
->
√xtSps
=
NULL
;

2254 
	`TRACEF
(1,("createÅx\n"));

2255 
öputTmp
=
NULL
;

2256 
pSps
 = 
NULL
;

2261 if(
pCh™
->
txHpfE«bÀ
)

2263 
pSps
=
	`¸óãPmrSps
(
pCh™
);

2264 
pCh™
->
•sTx
=
pSps
;

2265 
pSps
->
sour˚
=
pCh™
->
pTxBa£
;

2266 
pSps
->
sök
=
pCh™
->
pTxHpf
;

2267 
pSps
->
sigProc
=
pmr_gp_fú
;

2268 
pSps
->
íabÀd
=1;

2269 
pSps
->
numCh™Out
=1;

2270 
pSps
->
£lCh™Out
=0;

2271 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esTx
;

2272 
pSps
->
decim©‹
ıSps->
decim©e
=1;

2273 
pSps
->
öãΩﬁ©e
=1;

2274 
pSps
->
nc€f
=
èps_fú_hpf_300_9_66
;

2275 
pSps
->
size_c€f
=2;

2276 
pSps
->
c€f
=(*)
c€f_fú_hpf_300_9_66
;

2277 
pSps
->
nx
=
èps_fú_hpf_300_9_66
;

2278 
pSps
->
size_x
=2;

2279 
pSps
->
x
=(*)(
	`ˇŒoc
’Sps->
nx
,pSps->
size_x
));

2280 if(
pSps
==
NULL
)
	`¥ötf
("Error: calloc(), createPmrChannel()\n");

2281 
pSps
->
ˇlcAdju°
=
gaö_fú_hpf_300_9_66
;

2282 
pSps
->
öputGaö
=(1*
M_Q8
);

2283 
pSps
->
ouçutGaö
=(1*
M_Q8
);

2284 
öputTmp
=
pCh™
->
pTxHpf
;

2288 if(
pCh™
->
txPªEmpE«bÀ
)

2290 if(
pSps
==
NULL
ËpSps=
pCh™
->
•sTx
=
	`¸óãPmrSps
(pChan);

2291 
pSps
ıSps->
√xtSps
=
	`¸óãPmrSps
(
pCh™
);

2293 
pSps
->
sour˚
=
öputTmp
;

2294 
pSps
->
sök
=
pCh™
->
pTxPªEmp
;

2296 
pSps
->
sigProc
=
gp_diff
;

2297 
pSps
->
íabÀd
=1;

2298 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esTx
;

2300 
pSps
->
nc€f
=
èps_öt_hpf_4000_1_2
;

2301 
pSps
->
size_c€f
=2;

2302 
pSps
->
c€f
=(*)
c€f_öt_hpf_4000_1_2
;

2304 
pSps
->
nx
=
èps_öt_hpf_4000_1_2
;

2305 
pSps
->
size_x
=2;

2306 
pSps
->
x
=(*)(
	`ˇŒoc
’Sps->
nx
,pSps->
size_x
));

2307 if(
pSps
==
NULL
)
	`¥ötf
("Error: calloc(), createPmrChannel()\n");

2309 
pSps
->
ˇlcAdju°
=
gaö_öt_hpf_4000_1_2
;

2310 
pSps
->
öputGaö
=(1*
M_Q8
);

2311 
pSps
->
ouçutGaö
=(1*
M_Q8
);

2312 
öputTmp
=
pSps
->
sök
;

2316 if(
pCh™
->
txLimôîE«bÀ
)

2318 if(
pSps
==
NULL
ËpSps=
pCh™
->
•sTx
=
	`¸óãPmrSps
(pChan);

2319 
pSps
ıSps->
√xtSps
=
	`¸óãPmrSps
(
pCh™
);

2320 
pSps
->
sour˚
=
öputTmp
;

2321 
pSps
->
sök
=
pCh™
->
pTxLimôî
;

2322 
pSps
->
sigProc
=
So·Limôî
;

2323 
pSps
->
íabÀd
=1;

2324 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esTx
;

2325 
pSps
->
öputGaö
=(1*
M_Q8
);

2326 
pSps
->
ouçutGaö
=(1*
M_Q8
);

2327 
pSps
->
£çt
=12000;

2328 
öputTmp
=
pSps
->
sök
;

2332 if((
pCh™
->
txMixA
==
TX_OUT_COMPOSITE
)||’Ch™->
txMixB
==TX_OUT_COMPOSITE))

2334 if(
pSps
==
NULL
)

2335 
pSps
=
pCh™
->
•sTx
=
	`¸óãPmrSps
(pChan);

2337 
pSps
ıSps->
√xtSps
=
	`¸óãPmrSps
(
pCh™
);

2338 
pSps
->
sour˚
=
öputTmp
;

2339 
pSps
->
sour˚B
=
pCh™
->
pTxLsdLpf
;

2340 
pSps
->
sök
=
pCh™
->
pTxComposôe
;

2341 
pSps
->
sigProc
=
pmrMixî
;

2342 
pSps
->
íabÀd
=1;

2343 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esTx
;

2344 
pSps
->
öputGaö
=2*
M_Q8
;

2345 
pSps
->
öputGaöB
=1*
M_Q8
/8;

2346 
pSps
->
ouçutGaö
=1*
M_Q8
;

2347 
pSps
->
£çt
=0;

2348 
öputTmp
=
pSps
->
sök
;

2349 
pCh™
->
±xCtcssAdju°
=&
pSps
->
öputGaöB
;

2353 i‡(
pCh™
->
b
.
txboo°
)

2355 if(
pSps
==
NULL
)

2356 
pSps
=
pCh™
->
•sTx
=
	`¸óãPmrSps
(pChan);

2358 
pSps
ıSps->
√xtSps
=
	`¸óãPmrSps
(
pCh™
);

2359 
pSps
->
sour˚
=
öputTmp
;

2360 
pSps
->
sour˚B
=
NULL
;

2361 
pSps
->
sök
=
pCh™
->
pTxComposôe
;

2362 
pSps
->
sigProc
=
pmrMixî
;

2363 
pSps
->
íabÀd
=1;

2364 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esTx
;

2365 
pSps
->
öputGaö
=2*
M_Q8
;

2366 
pSps
->
öputGaöB
=0;

2367 
pSps
->
ouçutGaö
=1*
M_Q8
;

2368 
pSps
->
£çt
=0;

2369 
öputTmp
=
pSps
->
sök
;

2374 if(
pSps
==
NULL
ËpSps=
pCh™
->
•sTx
=
	`¸óãPmrSps
(pChan);

2375 
pSps
ıSps->
√xtSps
=
	`¸óãPmrSps
(
pCh™
);

2377 
pCh™
->
•sTxOutA
=
pSps
;

2378 if(!
pCh™
->
•sTx
ÌCh™->•sTx=
pSps
;

2380 if(
pCh™
->
txMixA
==
TX_OUT_COMPOSITE
)

2382 
pSps
->
sour˚
=
pCh™
->
pTxComposôe
;

2384 if(
pCh™
->
txMixA
==
TX_OUT_LSD
)

2386 
pSps
->
sour˚
=
pCh™
->
pTxLsdLpf
;

2388 if(
pCh™
->
txMixA
==
TX_OUT_VOICE
)

2390 
pSps
->
sour˚
=
öputTmp
;

2392 i‡(
pCh™
->
txMixA
==
TX_OUT_AUX
)

2394 
pSps
->
sour˚
=
pCh™
->
pTxHpf
;

2398 
pSps
->
sour˚
=
NULL
;

2399 
pSps
->
sour˚
=
öputTmp
;

2402 
pSps
->
sök
=
pCh™
->
pTxOut
;

2403 
pSps
->
sigProc
=
pmr_gp_fú
;

2404 
pSps
->
íabÀd
=1;

2405 
pSps
->
numCh™Out
=2;

2406 
pSps
->
£lCh™Out
=0;

2407 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esTx
;

2408 #ifdef 
XPMR_VOTER


2409 
pSps
->
öãΩﬁ©e
=1;

2410 
pSps
->
nc€f
=
èps_fú_Õf_3K_2
;

2411 
pSps
->
size_c€f
=2;

2412 
pSps
->
c€f
=(*)
c€f_fú_Õf_3K_2
;

2413 
pSps
->
nx
=
èps_fú_Õf_3K_2
;

2414 
pSps
->
ˇlcAdju°
=
gaö_fú_Õf_3K_2
;

2416 
pSps
->
öãΩﬁ©e
=6;

2417 
pSps
->
nc€f
=
èps_fú_Õf_3K_1
;

2418 
pSps
->
size_c€f
=2;

2419 
pSps
->
c€f
=(*)
c€f_fú_Õf_3K_1
;

2420 
pSps
->
nx
=
èps_fú_Õf_3K_1
;

2421 
pSps
->
ˇlcAdju°
=
gaö_fú_Õf_3K_1
;

2423 
pSps
->
size_x
=2;

2424 
pSps
->
x
=(*)(
	`ˇŒoc
’Sps->
nx
,pSps->
size_x
));

2425 if(
pSps
==
NULL
)
	`¥ötf
("Error: calloc(), createPmrChannel()\n");

2426 
pSps
->
öputGaö
=(1*
M_Q8
);

2427 
pSps
->
ouçutGaö
=(1*
M_Q8
);

2428 if(
pCh™
->
txMixA
=ıCh™->
txMixB
)
pSps
->
m⁄oOut
=1;

2429 
pSps
->
m⁄oOut
=0;

2433 if((
pCh™
->
txMixA
!ıCh™->
txMixB
)&&’Ch™->txMixB!=
TX_OUT_OFF
))

2435 if(
pSps
==
NULL
ËpSps=
pCh™
->
•sTx
=
	`¸óãPmrSps
(pChan);

2436 
pSps
ıSps->
√xtSps
=
	`¸óãPmrSps
(
pCh™
);

2438 
pCh™
->
•sTxOutB
=
pSps
;

2439 if(
pCh™
->
txMixB
==
TX_OUT_COMPOSITE
)

2441 
pSps
->
sour˚
=
pCh™
->
pTxComposôe
;

2443 if(
pCh™
->
txMixB
==
TX_OUT_LSD
)

2445 
pSps
->
sour˚
=
pCh™
->
pTxLsdLpf
;

2448 if(
pCh™
->
txMixB
==
TX_OUT_VOICE
)

2450 
pSps
->
sour˚
=
öputTmp
;

2452 if(
pCh™
->
txMixB
==
TX_OUT_AUX
)

2454 
pSps
->
sour˚
=
pCh™
->
pTxHpf
;

2458 
pSps
->
sour˚
=
NULL
;

2461 
pSps
->
sök
=
pCh™
->
pTxOut
;

2462 
pSps
->
sigProc
=
pmr_gp_fú
;

2463 
pSps
->
íabÀd
=1;

2464 
pSps
->
numCh™Out
=2;

2465 
pSps
->
£lCh™Out
=1;

2466 
pSps
->
mixOut
=0;

2467 
pSps
->
nSam∂es
=
pCh™
->
nSam∂esTx
;

2468 #ifdef 
XPMR_VOTER


2469 
pSps
->
öãΩﬁ©e
=1;

2470 
pSps
->
nc€f
=
èps_fú_Õf_3K_2
;

2471 
pSps
->
size_c€f
=2;

2472 
pSps
->
c€f
=(*)
c€f_fú_Õf_3K_2
;

2473 
pSps
->
nx
=
èps_fú_Õf_3K_2
;

2474 
pSps
->
ˇlcAdju°
=(
gaö_fú_Õf_3K_2
);

2476 
pSps
->
öãΩﬁ©e
=6;

2477 
pSps
->
nc€f
=
èps_fú_Õf_3K_1
;

2478 
pSps
->
size_c€f
=2;

2479 
pSps
->
c€f
=(*)
c€f_fú_Õf_3K_1
;

2480 
pSps
->
nx
=
èps_fú_Õf_3K_1
;

2481 
pSps
->
ˇlcAdju°
=(
gaö_fú_Õf_3K_1
);

2483 
pSps
->
size_x
=2;

2484 
pSps
->
x
=(*)(
	`ˇŒoc
’Sps->
nx
,pSps->
size_x
));

2485 if(
pSps
==
NULL
)
	`¥ötf
("Error: calloc(), createPmrChannel()\n");

2486 
pSps
->
öputGaö
=(1*
M_Q8
);

2487 
pSps
->
ouçutGaö
=(1*
M_Q8
);

2490 
pSps
->
√xtSps
=
NULL
;

2493 
	`code_°rög_∑r£
(
pCh™
);

2495 
pCh™
->
smode
=
SMODE_NULL
;

2496 
pCh™
->
smodewas
=
SMODE_NULL
;

2497 
pCh™
->
smodëime
=2500;

2498 
pCh™
->
smodëimî
=0;

2499 
pCh™
->
b
.
smodëu∫off
=0;

2501 
pCh™
->
tx£âÀtimî
=0;

2502 
pCh™
->
txrxbœnkögtimî
=0;

2504 
	`TRACEF
(1,("createPmrChannel()Énd\n"));

2506  
pCh™
;

2507 
	}
}

2510 
i16
 
	$de°royPmrCh™√l
(
t_pmr_ch™
 *
pCh™
)

2512 
t_pmr_•s
 *
pmr_•s
, *
tmp_•s
;

2514 
	`TRACEF
(1,("destroyPmrChannel()\n"));

2516 
	`‰ì
(
pCh™
->
pRxDemod
);

2517 
	`‰ì
(
pCh™
->
pRxNoi£
);

2518 
	`‰ì
(
pCh™
->
pRxBa£
);

2519 
	`‰ì
(
pCh™
->
pRxHpf
);

2520 
	`‰ì
(
pCh™
->
pRxLsd
);

2521 
	`‰ì
(
pCh™
->
pRxS≥akî
);

2522 
	`‰ì
(
pCh™
->
pRxDcTøck
);

2523 if(
pCh™
->
pRxLsdLimô
)
	`‰ì
(pChan->pRxLsdLimit);

2524 
	`‰ì
(
pCh™
->
pTxBa£
);

2525 
	`‰ì
(
pCh™
->
pTxHpf
);

2526 
	`‰ì
(
pCh™
->
pTxPªEmp
);

2527 
	`‰ì
(
pCh™
->
pTxLimôî
);

2528 
	`‰ì
(
pCh™
->
pTxLsd
);

2529 
	`‰ì
(
pCh™
->
pTxLsdLpf
);

2530 if(
pCh™
->
pTxComposôe
)
	`‰ì
(pChan->pTxComposite);

2531 
	`‰ì
(
pCh™
->
pTxOut
);

2533 if(
pCh™
->
¥xMósuª
)
	`‰ì
(pChan->prxMeasure);

2534 if(
pCh™
->
pSigGí0
)
	`‰ì
(pChan->pSigGen0);

2535 if(
pCh™
->
pSigGí1
)
	`‰ì
(pChan->pSigGen1);

2538 #i‡
XPMR_DEBUG0
 == 1

2540 if(
pCh™
->
±xDebug
)
	`‰ì
(pChan->ptxDebug);

2541 
	`‰ì
(
pCh™
->
¥xDebug0
);

2542 
	`‰ì
(
pCh™
->
¥xDebug1
);

2543 
	`‰ì
(
pCh™
->
¥xDebug2
);

2544 
	`‰ì
(
pCh™
->
¥xDebug3
);

2546 
	`‰ì
(
pCh™
->
±xDebug0
);

2547 
	`‰ì
(
pCh™
->
±xDebug1
);

2548 
	`‰ì
(
pCh™
->
±xDebug2
);

2549 
	`‰ì
(
pCh™
->
±xDebug3
);

2551 
	`‰ì
(
pCh™
->
rxCtcss
->
pDebug0
);

2552 
	`‰ì
(
pCh™
->
rxCtcss
->
pDebug1
);

2554 
i16
 
i
;

2555 
i
=0;i<
CTCSS_NUM_CODES
;i++)

2557 
	`‰ì
(
pCh™
->
rxCtcss
->
tdë
[
i
].
pDebug0
);

2558 
	`‰ì
(
pCh™
->
rxCtcss
->
tdë
[
i
].
pDebug1
);

2559 
	`‰ì
(
pCh™
->
rxCtcss
->
tdë
[
i
].
pDebug2
);

2560 
	`‰ì
(
pCh™
->
rxCtcss
->
tdë
[
i
].
pDebug3
);

2564 
pCh™
->
dd
.
›ti⁄
=8;

2565 
	`dedri·
(
pCh™
);

2567 
	`‰ì
(
pCh™
->
pRxCtcss
);

2569 
pmr_•s
=
pCh™
->
•sRx
;

2571 if(
pCh™
->
sdbg
)
	`‰ì
(pChan->sdbg);

2573 
pmr_•s
)

2575 
tmp_•s
 = 
pmr_•s
;

2576 
pmr_•s
 = 
tmp_•s
->
√xtSps
;

2577 
	`de°royPmrSps
(
tmp_•s
);

2580 
	`‰ì
(
pCh™
);

2583 
	}
}

2586 
t_pmr_•s
 *
	$¸óãPmrSps
(
t_pmr_ch™
 *
pCh™
)

2588 
t_pmr_•s
 *
pSps
;

2590 
	`TRACEF
(1,("createPmrSps()\n"));

2592 
pSps
 = (
t_pmr_•s
 *)
	`ˇŒoc
((t_pmr_sps),1);

2594 if(!
pSps
)
	`¥ötf
("Error: createPmrSps()\n");

2596 
pSps
->
∑ª¡Ch™
=
pCh™
;

2597 
pSps
->
ödex
=
pCh™
->
•sIndex
++;

2601  
pSps
;

2602 
	}
}

2605 
i16
 
	$de°royPmrSps
(
t_pmr_•s
 *
pSps
)

2607 
	`TRACEJ
(1,("de°royPmrSps(%i)\n",
pSps
->
ödex
));

2609 if(
pSps
->
x
!=
NULL
)
	`‰ì
(pSps->x);

2610 
	`‰ì
(
pSps
);

2612 
	}
}

2616 
i16
 
	$PmrTx
(
t_pmr_ch™
 *
pCh™
, 
i16
 *
öput
)

2618 
pCh™
->
‰ameCou¡Tx
++;

2620 
	`TRACEF
(5,("PmrTx(Ë°¨à%i\n",
pCh™
->
‰ameCou¡Tx
));

2622 #i‡
XPMR_PPTP
 == 99

2623 
µç_p2
^=1;

2624 if(
µç_p2
)
	`io˘l
(
µdrvdev
,
PPDRV_IOC_PINSET
,
LP_PIN02
);

2625 
	`io˘l
(
µdrvdev
,
PPDRV_IOC_PINCLEAR
,
LP_PIN02
);

2628 if(
pCh™
==
NULL
){

2629 
	`¥ötf
("PmrTx()ÖChan == NULL\n");

2633 #i‡
XPMR_DEBUG0
 == 1

2634 if(
pCh™
->
b
.
rxC≠tuª
 &&ÖCh™->
åa˚ty≥
==5)

2636 
	`mem˝y
(
pCh™
->
pTxI≈ut
,
öput
,pCh™->
nSam∂esRx
*2);

2643 
	`dedri·_wrôe
(
pCh™
,
öput
);

2646 
	}
}

2650 
i16
 
	$PmrRx
(
t_pmr_ch™
 *
pCh™
, 
i16
 *
öput
, i16 *
ouçuåx
, i16 *
ouçuâx
)

2652 
i
,
hô
;

2653 
f
=0;

2654 
t_pmr_•s
 *
pmr_•s
;

2656 
	`TRACEC
(5,("PmrRx(%∞%∞%∞%p)\n",
pCh™
, 
öput
, 
ouçuåx
, 
ouçuâx
));

2658 #i‡
XPMR_PPTP
 == 1

2659 if(
pCh™
->
b
.
ødiﬂ˘ive
)

2661 
	`µç_wrôe
(1,
pCh™
->
‰ameCou¡Rx
&0x00000001);

2665 if(
pCh™
==
NULL
){

2666 
	`¥ötf
("PmrRx()ÖChan == NULL\n");

2670 
pCh™
->
‰ameCou¡Rx
++;

2672 #i‡
XPMR_DEBUG0
 == 1

2673 if(
pCh™
->
b
.
rxC≠tuª
)

2676 if(
pCh™
->
±xDebug
)
	`mem£t
((*ÌCh™->±xDebug,0,pCh™->
nSam∂esRx
*
XPMR_DEBUG_CHANS
*2);

2677 if(
pCh™
->
sdbg
->
buf„r
)

2679 
	`mem£t
((*)
pCh™
->
sdbg
->
buf„r
,0,pCh™->
nSam∂esRx
*
XPMR_DEBUG_CHANS
*2);

2680 
pCh™
->
¥xDebug
ıCh™->
sdbg
->
buf„r
;

2685 #i‚de‡
XPMR_VOTER


2686 
pmr_•s
=
pCh™
->
•sRx
;

2687 
pmr_•s
->
sour˚
=
öput
;

2689 if(
ouçuåx
!=
NULL
)
pCh™
->
•sRxOut
->
sök
=outputrx;

2691 if(
pCh™
->
txrxbœnkögtimî
>0){

2692 
i
=0;i<
pCh™
->
nSam∂esRx
*6;i++)
öput
[i]=0;

2694 
pCh™
->
txrxbœnkögtimî
-=
MS_PER_FRAME
;

2695 if(
pCh™
->
txrxbœnkögtimî
<=0){

2696 
pCh™
->
txrxbœnkögtimî
=0;

2697 
	`TRACEC
(1,("TXRXBLANKING TIME OUT **********\n"));

2702 if(
pCh™
->
öputBœnkög
>0)

2704 
pCh™
->
öputBœnkög
-ıCh™->
nSam∂esRx
;

2705 if(
pCh™
->
öputBœnkög
<0)pChan->inputBlanking=0;

2706 
i
=0;i<
pCh™
->
nSam∂esRx
*6;i++)

2707 
öput
[
i
]=0;

2711 if–
pCh™
->
rxCpuSavî
 && !pCh™->
rxC¨rõrDëe˘
 &&

2712 
pCh™
->
smode
==
SMODE_NULL
 &&

2713 !
pCh™
->
txPâIn
 && !pCh™->
txPâOut
)

2715 if(!
pCh™
->
b
.
rxhÆãd
)

2717 if(
pCh™
->
•sRxHpf
ÌCh™->•sRxHpf->
íabÀd
=0;

2718 if(
pCh™
->
•sRxDeEmp
ÌCh™->•sRxDeEmp->
íabÀd
=0;

2719 
pCh™
->
b
.
rxhÆãd
=1;

2720 
	`TRACEC
(1,("PmrRx()Ñx sps halted\n"));

2723 if(
pCh™
->
b
.
rxhÆãd
)

2725 if(
pCh™
->
•sRxHpf
ÌCh™->•sRxHpf->
íabÀd
=1;

2726 if(
pCh™
->
•sRxDeEmp
ÌCh™->•sRxDeEmp->
íabÀd
=1;

2727 
pCh™
->
b
.
rxhÆãd
=0;

2728 
	`TRACEC
(1,("PmrRx()Ñx sps un-halted\n"));

2731 
i
=0;

2732 
pmr_•s
!=
NULL
 &&Ömr_sps!=0)

2734 
	`TRACEC
(5,("PmrRx(Ë•†%i\n",
i
++));

2735 
pmr_•s
->
	`sigProc
(pmr_sps);

2736 
pmr_•s
 = (
t_pmr_•s
 *)’mr_•s->
√xtSps
);

2740 
	#XPMR_VOX_HANGTIME
 2000

	)

2742 if(
pCh™
->
rxCdTy≥
==
CD_XPMR_VOX
)

2744 if(
pCh™
->
•sRxVox
->
compOut
)

2746 
pCh™
->
rxVoxTimî
=
XPMR_VOX_HANGTIME
;

2748 if(
pCh™
->
rxVoxTimî
>0)

2750 
pCh™
->
rxVoxTimî
-=
MS_PER_FRAME
;

2751 
pCh™
->
rxC¨rõrDëe˘
=1;

2755 
pCh™
->
rxVoxTimî
=0;

2756 
pCh™
->
rxC¨rõrDëe˘
=0;

2761 
pCh™
->
rxC¨rõrDëe˘
=!pCh™->
•sRx
->
compOut
;

2762 if(
pCh™
->
rxSquñchDñay
)

2763 
pCh™
->
•sRxSquñchDñay
->
b
.
outzîo
ıCh™->
•sRx
->
compOut
;

2767 if–
pCh™
->
b
.
˘cssRxE«bÀ
 &&

2768 –(!
pCh™
->
b
.
rxhÆãd
 ||

2769 
pCh™
->
rxCtcss
->
decode
!=
CTCSS_NULL
 ||ÖCh™->
smode
==
SMODE_CTCSS
) &&

2770 (
pCh™
->
smode
!=
SMODE_DCS
&&pCh™->smode!=
SMODE_LSD
) )

2773 
	`˘css_dëe˘
(
pCh™
);

2777 if(
pCh™
->
txPâIn
!ıCh™->
b
.
±twas
)

2779 
pCh™
->
b
.
±twas
ıCh™->
txPâIn
;

2780 
	`TRACEC
(1,("PmrRx(ËtxPâIn=%i\n",
pCh™
->
b
.
±twas
));

2784 #ifde‡
XPMRX_H


2785 
	`xpmrx
(
pCh™
,
XXO_RXDECODE
);

2788 if(
pCh™
->
smodëimî
>0 && !pCh™->
txPâIn
)

2790 
pCh™
->
smodëimî
-=
MS_PER_FRAME
;

2792 if(
pCh™
->
smodëimî
<=0)

2794 
pCh™
->
smodëimî
=0;

2795 
pCh™
->
smodewas
ıCh™->
smode
;

2796 
pCh™
->
smode
=
SMODE_NULL
;

2797 
pCh™
->
b
.
smodëu∫off
=1;

2798 
	`TRACEC
(1,("smodêtimeout. smodêwas=%i\n",
pCh™
->
smodewas
));

2802 if(
pCh™
->
rxCtcss
->
decode
 > 
CTCSS_NULL
 &&

2803 (
pCh™
->
smode
==
SMODE_NULL
||pCh™->smode==
SMODE_CTCSS
) )

2805 if(
pCh™
->
smode
!=
SMODE_CTCSS
)

2807 
	`TRACEC
(1,("smodê£t=%ò code=%i\n",
pCh™
->
smode
,pCh™->
rxCtcss
->
decode
));

2808 
pCh™
->
smode
ıCh™->
smodewas
=
SMODE_CTCSS
;

2810 
pCh™
->
smodëimî
ıCh™->
smodëime
;

2812 if(
pCh™
->
smode
==
SMODE_CTCSS
)

2814 if(
pCh™
->
rxCtcss
->
decode
 !pCh™->
œ°rxdecode
)

2816 
pCh™
->
œ°rxdecode
 =ÖCh™->
rxCtcss
->
decode
;

2817 
f
 = 0;

2818 if(
pCh™
->
rxCtcss
->
decode
>
CTCSS_NULL
)

2820 if(
pCh™
->
rxCtcssM≠
[pCh™->
rxCtcss
->
decode
]!=
CTCSS_RXONLY
)

2822 
f
=
‰eq_˘css
[
pCh™
->
rxCtcssM≠
[pCh™->
rxCtcss
->
decode
]];

2827 
f
=
pCh™
->
tx˘cssdeÁu…_vÆue
;

2829 i‡(
f
 && 
pCh™
->
•sSigGí0
->
‰eq
 != f*10)

2831 
pCh™
->
•sSigGí0
->
‰eq
=
f
*10;

2832 
pCh™
->
•sSigGí0
->
›ti⁄
=1;

2838 
pCh™
->
œ°rxdecode
 = 
CTCSS_NULL
;

2841 #ifde‡
HAVE_XPMRX


2842 
	`xpmrx
(
pCh™
,
XXO_LSDCTL
);

2849 
hô
=0;

2850 if–!(
pCh™
->
smode
==
SMODE_DCS
||pCh™->smode==
SMODE_LSD
) )

2853 if–
pCh™
->
txPâIn
 && (pCh™->
txSèã
==
CHAN_TXSTATE_IDLE
 ))

2855 
	`TRACEC
(1,("txPttIn==1 from CHAN_TXSTATE_IDLE && !SMODE_LSD. codeindex=%i %i \n",

2856 
pCh™
->
rxCtcss
->
decode
,ÖCh™->
rxCtcssM≠
[pChan->rxCtcss->decode] ));

2857 
pCh™
->
dd
.
b
.
doônow
=1;

2858 
pCh™
->
•sSigGí0
->
‰eq
=0;

2859 if(
pCh™
->
smode
==
SMODE_CTCSS
 && !pCh™->
b
.
txCtcssInhibô
)

2861 if(
pCh™
->
rxCtcss
->
decode
>
CTCSS_NULL
)

2863 if(
pCh™
->
rxCtcssM≠
[pCh™->
rxCtcss
->
decode
]!=
CTCSS_RXONLY
)

2865 
f
=
‰eq_˘css
[
pCh™
->
rxCtcssM≠
[pCh™->
rxCtcss
->
decode
]];

2870 
f
=
pCh™
->
tx˘cssdeÁu…_vÆue
;

2872 
	`TRACEC
(1,("txPâI¿- Sèπ CTCSSGí %‡\n",
f
));

2873 if(
f
)

2875 
t_pmr_•s
 *
pSps
;

2877 
pCh™
->
•sSigGí0
->
‰eq
=
f
*10;

2878 
pSps
=
pCh™
->
•sTxLsdLpf
;

2879 
pSps
->
íabÀd
=1;

2882 if(
f
>203.0)

2884 
pSps
->
nc€f
=
èps_fú_Õf_250_9_66
;

2885 
pSps
->
size_c€f
=2;

2886 
pSps
->
c€f
=(*)
c€f_fú_Õf_250_9_66
;

2887 
pSps
->
nx
=
èps_fú_Õf_250_9_66
;

2888 
pSps
->
size_x
=2;

2889 
pSps
->
x
=(*)(
	`ˇŒoc
’Sps->
nx
,pSps->
size_x
));

2890 
pSps
->
ˇlcAdju°
=
gaö_fú_Õf_250_9_66
;

2894 
pSps
->
nc€f
=
èps_fú_Õf_215_9_88
;

2895 
pSps
->
size_c€f
=2;

2896 
pSps
->
c€f
=(*)
c€f_fú_Õf_215_9_88
;

2897 
pSps
->
nx
=
èps_fú_Õf_215_9_88
;

2898 
pSps
->
size_x
=2;

2899 
pSps
->
x
=(*)(
	`ˇŒoc
’Sps->
nx
,pSps->
size_x
));

2900 
pSps
->
ˇlcAdju°
=
gaö_fú_Õf_215_9_88
;

2904 
pCh™
->
•sSigGí0
->
›ti⁄
=1;

2905 
pCh™
->
•sSigGí0
->
íabÀd
=1;

2906 
pCh™
->
•sSigGí0
->
discou¡îl
=0;

2909 if(
pCh™
->
smode
==
SMODE_NULL
 &&ÖCh™->
txcodedeÁu…smode
==
SMODE_CTCSS
 && !pCh™->
b
.
txCtcssInhibô
)

2911 
	`TRACEC
(1,("txPâ EncodêtxcodedeÁu…smode==SMODE_CTCSS %f\n",
pCh™
->
tx˘cssdeÁu…_vÆue
));

2912 
f
=
pCh™
->
tx˘cssdeÁu…_vÆue
;

2913 
pCh™
->
•sSigGí0
->
‰eq
=
f
*10;

2914 
pCh™
->
•sSigGí0
->
›ti⁄
=1;

2915 
pCh™
->
•sSigGí0
->
íabÀd
=1;

2916 
pCh™
->
•sSigGí0
->
discou¡îl
=0;

2917 
pCh™
->
smode
=
SMODE_CTCSS
;

2918 
pCh™
->
smodëimî
ıCh™->
smodëime
;

2920 if(
pCh™
->
txcodedeÁu…smode
==
SMODE_NULL
||pCh™->
b
.
txCtcssInhibô
)

2922 
	`TRACEC
(1,("txPtt EncodeÅxcodedefaultsmode==SMODE_NULL\n"));

2926 
	`¥ötf
 ("ERROR:ÅxPâIn=%òNOT HANDLED PROPERLY.\n",
pCh™
->
txPâIn
);

2927 
	`TRACEC
(1,("ERROR:ÅxPâIn=%òNOT HANDLED PROPERLY.\n",
pCh™
->
txPâIn
));

2930 
	`mem£t
(
pCh™
->
tx˘css‰eq
,0,(pChan->txctcssfreq));

2931 
	`•rötf
(
pCh™
->
tx˘css‰eq
,"%.1f",
f
);

2932 
pCh™
->
b
.
txCtcssRódy
 = 1;

2934 
pCh™
->
txSèã
 = 
CHAN_TXSTATE_ACTIVE
;

2935 
pCh™
->
txPâOut
=1;

2937 
pCh™
->
tx£âÀtimî
ıCh™->
tx£âÀtime
;

2939 if(
pCh™
->
•sTxOutA
ÌCh™->•sTxOutA->
íabÀd
=1;

2940 if(
pCh™
->
•sTxOutB
ÌCh™->•sTxOutB->
íabÀd
=1;

2941 if(
pCh™
->
•sTxLsdLpf
ÌCh™->•sTxLsdLpf->
íabÀd
=1;

2942 if(
pCh™
->
tx‰eq
ÌCh™->
b
.
ª¥og
=1;

2943 
	`TRACEC
(1,("PmrRx() TxOn\n"));

2945 if(
pCh™
->
txPâIn
 &&ÖCh™->
txSèã
==
CHAN_TXSTATE_ACTIVE
)

2948 
pCh™
->
smodëimî
ıCh™->
smodëime
;

2950 if(!
pCh™
->
txPâIn
 &&ÖCh™->
txSèã
==
CHAN_TXSTATE_ACTIVE
)

2952 
	`TRACEC
(1,("txPttIn==0 from CHAN_TXSTATE_ACTIVE\n"));

2953 if(
pCh™
->
smode
==
SMODE_CTCSS
 && !pCh™->
b
.
txCtcssInhibô
)

2955 if–
pCh™
->
txTocTy≥
==
TOC_NONE
 || !pCh™->
b
.
˘cssTxE«bÀ
 )

2957 
	`TRACEC
(1,("Tx Off Immediate.\n"));

2958 
pCh™
->
•sSigGí0
->
›ti⁄
=3;

2959 
pCh™
->
txBuf„rCÀ¨
=3;

2960 
pCh™
->
txSèã
=
CHAN_TXSTATE_FINISHING
;

2962 if(
pCh™
->
txTocTy≥
==
TOC_NOTONE
)

2964 
pCh™
->
txSèã
=
CHAN_TXSTATE_TOC
;

2965 
pCh™
->
txH™gTime
=
TOC_NOTONE_TIME
/
MS_PER_FRAME
;

2966 
pCh™
->
•sSigGí0
->
›ti⁄
=3;

2967 
	`TRACEC
(1,("Tx Turn Off No Tone Start.\n"));

2971 
pCh™
->
txSèã
=
CHAN_TXSTATE_TOC
;

2972 
pCh™
->
txH™gTime
=0;

2973 
pCh™
->
•sSigGí0
->
›ti⁄
=2;

2974 
	`TRACEC
(1,("Tx Turn Off Phase Shift Start.\n"));

2979 
pCh™
->
txBuf„rCÀ¨
=3;

2980 
pCh™
->
txSèã
=
CHAN_TXSTATE_FINISHING
;

2981 
	`TRACEC
(1,("Tx Off No SMODEÅo Finish.\n"));

2984 if(
pCh™
->
txSèã
==
CHAN_TXSTATE_TOC
)

2986 if–
pCh™
->
txPâIn
 &&ÖCh™->
smode
==
SMODE_CTCSS
 )

2988 
	`TRACEC
(1,("Tx Key During HangTime\n"));

2989 
pCh™
->
txSèã
 = 
CHAN_TXSTATE_ACTIVE
;

2990 
pCh™
->
•sSigGí0
->
›ti⁄
=1;

2991 
pCh™
->
•sSigGí0
->
íabÀd
=1;

2992 
pCh™
->
•sSigGí0
->
discou¡îl
=0;

2993 
hô
=0;

2995 if(
pCh™
->
txH™gTime
)

2997 if(--
pCh™
->
txH™gTime
==0ÌCh™->
txSèã
=
CHAN_TXSTATE_FINISHING
;

2999 if(
pCh™
->
txH™gTime
<=0 &&ÖCh™->
•sSigGí0
->
°©e
==0)

3001 
pCh™
->
txBuf„rCÀ¨
=3;

3002 
pCh™
->
txSèã
=
CHAN_TXSTATE_FINISHING
;

3003 
	`TRACEC
(1,("Tx Off TOC.\n"));

3006 if(
pCh™
->
txSèã
==
CHAN_TXSTATE_FINISHING
)

3008 if(--
pCh™
->
txBuf„rCÀ¨
<=0)

3009 
pCh™
->
txSèã
=
CHAN_TXSTATE_COMPLETE
;

3011 if(
pCh™
->
txSèã
==
CHAN_TXSTATE_COMPLETE
)

3013 
hô
=1;

3017 if(
hô
)

3019 
pCh™
->
txPâOut
=0;

3020 
pCh™
->
•sSigGí0
->
›ti⁄
=3;

3021 
pCh™
->
txrxbœnkögtimî
ıCh™->
txrxbœnkögtime
;

3022 
	`TRACEC
(1,("PmrRx(Ëtxrxbœnkögtimî=%i\n",
pCh™
->
txrxbœnkögtimî
));

3023 
pCh™
->
txSèã
=
CHAN_TXSTATE_IDLE
;

3024 if(
pCh™
->
•sTxLsdLpf
ÌCh™->•sTxLsdLpf->
›ti⁄
=3;

3025 if(
pCh™
->
•sTxOutA
ÌCh™->•sTxOutA->
›ti⁄
=3;

3026 if(
pCh™
->
•sTxOutB
ÌCh™->•sTxOutB->
›ti⁄
=3;

3027 if(
pCh™
->
rx‰eq
||pCh™->
tx‰eq
ÌCh™->
b
.
ª¥og
=1;

3028 
	`mem£t
(
pCh™
->
tx˘css‰eq
,0,(pChan->txctcssfreq));

3029 
pCh™
->
b
.
txCtcssRódy
 = 1;

3030 
	`TRACEC
(1,("Tx Off hit.\n"));

3033 if(
pCh™
->
b
.
ª¥og
)

3035 
pCh™
->
b
.
ª¥og
=0;

3036 
	`¥ogdtx
(
pCh™
);

3039 if(
pCh™
->
tx£âÀtimî
 &&ÖCh™->
txPâHid
 )

3041 
pCh™
->
tx£âÀtimî
-=
MS_PER_FRAME
;

3042 if(
pCh™
->
tx£âÀtimî
<0)pChan->txsettletimer=0;

3046 if–
pCh™
->
txCpuSavî
 &&

3047 !
pCh™
->
txPâIn
 && !pCh™->
txPâOut
 &&

3048 
pCh™
->
txSèã
==
CHAN_TXSTATE_IDLE
 &&

3049 !
pCh™
->
dd
.
b
.
doônow


3052 if(!
pCh™
->
b
.
txhÆãd
)

3054 
pCh™
->
b
.
txhÆãd
=1;

3055 
	`TRACEC
(1,("PmrRx()Åx sps halted\n"));

3058 if(
pCh™
->
b
.
txhÆãd
)

3060 
pCh™
->
dd
.
b
.
doônow
=1;

3061 
pCh™
->
b
.
txhÆãd
=0;

3062 
	`TRACEC
(1,("PmrRx()Åx sps un-halted\n"));

3065 if(
pCh™
->
b
.
txhÆãd
)(1);

3067 if(
pCh™
->
b
.
°¨tS≥cülT⁄e
)

3069 
pCh™
->
b
.
°¨tS≥cülT⁄e
=0;

3070 
pCh™
->
•sSigGí1
->
›ti⁄
=1;

3071 
pCh™
->
•sSigGí1
->
íabÀd
=1;

3072 
pCh™
->
b
.
doögS≥cülT⁄e
=1;

3074 if(
pCh™
->
b
.
°›S≥cülT⁄e
)

3076 
pCh™
->
b
.
°›S≥cülT⁄e
=0;

3077 
pCh™
->
•sSigGí1
->
›ti⁄
=0;

3078 
pCh™
->
b
.
doögS≥cülT⁄e
=0;

3079 
pCh™
->
•sSigGí1
->
íabÀd
=0;

3081 if(
pCh™
->
b
.
doögS≥cülT⁄e
)

3083 
pCh™
->
•sSigGí1
->
sök
=
ouçuâx
;

3084 
pCh™
->
•sSigGí1
->
	`sigProc
(pChan->spsSigGen1);

3085 
i
=0;i<(
pCh™
->
nSam∂esTx
*2*6);i+=2)
ouçuâx
[i+1]=outputtx[i];

3089 if(
pCh™
->
•sSigGí0
 &&ÖCh™->•sSigGí0->
íabÀd
)

3091 
pCh™
->
•sSigGí0
->
b
.
muã
 =ÖCh™->b.
txCtcssOff
;

3092 
pCh™
->
•sSigGí0
->
	`sigProc
(pChan->spsSigGen0);

3095 if(
pCh™
->
•sSigGí1
 &&ÖCh™->•sSigGí1->
íabÀd
)

3097 
pCh™
->
•sSigGí1
->
	`sigProc
(pChan->spsSigGen1);

3100 #ifde‡
XPMRX_H


3101 
pCh™
->
•sLsdGí
->
	`sigProc
(pChan->spsLsdGen);

3105 
pCh™
->
•sTxLsdLpf
->
	`sigProc
(pChan->spsTxLsdLpf);

3108 
pmr_•s
=
pCh™
->
•sTx
;

3111 
pCh™
->
dd
.
›ti⁄
=0;

3112 
pCh™
->
dd
.
±r
ıCh™->
pTxBa£
;

3113 
	`dedri·
(
pCh™
);

3116 if(!
pCh™
->
•sSigGí1
->
íabÀd
)

3118 
pmr_•s
->
sour˚
=
pCh™
->
pTxBa£
;

3120 
öput
=
pmr_•s
->
sour˚
;

3122 if(
ouçuâx
!=
NULL
)

3124 if(
pCh™
->
•sTxOutA
ÌCh™->•sTxOutA->
sök
=
ouçuâx
;

3125 if(
pCh™
->
•sTxOutB
ÌCh™->•sTxOutB->
sök
=
ouçuâx
;

3128 
i
=0;

3129 
pmr_•s
!=
NULL
 &&Ömr_sps!=0)

3132 
pmr_•s
->
	`sigProc
(pmr_sps);

3133 
pmr_•s
 = (
t_pmr_•s
 *)’mr_•s->
√xtSps
);

3137 if(
pCh™
->
txMixA
==
TX_OUT_OFF
 || !pCh™->
txPâOut
){

3138 
i
=0;i<
pCh™
->
nSam∂esTx
*2*6;i+=2)
ouçuâx
[i]=0;

3141 if(
pCh™
->
txMixB
==
TX_OUT_OFF
 || !pCh™->
txPâOut
 ){

3142 
i
=0;i<
pCh™
->
nSam∂esTx
*2*6;i+=2)
ouçuâx
[i+1]=0;

3145 #i‡
XPMR_PPTP
 == 1

3146 if–
pCh™
->
b
.
ødiﬂ˘ive
 &&ÖCh™->b.
µç_p1
!ıCh™->
txPâOut
)

3148 
pCh™
->
b
.
µç_p1
ıCh™->
txPâOut
;

3149 
	`µç_wrôe
(0,
pCh™
->
b
.
µç_p1
);

3153 #i‡
XPMR_DEBUG0
 == 1

3155 if(
pCh™
->
b
.
rxC≠tuª
){

3156 
i
=0;i<
pCh™
->
nSam∂esRx
;i++)

3158 
pCh™
->
pRxDemod
[
i
]=
öput
[i*2*6];

3159 
pCh™
->
pT°TxOut
[
i
]=
ouçuâx
[i*2*6+0];

3161 
	`TSCOPE
((
RX_NOISE_TRIG
, 
pCh™
->
sdbg
, 
i
, (pCh™->
rxC¨rõrDëe˘
*
XPMR_TRACE_AMP
)-XPMR_TRACE_AMP/2));

3162 
	`TSCOPE
((
RX_CTCSS_DECODE
, 
pCh™
->
sdbg
, 
i
,ÖCh™->
rxCtcss
->
decode
*(
M_Q14
/
CTCSS_NUM_CODES
)));

3163 
	`TSCOPE
((
RX_SMODE
, 
pCh™
->
sdbg
, 
i
,ÖCh™->
smode
*(
XPMR_TRACE_AMP
/4)));

3164 
	`TSCOPE
((
TX_PTT_IN
, 
pCh™
->
sdbg
, 
i
, (pCh™->
txPâIn
*
XPMR_TRACE_AMP
)-XPMR_TRACE_AMP/2));

3165 
	`TSCOPE
((
TX_PTT_OUT
, 
pCh™
->
sdbg
, 
i
, (pCh™->
txPâOut
*
XPMR_TRACE_AMP
)-XPMR_TRACE_AMP/2));

3166 
	`TSCOPE
((
TX_DEDRIFT_LEAD
, 
pCh™
->
sdbg
, 
i
,ÖCh™->
dd
.
Àad
*8));

3167 
	`TSCOPE
((
TX_DEDRIFT_ERR
, 
pCh™
->
sdbg
, 
i
,ÖCh™->
dd
.
îr
*16));

3168 
	`TSCOPE
((
TX_DEDRIFT_FACTOR
, 
pCh™
->
sdbg
, 
i
,ÖCh™->
dd
.
Á˘‹
*16));

3169 
	`TSCOPE
((
TX_DEDRIFT_DRIFT
, 
pCh™
->
sdbg
, 
i
,ÖCh™->
dd
.
dri·
*16));

3174 
	`°ø˚2
(
pCh™
->
sdbg
);

3175 
	`TRACEC
(5,("PmrRx(Ëªtu∫ cd=%òsmode=%òÅxPâIn=%òÅxPâOut=%ò\n",
pCh™
->
rxC¨rõrDëe˘
,pCh™->
smode
,pCh™->
txPâIn
,pCh™->
txPâOut
));

3177 
	}
}

3181 
	$µböout
 (
u8
 
ch™
)

3183 #if(
DTX_PROG
 == 1)

3184 
i32
 
i
;

3186 i‡(
µdrvdev
 == 0)

3187 
µdrvdev
 = 
	`›í
("/dev/ppdrv_device", 0);

3189 i‡(
µdrvdev
 < 0)

3191 
	`a°_log
(
LOG_ERROR
, "›í /dev/µdrv_µdrvdevÑëu∫ed %i\n",
µdrvdev
);

3195 
i
=0;

3196 if(
ch™
&0x01)
i
|=
BIN_PROG_0
;

3197 if(
ch™
&0x02)
i
|=
BIN_PROG_1
;

3198 if(
ch™
&0x04)
i
|=
BIN_PROG_2
;

3199 if(
ch™
&0x08)
i
|=
BIN_PROG_3
;

3201 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINMODE_OUT
, 
BIN_PROG_3
|
BIN_PROG_2
|
BIN_PROG_1
|
BIN_PROG_0
);

3204 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINSET
, 
BIN_PROG_3
|
BIN_PROG_2
|
BIN_PROG_1
|
BIN_PROG_0
);

3205 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINCLEAR
, 
i
 );

3208 
	`a°_log
(
LOG_NOTICE
, "mask=%ò0x%x\n",
i
,i);

3210 
	}
}

3218 
	$µ•iout
 (
u32
 
•id©a
)

3220 #if(
DTX_PROG
 == 1)

3221 
fú°run
=0;

3222 
i32
 
i
,
ii
;

3223 
u32
 
bô£À˘
;

3225 i‡(
µdrvdev
 < 0)

3227 
	`a°_log
(
LOG_ERROR
, "nÿ∑øŒñÖ‹à≥rmissi⁄Öpdrvdev %i\n",
µdrvdev
);

3228 
	`exô
(0);

3231 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINMODE_OUT
, 
DTX_CLK
 | 
DTX_DATA
 | 
DTX_ENABLE
 | 
DTX_TXPWR
 | 
DTX_TX
 );

3232 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINCLEAR
, 
DTX_CLK
 | 
DTX_DATA
 | 
DTX_ENABLE
 | 
DTX_TXPWR
 | 
DTX_TX
 );

3234 if(
fú°run
==0)

3236 
fú°run
=1;

3237 
ii
=0;ii<
PP_BIT_TIME
*200;ii++);

3241 
ii
=0;ii<
PP_BIT_TIME
*4;ii++);

3244 
bô£À˘
=0x00080000;

3246 
i
=0;i<(
PP_REG_LEN
-12);i++)

3248 if((
bô£À˘
&
•id©a
))

3249 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINSET
, 
DTX_DATA
 );

3251 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINCLEAR
, 
DTX_DATA
 );

3253 
ii
=0;ii<
PP_BIT_TIME
;ii++);

3255 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINSET
, 
DTX_CLK
 );

3256 
ii
=0;ii<
PP_BIT_TIME
;ii++);

3257 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINCLEAR
, 
DTX_CLK
 );

3258 
ii
=0;ii<
PP_BIT_TIME
;ii++);

3260 
bô£À˘
=(bitselect>>1);

3262 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINCLEAR
, 
DTX_CLK
 | 
DTX_DATA
 );

3263 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINSET
, 
DTX_ENABLE
 );

3264 
ii
=0;ii<
PP_BIT_TIME
;ii++);

3265 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINCLEAR
, 
DTX_ENABLE
 );

3267 
	}
}

3274 
	$¥ogdtx
(
t_pmr_ch™
 *
pCh™
)

3276 #if(
DTX_PROG
 == 1)

3279 
u32
 
ªf‰eq
;

3280 
u32
 
°ï‰eq
;

3281 
u32
 
rxif‰eq
;

3282 
u32
 
sy¡h‰eq
;

3283 
u32
 
shi·ªg
;

3284 
u32
 
tmp
;

3286 
	`TRACEC
(1,("\≈rogdtx(Ë%ò%ò%i\n",
pCh™
->
rx‰eq
,pCh™->
tx‰eq
,0));

3288 i‡(
µdrvdev
 == 0)

3289 
µdrvdev
 = 
	`›í
("/dev/ppdrv_device", 0);

3291 i‡(
µdrvdev
 < 0)

3293 
	`a°_log
(
LOG_ERROR
, "›í /dev/µdrv_µdrvdevÑëu∫ed %i\n",
µdrvdev
);

3294 
	`exô
(0);

3297 if(
pCh™
->
rx‰eq
>200000000)

3299 
ªf‰eq
=16012500;

3300 
°ï‰eq
=12500;

3301 
rxif‰eq
=21400000;

3305 
ªf‰eq
=16000000;

3306 
°ï‰eq
=5000;

3307 
rxif‰eq
=10700000;

3310 
shi·ªg
=(
ªf‰eq
/
°ï‰eq
)<<1;

3311 
shi·ªg
=shiftreg|0x00000001;

3313 
	`µ•iout
(
shi·ªg
);

3315 if(
pCh™
->
txPâOut
)

3316 
sy¡h‰eq
=
pCh™
->
tx‰eq
;

3318 
sy¡h‰eq
=
pCh™
->
rx‰eq
-
rxif‰eq
;

3320 
shi·ªg
=(
sy¡h‰eq
/
°ï‰eq
)<<1;

3321 
tmp
=(
shi·ªg
&0xFFFFFF80)<<1;

3322 
shi·ªg
=
tmp
+(shiftreg&0x0000007F);

3324 
	`µ•iout
(
shi·ªg
);

3326 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINMODE_OUT
, 
DTX_CLK
 | 
DTX_DATA
 | 
DTX_ENABLE
 | 
DTX_TXPWR
 | 
DTX_TX
 );

3327 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINCLEAR
, 
DTX_CLK
 | 
DTX_DATA
 | 
DTX_ENABLE
 );

3329 if(
pCh™
->
txPâOut
)

3331 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINCLEAR
, 
DTX_TXPWR
 );

3332 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINSET
, 
DTX_TX
 );

3333 if(
pCh™
->
txpowî
 && 0Ë
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINSET
, 
DTX_TXPWR
 );

3337 
	`io˘l
(
µdrvdev
, 
PPDRV_IOC_PINCLEAR
, 
DTX_TX
 | 
DTX_TXPWR
 );

3340 
	}
}

3349 
	$dedri·
(
t_pmr_ch™
 *
pCh™
)

3351 
	`TRACEC
(5,("dedrift()\n"));

3353 if(
pCh™
->
dd
.
›ti⁄
==9)

3355 
	`TRACEF
(1,("dedrift(9)\n"));

3356 
pCh™
->
dd
.
‰amesize
=
DDB_FRAME_SIZE
;

3357 
pCh™
->
dd
.
‰ames
=
DDB_FRAMES_IN_BUFF
;

3358 
pCh™
->
dd
.
buf„rsize
 =ÖCh™->dd.
‰ames
 *ÖCh™->dd.
‰amesize
;

3359 
pCh™
->
dd
.
buff
=
	`ˇŒoc
(
DDB_FRAME_SIZE
*
DDB_FRAMES_IN_BUFF
,2);

3360 
pCh™
->
dd
.
modulus
=
DDB_ERR_MODULUS
;

3361 
pCh™
->
dd
.
öputödex
=0;

3362 
pCh™
->
dd
.
ouçutödex
=0;

3363 
pCh™
->
dd
.
skew
 =ÖCh™->dd.
Àad
=0;

3364 
pCh™
->
dd
.
z1
=0;

3365 
pCh™
->
dd
.
debug
=0;

3366 
pCh™
->
dd
.
debug˙t
=0;

3367 
pCh™
->
dd
.
lock
ıCh™->dd.
b
.
txlock
ıCh™->dd.b.
rxlock
=0;

3368 
pCh™
->
dd
.
öô˙t
=2;

3369 
pCh™
->
dd
.
timî
=10000/20;

3370 
pCh™
->
dd
.
dri·
=0;

3371 
pCh™
->
dd
.
Á˘‹
ıCh™->dd.
x1
 =ÖCh™->dd.
x0
 =ÖCh™->dd.
y1
 =ÖCh™->dd.
y0
 = 0;

3372 
pCh™
->
dd
.
tx‰ame˙t
ıCh™->dd.
rx‰ame˙t
=0;

3376 if(
pCh™
->
dd
.
›ti⁄
==8)

3378 
	`‰ì
(
pCh™
->
dd
.
buff
);

3379 
pCh™
->
dd
.
lock
=0;

3380 
pCh™
->
dd
.
b
.
txlock
ıCh™->dd.b.
rxlock
=0;

3383 if(
pCh™
->
dd
.
öô˙t
==0)

3385 *
v±r
;

3386 
i16
 
öputödex
;

3387 
i16
 
ödextwók
;

3388 
i32
 
accum
;

3390 
öputödex
 = 
pCh™
->
dd
.inputindex;

3391 
pCh™
->
dd
.
skew
 =ÖCh™->dd.
tx‰ame˙t
-pCh™->dd.
rx‰ame˙t
;

3392 
pCh™
->
dd
.
rx‰ame˙t
++;

3395 if–(
pCh™
->
dd
.
ouçutödex
 +ÖCh™->dd.
‰amesize
Ë>ÖCh™->dd.
buf„rsize
 )

3397 
i16
 
dofú°
,
d⁄ext
;

3399 
dofú°
 = 
pCh™
->
dd
.
buf„rsize
 -ÖCh™->dd.
ouçutödex
;

3400 
d⁄ext
 = 
pCh™
->
dd
.
‰amesize
 - 
dofú°
;

3401 
v±r
 = (*)(
pCh™
->
dd
.
±r
);

3402 
	`mem˝y
(
v±r
,(*)(
pCh™
->
dd
.
buff
 +ÖCh™->dd.
ouçutödex
),
dofú°
*2);

3403 
v±r
=(*)(
pCh™
->
dd
.
±r
 + 
dofú°
);

3404 
	`mem˝y
(
v±r
,(*)(
pCh™
->
dd
.
buff
),
d⁄ext
*2);

3408 
	`mem˝y
(
pCh™
->
dd
.
±r
,(*)’Ch™->dd.
buff
 +ÖCh™->dd.
ouçutödex
),pCh™->dd.
‰amesize
*2);

3412 if(
pCh™
->
dd
.
ouçutödex
 > 
öputödex
)

3414 
pCh™
->
dd
.
Àad
 = (
öputödex
 +ÖCh™->dd.
buf„rsize
Ë-ÖCh™->dd.
ouçutödex
;

3418 
pCh™
->
dd
.
Àad
 = 
öputödex
 -ÖCh™->dd.
ouçutödex
;

3420 
pCh™
->
dd
.
îr
 =ÖCh™->dd.
Àad
 - (pCh™->dd.
buf„rsize
/2);

3423 c⁄° 
i32
 
a0
 = 26231;

3424 c⁄° 
i32
 
a1
 = 26231;

3425 c⁄° 
i32
 
b0
 = 32768;

3426 c⁄° 
i32
 
b1
 = -32358;

3427 c⁄° 
i32
 
dg
 = 128;

3428 
pCh™
->
dd
.
x1
 =ÖCh™->dd.
x0
;

3429 
pCh™
->
dd
.
y1
 =ÖCh™->dd.
y0
;

3430 
pCh™
->
dd
.
x0
 =ÖCh™->dd.
îr
;

3431 
pCh™
->
dd
.
y0
 = 
a0
 *ÖCh™->dd.
x0
;

3432 
pCh™
->
dd
.
y0
 +(
a1
 *ÖCh™->dd.
x1
 - (
b1
 *ÖCh™->dd.
y1
));

3433 
pCh™
->
dd
.
y0
 /
b0
;

3434 
accum
 = 
pCh™
->
dd
.
y0
/
dg
;

3436 
pCh™
->
dd
.
Á˘‹
=
accum
;

3437 
ödextwók
=0;

3441 if(
pCh™
->
dd
.
b
.
doônow
)

3443 
pCh™
->
dd
.
b
.
doônow
=0;

3444 
ödextwók
=
pCh™
->
dd
.
Á˘‹
;

3445 
pCh™
->
dd
.
Á˘‹
 =ÖCh™->dd.
x1
 =ÖCh™->dd.
x0
 =ÖCh™->dd.
y1
 =ÖCh™->dd.
y0
 = 0;

3446 
pCh™
->
dd
.
timî
=20000/
MS_PER_FRAME
;

3449 if–
pCh™
->
dd
.
Àad
 >pCh™->dd.
‰amesize
*(
DDB_FRAMES_IN_BUFF
-2) )

3451 
pCh™
->
dd
.
Á˘‹
 =ÖCh™->dd.
x1
 =ÖCh™->dd.
x0
 =ÖCh™->dd.
y1
 =ÖCh™->dd.
y0
 = 0;

3452 
ödextwók
 +(
pCh™
->
dd
.
‰amesize
*5/4);

3454 if(
pCh™
->
dd
.
Àad
 <pCh™->dd.
‰amesize
*2 )

3456 
pCh™
->
dd
.
Á˘‹
 =ÖCh™->dd.
x1
 =ÖCh™->dd.
x0
 =ÖCh™->dd.
y1
 =ÖCh™->dd.
y0
 = 0;

3457 
ödextwók
 -(
pCh™
->
dd
.
‰amesize
*5/4);

3462 if(
pCh™
->
dd
.
timî
>0)pChan->dd.timer--;

3463 if(
pCh™
->
dd
.
timî
==0 && 
	`abs
’Ch™->dd.
Á˘‹
)>=16)

3465 
ödextwók
=
pCh™
->
dd
.
Á˘‹
;

3466 
pCh™
->
dd
.
Á˘‹
 =ÖCh™->dd.
x1
 =ÖCh™->dd.
x0
 =ÖCh™->dd.
y1
 =ÖCh™->dd.
y0
 = 0;

3467 
pCh™
->
dd
.
timî
=20000/
MS_PER_FRAME
;

3471 #i‡
XPMR_DEBUG0
 == 1

3472 if(
ödextwók
!=0)
	`TRACEF
(4,("%08òödextwók %+4ò %+4ò %+5ò %5ò %5ò %5ò %+4i\n",
pCh™
->
dd
.
rx‰ame˙t
, indextwók,ÖCh™->dd.
îr
, 
accum
, 
öputödex
,ÖCh™->dd.
ouçutödex
,ÖCh™->dd.
Àad
,ÖCh™->dd.
skew
));

3476 
pCh™
->
dd
.
ouçutödex
 = (pCh™->dd.ouçutödex +ÖCh™->dd.
‰amesize
 + 
ödextwók
)%pCh™->dd.
buf„rsize
;

3478 
	}
}

3481 
	$dedri·_wrôe
(
t_pmr_ch™
 *
pCh™
, 
i16
 *
§c
 )

3483 *
v±r
;

3485 
	`TRACEF
(5,("dedrift_write()\n"));

3486 
v±r
 = 
pCh™
->
dd
.
buff
 +ÖCh™->dd.
öputödex
;

3487 
	`mem˝y
(
v±r
, 
§c
, 
pCh™
->
dd
.
‰amesize
*2);

3488 
pCh™
->
dd
.
öputödex
 = (pCh™->dd.öputödex +ÖCh™->dd.
‰amesize
Ë%ÖCh™->dd.
buf„rsize
;

3489 
pCh™
->
dd
.
tx‰ame˙t
++;

3490 if(
pCh™
->
dd
.
öô˙t
!=0)pChan->dd.initcnt--;

3491 
pCh™
->
dd
.
accum
+ıCh™->dd.
‰amesize
;

3492 
	}
}

	@xpmr/xpmr.h

36 #i‚de‡ 
XPMR_H


37 
	#XPMR_H
 1

	)

39 
	#XPMR_DEV
 0

40 

	)

41 
	#XPMR_TRACE_OVFLW
 0

	)

42 
	#XPMR_TRACE_FRONTEND
 0

	)

44 
	#XPMR_TRACE_LEVEL
 0

	)

46 #ifdef 
RADIO_RTX


47 
	#DTX_PROG
 1

48 
	#XPMR_PPTP
 0

49 #ñ£

	)

50 
	#DTX_PROG
 0

	)

51 
	#XPMR_PPTP
 0

	)

54 #i‡(
DTX_PROG
 =1Ë|| 
XPMR_PPTP
 == 1

55 
	~<∑øpödrivî.h
>

58 #ifdef 
CHAN_USBRADIO


59 
	#XPMR_DEBUG0
 1

	)

60 
	#XPMR_TRACE
 1

	)

61 
	#TRACEO
(
Àvñ
,
a
Ë{ i‡–
o
 && (o->
åa˚Àvñ
 >ÀvñËË{
¥ötf
á;} }

	)

63 
	#XPMR_DEBUG0
 1

	)

64 
	#XPMR_TRACE
 1

	)

65 
	#TRACEO
(
Àvñ
,
a
)

	)

69 
	#LSD_DFS
 5

	)

70 
	#LSD_DFD
 1

	)

72 #if(
XPMR_DEBUG0
 == 1)

73 
	#XPMR_DEBUG_CHANS
 16

	)

74 
	#TSCOPE
(
a
Ë{
°ø˚
á;}

	)

76 
	#XPMR_DEBUG_CHANS
 0

	)

77 
	#TSCOPE
(
a
)

	)

80 
	#XPMR_TRACE_AMP
 8192

	)

83 #if(
XPMR_TRACE
 == 1)

84 
	#TRACEX
(
a
Ë{
¥ötf
á;}

	)

85 
	#TRACEXL
(
a
Ë{
	`¥ötf
("%†@ %u : ",
__FILE__
 ,
__LINE__
); 
¥ötf
á; }

	)

86 
	#TRACEXT
(
a
Ë{
timevÆ
 
hack
; 
	`gëtimeofday
(&hack,
NULL
); 
	`¥ötf
("%ld.",hack.
tv_£c
%100000);Örötf("%ò: ",()hack.
tv_u£c
); 
¥ötf
á; }

	)

87 
	#TRACEXR
(
a
Ë{
¥ötf
á;}

	)

88 
	#TRACEC
(
Àvñ
,
a
Ë{if(
pCh™
->
åa˚Àvñ
>ˆevñ){
	`¥ötf
("%08ò",pCh™->
‰ameCou¡Rx
);
¥ötf
á;} }

	)

89 
	#TRACEF
(
Àvñ
,
a
Ë{if(
pCh™
->
åa˚Àvñ
>ˆevñ){
¥ötf
á;} }

	)

90 
	#TRACEJ
(
Àvñ
,
a
Ë{if(
XPMR_TRACE_LEVEL
>ˆevñ){
¥ötf
á;} }

	)

91 
	#TRACES
(
Àvñ
,
a
Ë{if(
mySps
->
∑ª¡Ch™
->
åa˚Àvñ
 >Àvñ){
¥ötf
á;} }

	)

92 
	#TRACET
(
Àvñ
,
a
Ë{if(
pCh™
->
åa˚Àvñ
>ˆevñ){
	`¥ötf
("%08ò%02i",pCh™->
‰ameCou¡Rx
,pCh™->
Ωäum
);
¥ötf
á;} }

	)

93 
	#TRACEXR
(
a
Ë{
¥ötf
á;}

	)

94 
	#TRACEM
(
Àvñ
,
sys
,
a
Ë{if(
pCh™
->
åa˚Àvñ
>ˆevñ || (pCh™->
åa˚sys
[sys])){
¥ötf
á;} }

	)

96 
	#TRACEX
(
a
)

	)

97 
	#TRACEXL
(
a
)

	)

98 
	#TRACEXT
(
a
)

	)

99 
	#TRACEC
(
Àvñ
,
a
)

	)

100 
	#TRACEF
(
Àvñ
,
a
)

	)

101 
	#TRACEJ
(
Àvñ
,
a
)

	)

102 
	#TRACES
(
Àvñ
,
a
)

	)

103 
	#TRACET
(
Àvñ
,
a
)

	)

104 
	#TRACEXR
(
a
)

	)

105 
	#TRACEM
(
Àvñ
,
sys
,
a
)

	)

108 
	#i8
 
öt8_t


	)

109 
	#u8
 
u_öt8_t


	)

110 
	#i16
 
öt16_t


	)

111 
	#u16
 
u_öt16_t


	)

112 
	#i32
 
öt32_t


	)

113 
	#u32
 
u_öt32_t


	)

114 
	#i64
 
öt64_t


	)

115 
	#u64
 
u_öt64_t


	)

117 
	#M_Q31
 0x80000000

118 
	#M_Q30
 0x40000000

119 
	#M_Q29
 0x20000000

120 
	#M_Q28
 0x10000000

121 
	#M_Q27
 0x08000000

122 
	#M_Q26
 0x04000000

123 
	#M_Q25
 0x02000000

124 
	#M_Q24
 0x01000000

125 
	#M_Q23
 0x00800000

126 
	#M_Q22
 0x00400000

127 
	#M_Q21
 0x00200000

128 
	#M_Q20
 0x00100000

129 
	#M_Q19
 0x00080000

130 
	#M_Q18
 0x00040000

131 
	#M_Q17
 0x00020000

132 
	#M_Q16
 0x00010000

133 
	#M_Q15
 0x00008000

134 
	#M_Q14
 0x00004000

135 
	#M_Q13
 0x00002000

136 
	#M_Q12
 0x00001000

137 
	#M_Q11
 0x00000800

138 
	#M_Q10
 0x00000400

139 
	#M_Q9
 0x00000200

140 
	#M_Q8
 0x00000100

141 
	#M_Q7
 0x00000080

142 
	#M_Q6
 0x00000040

143 
	#M_Q5
 0x00000020

144 
	#M_Q4
 0x00000010

145 
	#M_Q3
 0x00000008

146 
	#M_Q2
 0x00000004

147 
	#M_Q1
 0x00000002

148 
	#M_Q0
 0x00000001

149 

	)

150 
	#RADIANS_PER_CYCLE
 (2*
M_PI
)

	)

152 
	#SAMPLE_RATE_INPUT
 48000

	)

153 
	#SAMPLE_RATE_NETWORK
 8000

	)

155 
	#SAMPLES_PER_BLOCK
 160

	)

156 
	#MS_PER_FRAME
 20

	)

157 
	#SAMPLES_PER_MS
 8

	)

159 
	#RXSQDELAYBUFSIZE
 4096

	)

161 
	#CTCSS_NULL
 -1

	)

162 
	#CTCSS_RXONLY
 -2

	)

163 
	#CTCSS_NUM_CODES
 38

164 
	#CTCSS_SCOUNT_MUL
 100

	)

165 
	#CTCSS_INTEGRATE
 3932

166 
	#CTCSS_INPUT_LIMIT
 1000

	)

167 
	#CTCSS_DETECT_POINT
 1989

	)

168 
	#CTCSS_HYSTERSIS
 200

	)

170 
	#CTCSS_TURN_OFF_TIME
 160

171 
	#CTCSS_TURN_OFF_SHIFT
 240

172 
	#TOC_NOTONE_TIME
 600

173 

	)

174 
	#DDB_FRAME_SIZE
 160

175 
	#DDB_FRAMES_IN_BUFF
 8

	)

176 
	#DDB_ERR_MODULUS
 10000

	)

178 
	#DCS_TURN_OFF_TIME
 180

	)

180 
	#NUM_TXLSD_FRAMEBUFFERS
 4

	)

182 
	#CHAN_TXSTATE_IDLE
 0

	)

183 
	#CHAN_TXSTATE_ACTIVE
 1

	)

184 
	#CHAN_TXSTATE_TOC
 2

	)

185 
	#CHAN_TXSTATE_HANGING
 3

	)

186 
	#CHAN_TXSTATE_FINISHING
 4

	)

187 
	#CHAN_TXSTATE_COMPLETE
 5

	)

188 
	#CHAN_TXSTATE_USURPED
 9

	)

190 
	#SMODE_NULL
 0

	)

191 
	#SMODE_CARRIER
 1

	)

192 
	#SMODE_CTCSS
 2

	)

193 
	#SMODE_DCS
 3

	)

194 
	#SMODE_LSD
 4

	)

195 
	#SMODE_MPT
 5

	)

196 
	#SMODE_DST
 6

	)

197 
	#SMODE_P25
 7

	)

198 
	#SMODE_MDC
 8

	)

201 
	#SPS_OPT_START
 1

	)

202 
	#SPS_OPT_STOP
 2

	)

203 
	#SPS_OPT_TURNOFF
 3

	)

204 
	#SPS_OPT_STOPNOW
 4

	)

206 
	#SPS_STAT_STOPPED
 0

	)

207 
	#SPS_STAT_STARTING
 1

	)

208 
	#SPS_STAT_RUNNING
 2

	)

209 
	#SPS_STAT_HALTING
 3

	)

212 
	#PP_BIT_TEST
 6

	)

213 
	#PP_REG_LEN
 32

	)

214 
	#PP_BIT_TIME
 100000

	)

216 
	#DTX_CLK
 
LP_PIN02


	)

217 
	#DTX_DATA
 
LP_PIN03


	)

218 
	#DTX_ENABLE
 
LP_PIN04


	)

219 
	#DTX_TX
 
LP_PIN05


220 
	#DTX_TXPWR
 
LP_PIN06


221 
	#DTX_TP1
 
LP_PIN07


222 
	#DTX_TP2
 
LP_PIN08


223 

	)

224 
	#BIN_PROG_0
 
LP_PIN06


	)

225 
	#BIN_PROG_1
 
LP_PIN07


	)

226 
	#BIN_PROG_2
 
LP_PIN08


	)

227 
	#BIN_PROG_3
 
LP_PIN09


	)

229 #i‚de‡
CHAN_USBRADIO


230 íum {
	mRX_AUDIO_NONE
,
	mRX_AUDIO_SPEAKER
,
	mRX_AUDIO_FLAT
};

231 íum {
	mTX_AUDIO_NONE
,
	mTX_AUDIO_FLAT
,
	mTX_AUDIO_FILTERED
,
	mTX_AUDIO_PROC
};

232 íum {
	mCD_IGNORE
,
	mCD_XPMR_NOISE
,
	mCD_XPMR_VOX
,
	mCD_HID
,
	mCD_HID_INVERT
};

233 íum {
	mSD_IGNORE
,
	mSD_HID
,
	mSD_HID_INVERT
,
	mSD_XPMR
};

234 íum {
	mRX_KEY_CARRIER
,
	mRX_KEY_CARRIER_CODE
};

235 íum {
	mTX_OUT_OFF
,
	mTX_OUT_VOICE
,
	mTX_OUT_LSD
,
	mTX_OUT_COMPOSITE
,
	mTX_OUT_AUX
};

236 íum {
	mTOC_NONE
,
	mTOC_PHASE
,
	mTOC_NOTONE
};

239 
	edbg_±s
 {

241 
	mRX_INPUT
,

242 
	mRX_NOISE_AMP
,

243 
	mRX_NOISE_TRIG
,

245 
	mRX_CTCSS_LPF
,

246 
	mRX_CTCSS_CENTER
,

247 
	mRX_CTCSS_NRZ
,

248 
	mRX_CTCSS_CLK
,

249 
	mRX_CTCSS_P0
,

250 
	mRX_CTCSS_P1
,

251 
	mRX_CTCSS_ACCUM
,

252 
	mRX_CTCSS_DVDT
,

253 
	mRX_CTCSS_DECODE
,

255 
	mRX_DCS_CENTER
,

256 
	mRX_DCS_DEC
,

257 
	mRX_DCS_DIN
,

258 
	mRX_DCS_CLK
,

259 
	mRX_DCS_DAT
,

261 
	mRX_LSD_LPF
,

262 
	mRX_LSD_CLK
,

263 
	mRX_LSD_DAT
,

264 
	mRX_LSD_DEC
,

266 
	mRX_LSD_CENTER
,

267 
	mRX_LSD_SYNC
,

268 
	mRX_LSD_STATE
,

269 
	mRX_LSD_ERR
,

270 
	mRX_LSD_INTE
,

272 
	mRX_SMODE
,

274 
	mTX_PTT_IN
,

275 
	mTX_PTT_OUT
,

277 
	mTX_DEDRIFT_LEAD
,

278 
	mTX_DEDRIFT_ERR
,

279 
	mTX_DEDRIFT_FACTOR
,

280 
	mTX_DEDRIFT_DRIFT
,

281 
	mTX_DEDRIFT_TWIDDLE
,

283 
	mTX_CTCSS_GEN
,

285 
	mTX_SIGGEN_0
,

287 
	mTX_DCS_CLK
,

288 
	mTX_DCS_DAT
,

289 
	mTX_DCS_LPF
,

291 
	mTX_LSD_CLK
,

292 
	mTX_LSD_DAT
,

293 
	mTX_LSD_GEN
,

294 
	mTX_LSD_LPF
,

296 
	mTX_NET_INT
,

297 
	mTX_VOX_HPF
,

298 
	mTX_VOX_LIM
,

300 
	mTX_VOX_LPF
,

302 
	mTX_OUT_A
,

303 
	mTX_OUT_B
,

305 
	mNUM_DEBUG_PTS


310 
i16
 
	mmode
;

311 
i16
 
	mpoöt
[
NUM_DEBUG_PTS
];

312 
i16
 
	måa˚
[16];

313 
i16
 
	msˇÀ
[16];

314 
i16
 
	moff£t
[16];

315 
i16
 
	mbuf„r
[16 * 
SAMPLES_PER_BLOCK
];

316 
i16
 *
	msour˚
[16];

317 } 
	tt_sdbg
;

321 
i16
 
	mlock
;

322 
i16
 
	m›ti⁄
;

323 
i16
 
	mdebug
;

324 
i16
 
	mdebug˙t
;

325 
i32
 
	mrx‰ame˙t
;

326 
i32
 
	mtx‰ame˙t
;

328 
i32
 
	mskew
;

330 
i16
 
	m‰ames
;

331 
i16
 
	m‰amesize
;

332 
i16
 
	mbuf„rsize
;

334 
i32
 
	mtimî
;

336 
i32
 
	mx0
,
	mx1
,
	my0
,
	my1
;

338 
i16
 
	möputödex
;

339 
i16
 
	mouçutödex
;

340 
i16
 
	mÀad
;

341 
i16
 
	mîr
;

342 
i16
 
	maccum
;

344 
i16
 *
	m±r
;

345 
i16
 *
	mbuff
;

347 
i16
 
	möput˙t
;

348 
i16
 
	möô˙t
;

350 
i32
 
	mÁ˘‹
;

351 
i32
 
	mdri·
;

352 
i32
 
	mmodulus
;

353 
i32
 
	mz1
;

355 
	mrxlock
:1;

356 
	mtxlock
:1;

357 
	mtwiddÀ
:1;

358 
	mdoônow
:1;

359 }
	mb
;

361 
	tt_dedri·
;

368 
i16
 
	mcou¡î
;

369 
i16
 
	mcou¡îFa˘‹
;

370 
i16
 
	mböFa˘‹
;

371 
i16
 
	mfudgeFa˘‹
;

372 
i16
 
	m≥ak
;

373 
i16
 
	míabÀd
;

374 
i16
 
	m°©e
;

375 
i16
 
	mzIndex
;

376 
i16
 
	mz
[4];

377 
i16
 
	mzi
;

378 
i16
 
	mdvu
;

379 
i16
 
	mdvd
;

380 
i16
 
	mzd
;

381 
i16
 
	m£çt
;

382 
i16
 
	mhy°
;

383 
i16
 
	mdecode
;

384 
i16
 
	mdifÂók
;

385 
i16
 
	mdebug
;

387 #i‡
XPMR_DEBUG0
 == 1

388 
i16
 
	mœ°tv0
;

389 
i16
 
	mœ°tv1
;

390 
i16
 
	mœ°tv2
;

391 
i16
 
	mœ°tv3
;

393 
i16
 *
	mpDebug0
;

394 
i16
 *
	mpDebug1
;

395 
i16
 *
	mpDebug2
;

396 
i16
 *
	mpDebug3
;

399 } 
	tt_tdë
;

403 
i16
 
	míabÀd
;

404 
i16
 *
	möput
;

405 
i16
 
	m˛am∂ôude
;

406 
i16
 
	m˚¡î
;

407 
i16
 
	mdecode
;

408 
i32
 
	mBœnkögTimî
;

409 
u32
 
	mTu∫OffTimî
;

410 
i16
 
	mgaö
;

411 
i16
 
	mlimô
;

412 
i16
 
	mdebugIndex
;

413 
i16
 *
	mpDebug0
;

414 
i16
 *
	mpDebug1
;

415 
i16
 *
	mpDebug2
;

416 
i16
 *
	mpDebug3
;

417 
i16
 
	mã°Index
;

418 
i16
 
	mmu…iFªq
;

419 
i8
 
	mªœx
;

420 
t_tdë
 
	mtdë
[
CTCSS_NUM_CODES
];

422 
i8
 
	mnumrxcodes
;

423 
i16
 
	mrxCtcssM≠
[
CTCSS_NUM_CODES
];

424 *
	mrx˘css
[
CTCSS_NUM_CODES
];

425 *
	mtx˘css
[
CTCSS_NUM_CODES
];

427 
i32
 
	mtx˘cssdeÁu…_ödex
;

428 
	mtx˘cssdeÁu…_vÆue
;

431 
	mvÆid
:1;

432 }
	mb
;

433 } 
	tt_dec_˘css
;

442 
	gt_pmr_ch™
;

444 
	st_pmr_•s


446 
i16
 
	mödex
;

448 
i16
 
	míabÀd
;

450 
t_pmr_ch™
 *
	m∑ª¡Ch™
;

451 
i16
 *
	msour˚
;

452 
i16
 *
	msour˚B
;

453 
i16
 *
	msök
;

455 
i16
 
	mnumCh™Out
;

456 
i16
 
	m£lCh™Out
;

458 
i32
 
	mticks
;

459 
i32
 
	mtimî
;

460 
i32
 
	mcou¡
;

462 *
	mbuff
;

464 
i16
 *
	mdebugBuff0
;

465 
i16
 *
	mdebugBuff1
;

466 
i16
 *
	mdebugBuff2
;

467 
i16
 *
	mdebugBuff3
;

469 
i16
 
	mnSam∂es
;

471 
u32
 
	mbuffSize
;

472 
u32
 
	mbuffInIndex
;

473 
u32
 
	mbuffOutIndex
;

474 
u32
 
	mbuffLód
;

476 
i16
 
	mdecim©e
;

477 
i16
 
	möãΩﬁ©e
;

478 
i16
 
	mdecim©‹
;

480 
u32
 
	mßm∂eR©e
;

481 
u32
 
	m‰eq
;

483 
i16
 
	mmósPók
;

484 
i16
 
	mamax
;

485 
i16
 
	mamö
;

486 
i16
 
	m≠ók
;

487 
i16
 
	m£çt
;

488 
i16
 
	mhy°
;

489 
i16
 
	mcompOut
;

490 
i16
 
	mbœnkög
;

492 
i32
 
	mdiscou¡îu
;

493 
i32
 
	mdiscou¡îl
;

494 
i32
 
	mdiscÁ˘‹
;

496 
i16
 
	mîr
;

497 
i16
 
	m›ti⁄
;

498 
i16
 
	m°©e
;

500 
i16
 
	m≥ndög
;

503 
	mhô
:1;

504 
	mhôœ°
:1;

505 
	mhôa
:1;

506 
	mhôb
:1;

507 
	mbôhô
:1;

508 
	mnow
:1;

509 
	m√xt
:1;

510 
	m¥ev
:1;

511 
	m˛ock
:1;

512 
	mhﬁd
:1;

513 
	m›t1
:1;

514 
	m›t2
:1;

515 
	mpﬁ¨ôy
:1;

516 
	mdŸtög
:1;

517 
	mœ°bô≥ndög
:1;

518 
	moutzîo
:1;

519 
	m£âlög
:1;

520 
	msyncög
:1;

521 
	mdúty
:1;

522 
	mmuã
:1;

523 }
	mb
;

525 
i16
 
	m˛óªd
;

527 
i16
 
	mdñay
;

528 
i16
 
	mdecode
;

530 
i32
 
	möputGaö
;

531 
i32
 
	möputGaöB
;

532 
i32
 
	mouçutGaö
;

533 
i16
 
	mmixOut
;

534 
i16
 
	mm⁄oOut
;

536 
i16
 
	mfûãrTy≥
;

538 
i16
 (*
sigProc
)(
t_pmr_•s
 *
	m•s
);

540 
i32
 
	mˇlcAdju°
;

541 
i16
 
	mnx
;

542 
i16
 
	mnc€f
;

543 
i16
 
	msize_x
;

544 
i16
 
	msize_c€f
;

545 *
	mx
;

546 *
	mx2
;

547 *
	mc€f
;

549 *
	my
;

550 *
	mc€Á
;

551 *
	mc€fb
;

553 *
	m√xtSps
;

555 } 
	tt_pmr_•s
;

558 
	gt_dec_dcs
;

559 
	gt_lsd_c⁄åﬁ
;

560 
	gt_decLsd
;;

561 
	gt_ícLsd
;

566 
	st_pmr_ch™


568 
i16
 
	mödex
;

569 
i16
 
	mdevi˚num
;

571 *
	m«me
;

573 
i16
 
	míabÀd
;

574 
i16
 
	m°©us
;

576 
i16
 
	måa˚Àvñ
;

577 
i16
 
	måa˚ty≥
;

578 
u32
 
	måa˚mask
;

580 
i16
 
	mnSam∂esRx
;

581 
i16
 
	mnSam∂esTx
;

583 
i32
 
	möputSam∂eR©e
;

584 
i32
 
	mba£Sam∂eR©e
;

586 
i16
 
	möputGaö
;

587 
i16
 
	möputOff£t
;

589 
i32
 
	mticks
;

590 
u32
 
	m‰ameCou¡Rx
;

591 
u32
 
	m‰ameCou¡Tx
;

593 
i8
 
	mtx‰amñock
;

595 
i32
 
	mtxH™gTime
;

596 
i32
 
	mtxH™gTimî
;

597 
i32
 
	mtxTu∫Off
;

598 
i16
 
	mtxBuf„rCÀ¨
;

600 
u32
 
	mtx‰eq
;

601 
u32
 
	mrx‰eq
;

602 
i8
 
	mtxpowî
;

604 
i32
 
	mtx£âÀtime
;

605 
i32
 
	mtx£âÀtimî
;

607 
i16
 
	mtxrxbœnkögtime
;

608 
i16
 
	mtxrxbœnkögtimî
;

610 
i16
 
	mrxDC
;

611 
i16
 
	mrxSqSë
;

612 
i16
 
	mrxSqHy°
;

613 
i16
 
	mrxRssi
;

614 
i16
 
	mrxQuÆôy
;

615 
i16
 
	mrxC¨rõrDëe˘
;

616 
i16
 
	mrxCdTy≥
;

617 
i16
 
	mrxSqVoxAdj
;

618 
i16
 
	mrxExtC¨rõrDëe˘
;

619 
i32
 
	möputBœnkög
;

621 
i16
 
	mrxDemod
;

622 
i16
 
	mtxMod
;

624 
i16
 
	mrxNoi£SquñchE«bÀ
;

625 
i16
 
	mrxHpfE«bÀ
;

626 
i16
 
	mrxDeEmpE«bÀ
;

627 
i16
 
	mrxCíãrSli˚rE«bÀ
;

628 
i16
 
	mrxCtcssDecodeE«bÀ
;

629 
i16
 
	mrxDcsDecodeE«bÀ
;

630 
i16
 
	mrxSquñchDñay
;

632 
i16
 
	mtxHpfE«bÀ
;

633 
i16
 
	mtxLimôîE«bÀ
;

634 
i16
 
	mtxPªEmpE«bÀ
;

635 
i16
 
	mtxLpfE«bÀ
;

637 
	mødioDu∂ex
;

638 
	mrxNoi£FûTy≥
;

640 *
	mpSå
;

643 *
	mpRxCodeSrc
;

644 *
	mpTxCodeSrc
;

645 *
	mpTxCodeDeÁu…
;

649 
i16
 
	mnumrxcodes
;

650 
i16
 
	mnumtxcodes
;

651 *
	mpRxCodeSå
;

652 **
	mpRxCode
;

653 *
	mpTxCodeSå
;

654 **
	mpTxCode
;

656 
	mtx˘cssdeÁu…
[16];

658 *
	mrx˘css‰eqs
;

659 *
	mtx˘css‰eqs
;

661 
	mnumrx˘css‰eqs
;

662 
	mnumtx˘css‰eqs
;

664 *
	mrx˘css
[
CTCSS_NUM_CODES
];

665 *
	mtx˘css
[
CTCSS_NUM_CODES
];

667 
i16
 
	mrxCtcssM≠
[
CTCSS_NUM_CODES
];

669 
i8
 
	mtxcodedeÁu…smode
;

670 
i16
 
	mtx˘cssdeÁu…_ödex
;

671 
	mtx˘cssdeÁu…_vÆue
;

673 
	mtx˘css‰eq
[32];

674 
	mrx˘css‰eq
[32];

677 
t_lsd_c⁄åﬁ
 *
	mpLsdCé
;

679 
i16
 
	mΩäum
;

680 
i16
 
	m¨ó
;

681 *
	mukey
;

682 
u32
 
	midÀöãrvÆ
;

683 
	mtu∫offs
;

685 
	mµlock
;

687 
t_dedri·
 
	mdd
;

689 
i16
 
	mdummy
;

691 
i32
 
	mtxS¸amFªq
;

692 
i32
 
	mrxS¸amFªq
;

694 
i16
 
	mgaöVoi˚
;

695 
i16
 
	mgaöSubAudibÀ
;

697 
i16
 
	mtxMixA
;

698 
i16
 
	mtxMixB
;

700 
i16
 
	mrxMutög
;

702 
i16
 
	mrxCpuSavî
;

703 
i16
 
	mtxCpuSavî
;

705 
i8
 
	mrxSqMode
;

707 
i8
 
	mcdMëhod
;

709 
i16
 
	mrxSquñchPoöt
;

711 
i16
 
	mrxC¨rõrPoöt
;

712 
i16
 
	mrxC¨rõrHy°
;

714 
i16
 
	mtxCtcssTocShi·
;

715 
i16
 
	mtxCtcssTocTime
;

716 
i8
 
	mtxTocTy≥
;

718 
i16
 
	msmode
;

719 
i16
 
	msmodecode
;

720 
i16
 
	msmodewas
;

721 
i32
 
	msmodëimî
;

722 
i32
 
	msmodëime
;

724 
t_dec_˘css
 *
	mrxCtcss
;

725 
t_dec_dcs
 *
	mdecDcs
;

726 
t_decLsd
 *
	mdecLsd
;

727 
t_ícLsd
 *
	mpLsdEnc
;

729 
i16
 
	m˛am∂ôudeDcs
;

730 
i16
 
	m˚¡îDcs
;

731 
u32
 
	mdcsBœnkögTimî
;

732 
i16
 
	mdcsDecode
;

734 
i16
 
	m˛am∂ôudeLsd
;

735 
i16
 
	m˚¡îLsd
;

738 
i16
 
	mtxPâIn
;

739 
i16
 
	mtxPâOut
;

740 
i16
 
	mtxPâHid
;

742 
i16
 
	mb™dwidth
;

743 
i16
 
	mtxCom∑nd
;

744 
i16
 
	mrxCom∑nd
;

746 
i16
 
	mtxEqRight
;

747 
i16
 
	mtxEqLe·
;

749 
i16
 
	mtxPŸRight
;

750 
i16
 
	mtxPŸLe·
;

752 
i16
 
	mrxPŸRight
;

753 
i16
 
	mrxPŸLe·
;

755 
i16
 
	mfun˘i⁄
;

757 
i16
 
	mtxSèã
;

759 
i16
 
	m•sIndex
;

761 
i16
 
	mœ°rxdecode
;

763 
t_pmr_•s
 *
	m•sMósuª
;

765 
t_pmr_•s
 *
	m•sRx
;

766 
t_pmr_•s
 *
	m•sRxLsd
;

767 
t_pmr_•s
 *
	m•sRxLsdNrz
;

768 
t_pmr_•s
 *
	m•sRxDeEmp
;

769 
t_pmr_•s
 *
	m•sRxHpf
;

770 
t_pmr_•s
 *
	m•sRxVox
;

771 
t_pmr_•s
 *
	m•sDñayLöe
;

772 
t_pmr_•s
 *
	m•sRxSquñchDñay
;

773 
t_pmr_•s
 *
	m•sRxOut
;

775 
t_pmr_•s
 *
	m•sTx
;

777 
t_pmr_•s
 *
	m•sTxOutA
;

778 
t_pmr_•s
 *
	m•sTxOutB
;

780 
t_pmr_•s
 *
	m•sSigGí0
;

781 
t_pmr_•s
 *
	m•sSigGí1
;

782 
t_pmr_•s
 *
	m•sLsdGí
;

783 
t_pmr_•s
 *
	m•sTxLsdLpf
;

787 
i32
 
	mrxVoxTimî
;

789 
i16
 *
	m¥xSquñchAdju°
;

794 
i16
 *
	m¥xVoi˚Mósuª
;

795 
i32
 *
	m¥xVoi˚Adju°
;

797 
i16
 *
	m¥xCtcssMósuª
;

798 
i32
 *
	m¥xCtcssAdju°
;

800 
i16
 *
	m±xVoi˚Adju°
;

801 
i32
 *
	m±xCtcssAdju°
;

803 
i32
 *
	m±xLimôîAdju°
;

806 
	mpmrNoi£Squñch
:1;

807 
	mrxHpf
:1;

808 
	mtxHpf
:1;

809 
	mtxLpf
:1;

810 
	mrxDeEmphasis
:1;

811 
	mtxPªEmphasis
:1;

812 
	m°¨tS≥cülT⁄e
:1;

813 
	m°›S≥cülT⁄e
:1;

814 
	mdoögS≥cülT⁄e
:1;

815 
	mextC¨rõrDëe˘
:1;

816 
	mtxC≠tuª
:1;

817 
	mrxC≠tuª
:1;

818 
	mª¥og
:1;

819 
	mødiﬂ˘ive
:1;

820 
	mrx∂m⁄
:1;

821 
	mªmŸed
:1;

822 
	mlo›back
:1;

823 
	mrxpﬁ¨ôy
:1;

824 
	mtxpﬁ¨ôy
:1;

825 
	mdc§xpﬁ¨ôy
:1;

826 
	mdc°xpﬁ¨ôy
:1;

827 
	mlsdrxpﬁ¨ôy
:1;

828 
	mlsdtxpﬁ¨ôy
:1;

829 
	mtx£âlög
:1;

830 
	msmodëu∫off
:1;

832 
	m˘cssRxE«bÀ
:1;

833 
	m˘cssTxE«bÀ
:1;

834 
	mdcsRxE«bÀ
:1;

835 
	mdcsTxE«bÀ
:1;

836 
	mlmrRxE«bÀ
:1;

837 
	mlmrTxE«bÀ
:1;

838 
	mmdcRxE«bÀ
:1;

839 
	mmdcTxE«bÀ
:1;

840 
	md°RxE«bÀ
:1;

841 
	md°TxE«bÀ
:1;

842 
	mp25RxE«bÀ
:1;

843 
	mp25TxE«bÀ
:1;

844 
	max25E«bÀ
:1;

846 
	mtxCtcssInhibô
:1;

847 
	mtxCtcssRódy
:1;

848 
	mtxCtcssOff
:1;

850 
	mrxkeyed
:1;

851 
	mrxhÆãd
:1;

852 
	mtxhÆãd
:1;

853 
	mµç_p1
:1;

854 
	mµç_p2
:1;

855 
	mtunög
:1;

856 
	m±twas
:1;

857 
	mtxboo°
:1;

858 }
	mb
;

860 
i16
 *
	mpRxDemod
;

861 
i16
 *
	mpRxBa£
;

862 
i16
 *
	mpRxNoi£
;

863 
i16
 *
	mpRxLsd
;

864 
i16
 *
	mpRxHpf
;

865 
i16
 *
	mpRxDeEmp
;

866 
i16
 *
	mpRxS≥akî
;

867 
i16
 *
	mpRxDcTøck
;

868 
i16
 *
	mpRxLsdLimô
;

869 
i16
 *
	mpRxCtcss
;

870 
i16
 *
	mpRxSquñch
;

871 
i16
 *
	m¥xVoxMós
;

872 
i16
 *
	m¥xMósuª
;

874 
i16
 *
	mpTxI≈ut
;

875 
i16
 *
	mpTxBa£
;

876 
i16
 *
	mpTxHpf
;

877 
i16
 *
	mpTxPªEmp
;

878 
i16
 *
	mpTxLimôî
;

879 
i16
 *
	mpTxLsd
;

880 
i16
 *
	mpTxLsdLpf
;

881 
i16
 *
	mpTxComposôe
;

882 
i16
 *
	mpTxMod
;

884 
i16
 *
	mpTxOut
;

886 
i16
 *
	mpSigGí0
;

887 
i16
 *
	mpSigGí1
;

889 
i16
 *
	mpA…0
;

890 
i16
 *
	mpA…1
;

892 
i16
 *
	mpNuŒ
;

894 #i‡
XPMR_DEBUG0
 == 1

896 
i16
 *
	mpRxLsdCí
;

898 
i16
 *
	mpT°TxOut
;

900 
i16
 *
	m¥xDebug
;

901 
i16
 *
	m±xDebug
;

903 
i16
 *
	m¥xDebug0
;

904 
i16
 *
	m¥xDebug1
;

905 
i16
 *
	m¥xDebug2
;

906 
i16
 *
	m¥xDebug3
;

908 
i16
 *
	m±xDebug0
;

909 
i16
 *
	m±xDebug1
;

910 
i16
 *
	m±xDebug2
;

911 
i16
 *
	m±xDebug3
;

915 
i16
 
	mnumDebugCh™√ls
;

917 
t_sdbg
 *
	msdbg
;

919 } 
	tt_pmr_ch™
;

924 
°ø˚
(
i16
 
poöt
, 
t_sdbg
 *
sdbg
, i16 
ödex
, i16 
vÆue
);

925 
°ø˚2
(
t_sdbg
 *
sdbg
);

927 #i‚def 
XPMR_VOTER


928 
i16
 
TxTe°T⁄e
(
t_pmr_ch™
 *
pCh™
, i16 
fun˘i⁄
);

930 
t_pmr_ch™
 *
¸óãPmrCh™√l
—_pmr_ch™ *
tCh™
, 
i16
 
numSam∂es
);

931 
t_pmr_•s
 *
¸óãPmrSps
(
t_pmr_ch™
 *
pCh™
);

932 
i16
 
de°royPmrCh™√l
(
t_pmr_ch™
 *
pCh™
);

933 
i16
 
de°royPmrSps
(
t_pmr_•s
 *
pSps
);

934 
i16
 
pmr_rx_‰⁄ãnd
(
t_pmr_•s
 *
mySps
);

935 
i16
 
pmr_gp_fú
(
t_pmr_•s
 *
mySps
);

936 
i16
 
pmr_gp_iú
(
t_pmr_•s
 *
mySps
);

937 
i16
 
gp_öã_00
(
t_pmr_•s
 *
mySps
);

938 
i16
 
gp_diff
(
t_pmr_•s
 *
mySps
);

939 
i16
 
CíãrSli˚r
(
t_pmr_•s
 *
mySps
);

940 
i16
 
˘css_dëe˘
(
t_pmr_ch™
 *
pmrCh™
);

941 
i16
 
So·Limôî
(
t_pmr_•s
 *
mySps
);

942 
i16
 
SigGí
(
t_pmr_•s
 *
mySps
);

943 
i16
 
pmrMixî
(
t_pmr_•s
 *
mySps
);

944 
i16
 
DñayLöe
(
t_pmr_•s
 *
mySps
);

946 
i16
 
PmrRx
(
t_pmr_ch™
 *
PmrCh™
, i16 *
öput
, i16 *
ouçuåx
, i16 *
ouçuâx
 );

947 
i16
 
PmrTx
(
t_pmr_ch™
 *
PmrCh™
, i16 *
öput
);

949 
i16
 
°rög_∑r£
(*
§c
, **
de°
, ***
±rs
);

950 
i16
 
code_°rög_∑r£
(
t_pmr_ch™
 *
pCh™
);

952 
i16
 
CtcssFªqIndex
(
‰eq
);

953 
i16
 
MósuªBlock
(
t_pmr_•s
 *
mySps
);

955 
dedri·
 (
t_pmr_ch™
 *
pCh™
);

956 
dedri·_wrôe
 (
t_pmr_ch™
 *
pCh™
, 
i16
 *
§c
);

958 
µ•iout
 (
u32
 
•id©a
);

959 
¥ogdtx
 (
t_pmr_ch™
 *
pCh™
);

960 
µböout
 (
u8
 
ch™
);

962 #i‡
XPMR_PPTP
 == 1

963 
µç_öô
 ();

964 
µç_wrôe
 (
i16
 
bô
, i16 
°©e
);

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/alsa/asoundef.h

28 #i‚de‡
__ALSA_ASOUNDEF_H


29 
	#__ALSA_ASOUNDEF_H


	)

31 #ifde‡
__˝lu•lus


41 
	#IEC958_AES0_PROFESSIONAL
 (1<<0Ë

	)

42 
	#IEC958_AES0_NONAUDIO
 (1<<1Ë

	)

43 
	#IEC958_AES0_PRO_EMPHASIS
 (7<<2Ë

	)

44 
	#IEC958_AES0_PRO_EMPHASIS_NOTID
 (0<<2Ë

	)

45 
	#IEC958_AES0_PRO_EMPHASIS_NONE
 (1<<2Ë

	)

46 
	#IEC958_AES0_PRO_EMPHASIS_5015
 (3<<2Ë

	)

47 
	#IEC958_AES0_PRO_EMPHASIS_CCITT
 (7<<2Ë

	)

48 
	#IEC958_AES0_PRO_FREQ_UNLOCKED
 (1<<5Ë

	)

49 
	#IEC958_AES0_PRO_FS
 (3<<6Ë

	)

50 
	#IEC958_AES0_PRO_FS_NOTID
 (0<<6Ë

	)

51 
	#IEC958_AES0_PRO_FS_44100
 (1<<6Ë

	)

52 
	#IEC958_AES0_PRO_FS_48000
 (2<<6Ë

	)

53 
	#IEC958_AES0_PRO_FS_32000
 (3<<6Ë

	)

54 
	#IEC958_AES0_CON_NOT_COPYRIGHT
 (1<<2Ë

	)

55 
	#IEC958_AES0_CON_EMPHASIS
 (7<<3Ë

	)

56 
	#IEC958_AES0_CON_EMPHASIS_NONE
 (0<<3Ë

	)

57 
	#IEC958_AES0_CON_EMPHASIS_5015
 (1<<3Ë

	)

58 
	#IEC958_AES0_CON_MODE
 (3<<6Ë

	)

59 
	#IEC958_AES1_PRO_MODE
 (15<<0Ë

	)

60 
	#IEC958_AES1_PRO_MODE_NOTID
 (0<<0Ë

	)

61 
	#IEC958_AES1_PRO_MODE_STEREOPHONIC
 (2<<0Ë

	)

62 
	#IEC958_AES1_PRO_MODE_SINGLE
 (4<<0Ë

	)

63 
	#IEC958_AES1_PRO_MODE_TWO
 (8<<0Ë

	)

64 
	#IEC958_AES1_PRO_MODE_PRIMARY
 (12<<0Ë

	)

65 
	#IEC958_AES1_PRO_MODE_BYTE3
 (15<<0Ë

	)

66 
	#IEC958_AES1_PRO_USERBITS
 (15<<4Ë

	)

67 
	#IEC958_AES1_PRO_USERBITS_NOTID
 (0<<4Ë

	)

68 
	#IEC958_AES1_PRO_USERBITS_192
 (8<<4Ë

	)

69 
	#IEC958_AES1_PRO_USERBITS_UDEF
 (12<<4Ë

	)

70 
	#IEC958_AES1_CON_CATEGORY
 0x7‡

	)

71 
	#IEC958_AES1_CON_GENERAL
 0x00

	)

72 
	#IEC958_AES1_CON_LASEROPT_MASK
 0x07

	)

73 
	#IEC958_AES1_CON_LASEROPT_ID
 0x01

	)

74 
	#IEC958_AES1_CON_IEC908_CD
 (
IEC958_AES1_CON_LASEROPT_ID
|0x00Ë

	)

75 
	#IEC958_AES1_CON_NON_IEC908_CD
 (
IEC958_AES1_CON_LASEROPT_ID
|0x08Ë

	)

76 
	#IEC958_AES1_CON_MINI_DISC
 (
IEC958_AES1_CON_LASEROPT_ID
|0x48Ë

	)

77 
	#IEC958_AES1_CON_DVD
 (
IEC958_AES1_CON_LASEROPT_ID
|0x18Ë

	)

78 
	#IEC958_AES1_CON_LASTEROPT_OTHER
 (
IEC958_AES1_CON_LASEROPT_ID
|0x78Ë

	)

79 
	#IEC958_AES1_CON_DIGDIGCONV_MASK
 0x07

	)

80 
	#IEC958_AES1_CON_DIGDIGCONV_ID
 0x02

	)

81 
	#IEC958_AES1_CON_PCM_CODER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x00Ë

	)

82 
	#IEC958_AES1_CON_MIXER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x10Ë

	)

83 
	#IEC958_AES1_CON_RATE_CONVERTER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x18Ë

	)

84 
	#IEC958_AES1_CON_SAMPLER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x20Ë

	)

85 
	#IEC958_AES1_CON_DSP
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x28Ë

	)

86 
	#IEC958_AES1_CON_DIGDIGCONV_OTHER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x78Ë

	)

87 
	#IEC958_AES1_CON_MAGNETIC_MASK
 0x07

	)

88 
	#IEC958_AES1_CON_MAGNETIC_ID
 0x03

	)

89 
	#IEC958_AES1_CON_DAT
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x00Ë

	)

90 
	#IEC958_AES1_CON_VCR
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x08Ë

	)

91 
	#IEC958_AES1_CON_DCC
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x40Ë

	)

92 
	#IEC958_AES1_CON_MAGNETIC_DISC
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x18Ë

	)

93 
	#IEC958_AES1_CON_MAGNETIC_OTHER
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x78Ë

	)

94 
	#IEC958_AES1_CON_BROADCAST1_MASK
 0x07

	)

95 
	#IEC958_AES1_CON_BROADCAST1_ID
 0x04

	)

96 
	#IEC958_AES1_CON_DAB_JAPAN
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x00Ë

	)

97 
	#IEC958_AES1_CON_DAB_EUROPE
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x08Ë

	)

98 
	#IEC958_AES1_CON_DAB_USA
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x60Ë

	)

99 
	#IEC958_AES1_CON_SOFTWARE
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x40Ë

	)

100 
	#IEC958_AES1_CON_IEC62105
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x20Ë

	)

101 
	#IEC958_AES1_CON_BROADCAST1_OTHER
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x78Ë

	)

102 
	#IEC958_AES1_CON_BROADCAST2_MASK
 0x0‡

	)

103 
	#IEC958_AES1_CON_BROADCAST2_ID
 0x0ê

	)

104 
	#IEC958_AES1_CON_MUSICAL_MASK
 0x07

	)

105 
	#IEC958_AES1_CON_MUSICAL_ID
 0x05

	)

106 
	#IEC958_AES1_CON_SYNTHESIZER
 (
IEC958_AES1_CON_MUSICAL_ID
|0x00Ë

	)

107 
	#IEC958_AES1_CON_MICROPHONE
 (
IEC958_AES1_CON_MUSICAL_ID
|0x08Ë

	)

108 
	#IEC958_AES1_CON_MUSICAL_OTHER
 (
IEC958_AES1_CON_MUSICAL_ID
|0x78Ë

	)

109 
	#IEC958_AES1_CON_ADC_MASK
 0x1‡

	)

110 
	#IEC958_AES1_CON_ADC_ID
 0x06

	)

111 
	#IEC958_AES1_CON_ADC
 (
IEC958_AES1_CON_ADC_ID
|0x00Ë

	)

112 
	#IEC958_AES1_CON_ADC_OTHER
 (
IEC958_AES1_CON_ADC_ID
|0x60Ë

	)

113 
	#IEC958_AES1_CON_ADC_COPYRIGHT_MASK
 0x1‡

	)

114 
	#IEC958_AES1_CON_ADC_COPYRIGHT_ID
 0x16

	)

115 
	#IEC958_AES1_CON_ADC_COPYRIGHT
 (
IEC958_AES1_CON_ADC_COPYRIGHT_ID
|0x00Ë

	)

116 
	#IEC958_AES1_CON_ADC_COPYRIGHT_OTHER
 (
IEC958_AES1_CON_ADC_COPYRIGHT_ID
|0x60Ë

	)

117 
	#IEC958_AES1_CON_SOLIDMEM_MASK
 0x0‡

	)

118 
	#IEC958_AES1_CON_SOLIDMEM_ID
 0x08

	)

119 
	#IEC958_AES1_CON_SOLIDMEM_DIGITAL_RECORDER_PLAYER
 (
IEC958_AES1_CON_SOLIDMEM_ID
|0x00Ë

	)

120 
	#IEC958_AES1_CON_SOLIDMEM_OTHER
 (
IEC958_AES1_CON_SOLIDMEM_ID
|0x70Ë

	)

121 
	#IEC958_AES1_CON_EXPERIMENTAL
 0x40

	)

122 
	#IEC958_AES1_CON_ORIGINAL
 (1<<7Ë

	)

123 
	#IEC958_AES2_PRO_SBITS
 (7<<0Ë

	)

124 
	#IEC958_AES2_PRO_SBITS_20
 (2<<0Ë

	)

125 
	#IEC958_AES2_PRO_SBITS_24
 (4<<0Ë

	)

126 
	#IEC958_AES2_PRO_SBITS_UDEF
 (6<<0Ë

	)

127 
	#IEC958_AES2_PRO_WORDLEN
 (7<<3Ë

	)

128 
	#IEC958_AES2_PRO_WORDLEN_NOTID
 (0<<3Ë

	)

129 
	#IEC958_AES2_PRO_WORDLEN_22_18
 (2<<3Ë

	)

130 
	#IEC958_AES2_PRO_WORDLEN_23_19
 (4<<3Ë

	)

131 
	#IEC958_AES2_PRO_WORDLEN_24_20
 (5<<3Ë

	)

132 
	#IEC958_AES2_PRO_WORDLEN_20_16
 (6<<3Ë

	)

133 
	#IEC958_AES2_CON_SOURCE
 (15<<0Ë

	)

134 
	#IEC958_AES2_CON_SOURCE_UNSPEC
 (0<<0Ë

	)

135 
	#IEC958_AES2_CON_CHANNEL
 (15<<4Ë

	)

136 
	#IEC958_AES2_CON_CHANNEL_UNSPEC
 (0<<4Ë

	)

137 
	#IEC958_AES3_CON_FS
 (15<<0Ë

	)

138 
	#IEC958_AES3_CON_FS_44100
 (0<<0Ë

	)

139 
	#IEC958_AES3_CON_FS_NOTID
 (1<<0Ë

	)

140 
	#IEC958_AES3_CON_FS_48000
 (2<<0Ë

	)

141 
	#IEC958_AES3_CON_FS_32000
 (3<<0Ë

	)

142 
	#IEC958_AES3_CON_FS_22050
 (4<<0Ë

	)

143 
	#IEC958_AES3_CON_FS_24000
 (6<<0Ë

	)

144 
	#IEC958_AES3_CON_FS_88200
 (8<<0Ë

	)

145 
	#IEC958_AES3_CON_FS_768000
 (9<<0Ë

	)

146 
	#IEC958_AES3_CON_FS_96000
 (10<<0Ë

	)

147 
	#IEC958_AES3_CON_FS_176400
 (12<<0Ë

	)

148 
	#IEC958_AES3_CON_FS_192000
 (14<<0Ë

	)

149 
	#IEC958_AES3_CON_CLOCK
 (3<<4Ë

	)

150 
	#IEC958_AES3_CON_CLOCK_1000PPM
 (0<<4Ë

	)

151 
	#IEC958_AES3_CON_CLOCK_50PPM
 (1<<4Ë

	)

152 
	#IEC958_AES3_CON_CLOCK_VARIABLE
 (2<<4Ë

	)

153 
	#IEC958_AES4_CON_MAX_WORDLEN_24
 (1<<0Ë

	)

154 
	#IEC958_AES4_CON_WORDLEN
 (7<<1Ë

	)

155 
	#IEC958_AES4_CON_WORDLEN_NOTID
 (0<<1Ë

	)

156 
	#IEC958_AES4_CON_WORDLEN_20_16
 (1<<1Ë

	)

157 
	#IEC958_AES4_CON_WORDLEN_22_18
 (2<<1Ë

	)

158 
	#IEC958_AES4_CON_WORDLEN_23_19
 (4<<1Ë

	)

159 
	#IEC958_AES4_CON_WORDLEN_24_20
 (5<<1Ë

	)

160 
	#IEC958_AES4_CON_WORDLEN_21_17
 (6<<1Ë

	)

161 
	#IEC958_AES4_CON_ORIGFS
 (15<<4Ë

	)

162 
	#IEC958_AES4_CON_ORIGFS_NOTID
 (0<<4Ë

	)

163 
	#IEC958_AES4_CON_ORIGFS_192000
 (1<<4Ë

	)

164 
	#IEC958_AES4_CON_ORIGFS_12000
 (2<<4Ë

	)

165 
	#IEC958_AES4_CON_ORIGFS_176400
 (3<<4Ë

	)

166 
	#IEC958_AES4_CON_ORIGFS_96000
 (5<<4Ë

	)

167 
	#IEC958_AES4_CON_ORIGFS_8000
 (6<<4Ë

	)

168 
	#IEC958_AES4_CON_ORIGFS_88200
 (7<<4Ë

	)

169 
	#IEC958_AES4_CON_ORIGFS_16000
 (8<<4Ë

	)

170 
	#IEC958_AES4_CON_ORIGFS_24000
 (9<<4Ë

	)

171 
	#IEC958_AES4_CON_ORIGFS_11025
 (10<<4Ë

	)

172 
	#IEC958_AES4_CON_ORIGFS_22050
 (11<<4Ë

	)

173 
	#IEC958_AES4_CON_ORIGFS_32000
 (12<<4Ë

	)

174 
	#IEC958_AES4_CON_ORIGFS_48000
 (13<<4Ë

	)

175 
	#IEC958_AES4_CON_ORIGFS_44100
 (15<<4Ë

	)

176 
	#IEC958_AES5_CON_CGMSA
 (3<<0Ë

	)

177 
	#IEC958_AES5_CON_CGMSA_COPYFREELY
 (0<<0Ë

	)

178 
	#IEC958_AES5_CON_CGMSA_COPYONCE
 (1<<0Ë

	)

179 
	#IEC958_AES5_CON_CGMSA_COPYNOMORE
 (2<<0Ë

	)

180 
	#IEC958_AES5_CON_CGMSA_COPYNEVER
 (3<<0Ë

	)

190 
	#MIDI_CHANNELS
 16

	)

191 
	#MIDI_GM_DRUM_CHANNEL
 (10-1Ë

	)

199 
	#MIDI_CMD_NOTE_OFF
 0x80

	)

200 
	#MIDI_CMD_NOTE_ON
 0x90

	)

201 
	#MIDI_CMD_NOTE_PRESSURE
 0xa0

	)

202 
	#MIDI_CMD_CONTROL
 0xb0

	)

203 
	#MIDI_CMD_PGM_CHANGE
 0xc0

	)

204 
	#MIDI_CMD_CHANNEL_PRESSURE
 0xd0

	)

205 
	#MIDI_CMD_BENDER
 0xe0

	)

207 
	#MIDI_CMD_COMMON_SYSEX
 0xf0

	)

208 
	#MIDI_CMD_COMMON_MTC_QUARTER
 0xf1

	)

209 
	#MIDI_CMD_COMMON_SONG_POS
 0xf2

	)

210 
	#MIDI_CMD_COMMON_SONG_SELECT
 0xf3

	)

211 
	#MIDI_CMD_COMMON_TUNE_REQUEST
 0xf6

	)

212 
	#MIDI_CMD_COMMON_SYSEX_END
 0xf7

	)

213 
	#MIDI_CMD_COMMON_CLOCK
 0xf8

	)

214 
	#MIDI_CMD_COMMON_START
 0xÁ

	)

215 
	#MIDI_CMD_COMMON_CONTINUE
 0xfb

	)

216 
	#MIDI_CMD_COMMON_STOP
 0xf¯

	)

217 
	#MIDI_CMD_COMMON_SENSING
 0x„

	)

218 
	#MIDI_CMD_COMMON_RESET
 0xf‡

	)

228 
	#MIDI_CTL_MSB_BANK
 0x00

	)

229 
	#MIDI_CTL_MSB_MODWHEEL
 0x01

	)

230 
	#MIDI_CTL_MSB_BREATH
 0x02

	)

231 
	#MIDI_CTL_MSB_FOOT
 0x04

	)

232 
	#MIDI_CTL_MSB_PORTAMENTO_TIME
 0x05

	)

233 
	#MIDI_CTL_MSB_DATA_ENTRY
 0x06

	)

234 
	#MIDI_CTL_MSB_MAIN_VOLUME
 0x07

	)

235 
	#MIDI_CTL_MSB_BALANCE
 0x08

	)

236 
	#MIDI_CTL_MSB_PAN
 0x0®

	)

237 
	#MIDI_CTL_MSB_EXPRESSION
 0x0b

	)

238 
	#MIDI_CTL_MSB_EFFECT1
 0x0¯

	)

239 
	#MIDI_CTL_MSB_EFFECT2
 0x0d

	)

240 
	#MIDI_CTL_MSB_GENERAL_PURPOSE1
 0x10

	)

241 
	#MIDI_CTL_MSB_GENERAL_PURPOSE2
 0x11

	)

242 
	#MIDI_CTL_MSB_GENERAL_PURPOSE3
 0x12

	)

243 
	#MIDI_CTL_MSB_GENERAL_PURPOSE4
 0x13

	)

244 
	#MIDI_CTL_LSB_BANK
 0x20

	)

245 
	#MIDI_CTL_LSB_MODWHEEL
 0x21

	)

246 
	#MIDI_CTL_LSB_BREATH
 0x22

	)

247 
	#MIDI_CTL_LSB_FOOT
 0x24

	)

248 
	#MIDI_CTL_LSB_PORTAMENTO_TIME
 0x25

	)

249 
	#MIDI_CTL_LSB_DATA_ENTRY
 0x26

	)

250 
	#MIDI_CTL_LSB_MAIN_VOLUME
 0x27

	)

251 
	#MIDI_CTL_LSB_BALANCE
 0x28

	)

252 
	#MIDI_CTL_LSB_PAN
 0x2®

	)

253 
	#MIDI_CTL_LSB_EXPRESSION
 0x2b

	)

254 
	#MIDI_CTL_LSB_EFFECT1
 0x2¯

	)

255 
	#MIDI_CTL_LSB_EFFECT2
 0x2d

	)

256 
	#MIDI_CTL_LSB_GENERAL_PURPOSE1
 0x30

	)

257 
	#MIDI_CTL_LSB_GENERAL_PURPOSE2
 0x31

	)

258 
	#MIDI_CTL_LSB_GENERAL_PURPOSE3
 0x32

	)

259 
	#MIDI_CTL_LSB_GENERAL_PURPOSE4
 0x33

	)

260 
	#MIDI_CTL_SUSTAIN
 0x40

	)

261 
	#MIDI_CTL_PORTAMENTO
 0x41

	)

262 
	#MIDI_CTL_SOSTENUTO
 0x42

	)

263 
	#MIDI_CTL_SUSTENUTO
 0x42

	)

264 
	#MIDI_CTL_SOFT_PEDAL
 0x43

	)

265 
	#MIDI_CTL_LEGATO_FOOTSWITCH
 0x44

	)

266 
	#MIDI_CTL_HOLD2
 0x45

	)

267 
	#MIDI_CTL_SC1_SOUND_VARIATION
 0x46

	)

268 
	#MIDI_CTL_SC2_TIMBRE
 0x47

	)

269 
	#MIDI_CTL_SC3_RELEASE_TIME
 0x48

	)

270 
	#MIDI_CTL_SC4_ATTACK_TIME
 0x49

	)

271 
	#MIDI_CTL_SC5_BRIGHTNESS
 0x4®

	)

272 
	#MIDI_CTL_SC6
 0x4b

	)

273 
	#MIDI_CTL_SC7
 0x4¯

	)

274 
	#MIDI_CTL_SC8
 0x4d

	)

275 
	#MIDI_CTL_SC9
 0x4ê

	)

276 
	#MIDI_CTL_SC10
 0x4‡

	)

277 
	#MIDI_CTL_GENERAL_PURPOSE5
 0x50

	)

278 
	#MIDI_CTL_GENERAL_PURPOSE6
 0x51

	)

279 
	#MIDI_CTL_GENERAL_PURPOSE7
 0x52

	)

280 
	#MIDI_CTL_GENERAL_PURPOSE8
 0x53

	)

281 
	#MIDI_CTL_PORTAMENTO_CONTROL
 0x54

	)

282 
	#MIDI_CTL_E1_REVERB_DEPTH
 0x5b

	)

283 
	#MIDI_CTL_E2_TREMOLO_DEPTH
 0x5¯

	)

284 
	#MIDI_CTL_E3_CHORUS_DEPTH
 0x5d

	)

285 
	#MIDI_CTL_E4_DETUNE_DEPTH
 0x5ê

	)

286 
	#MIDI_CTL_E5_PHASER_DEPTH
 0x5‡

	)

287 
	#MIDI_CTL_DATA_INCREMENT
 0x60

	)

288 
	#MIDI_CTL_DATA_DECREMENT
 0x61

	)

289 
	#MIDI_CTL_NONREG_PARM_NUM_LSB
 0x62

	)

290 
	#MIDI_CTL_NONREG_PARM_NUM_MSB
 0x63

	)

291 
	#MIDI_CTL_REGIST_PARM_NUM_LSB
 0x64

	)

292 
	#MIDI_CTL_REGIST_PARM_NUM_MSB
 0x65

	)

293 
	#MIDI_CTL_ALL_SOUNDS_OFF
 0x78

	)

294 
	#MIDI_CTL_RESET_CONTROLLERS
 0x79

	)

295 
	#MIDI_CTL_LOCAL_CONTROL_SWITCH
 0x7®

	)

296 
	#MIDI_CTL_ALL_NOTES_OFF
 0x7b

	)

297 
	#MIDI_CTL_OMNI_OFF
 0x7¯

	)

298 
	#MIDI_CTL_OMNI_ON
 0x7d

	)

299 
	#MIDI_CTL_MONO1
 0x7ê

	)

300 
	#MIDI_CTL_MONO2
 0x7‡

	)

306 #ifde‡
__˝lu•lus


	@/usr/include/alsa/conf.h

28 #i‚de‡
__ALSA_CONF_H


29 
	#__ALSA_CONF_H


	)

31 #ifde‡
__˝lu•lus


43 
	#SND_CONFIG_DLSYM_VERSION_EVALUATE
 
_dlsym_c⁄fig_evÆu©e_001


	)

45 
	#SND_CONFIG_DLSYM_VERSION_HOOK
 
_dlsym_c⁄fig_hook_001


	)

48 
	e_¢d_c⁄fig_ty≥
 {

50 
SND_CONFIG_TYPE_INTEGER
,

52 
SND_CONFIG_TYPE_INTEGER64
,

54 
SND_CONFIG_TYPE_REAL
,

56 
SND_CONFIG_TYPE_STRING
,

58 
SND_CONFIG_TYPE_POINTER
,

60 
SND_CONFIG_TYPE_COMPOUND
 = 1024

61 } 
	t¢d_c⁄fig_ty≥_t
;

69 
_¢d_c⁄fig
 
	t¢d_c⁄fig_t
;

77 
_¢d_c⁄fig_ôî©‹
 *
	t¢d_c⁄fig_ôî©‹_t
;

83 
_¢d_c⁄fig_upd©e
 
	t¢d_c⁄fig_upd©e_t
;

85 
¢d_c⁄fig_t
 *
¢d_c⁄fig
;

87 
¢d_c⁄fig_t›
(
¢d_c⁄fig_t
 **
c⁄fig
);

89 
¢d_c⁄fig_lﬂd
(
¢d_c⁄fig_t
 *
c⁄fig
, 
¢d_öput_t
 *
ö
);

90 
¢d_c⁄fig_lﬂd_ovîride
(
¢d_c⁄fig_t
 *
c⁄fig
, 
¢d_öput_t
 *
ö
);

91 
¢d_c⁄fig_ßve
(
¢d_c⁄fig_t
 *
c⁄fig
, 
¢d_ouçut_t
 *
out
);

92 
¢d_c⁄fig_upd©e
();

93 
¢d_c⁄fig_upd©e_r
(
¢d_c⁄fig_t
 **
t›
, 
¢d_c⁄fig_upd©e_t
 **
upd©e
, c⁄° *
∑th
);

94 
¢d_c⁄fig_upd©e_‰ì
(
¢d_c⁄fig_upd©e_t
 *
upd©e
);

95 
¢d_c⁄fig_upd©e_‰ì_globÆ
();

97 
¢d_c⁄fig_£¨ch
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
key
,

98 
¢d_c⁄fig_t
 **
ªsu…
);

99 
¢d_c⁄fig_£¨chv
(
¢d_c⁄fig_t
 *
c⁄fig
,

100 
¢d_c⁄fig_t
 **
ªsu…
, ...);

101 
¢d_c⁄fig_£¨ch_deföôi⁄
(
¢d_c⁄fig_t
 *
c⁄fig
,

102 c⁄° *
ba£
, c⁄° *
key
,

103 
¢d_c⁄fig_t
 **
ªsu…
);

105 
¢d_c⁄fig_ex∑nd
(
¢d_c⁄fig_t
 *
c⁄fig
, snd_c⁄fig_à*
roŸ
,

106 c⁄° *
¨gs
, 
¢d_c⁄fig_t
 *
¥iv©e_d©a
,

107 
¢d_c⁄fig_t
 **
ªsu…
);

108 
¢d_c⁄fig_evÆu©e
(
¢d_c⁄fig_t
 *
c⁄fig
, snd_c⁄fig_à*
roŸ
,

109 
¢d_c⁄fig_t
 *
¥iv©e_d©a
, snd_c⁄fig_à**
ªsu…
);

111 
¢d_c⁄fig_add
(
¢d_c⁄fig_t
 *
c⁄fig
, snd_c⁄fig_à*
Àaf
);

112 
¢d_c⁄fig_dñëe
(
¢d_c⁄fig_t
 *
c⁄fig
);

113 
¢d_c⁄fig_dñëe_compound_membîs
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
);

114 
¢d_c⁄fig_c›y
(
¢d_c⁄fig_t
 **
d°
, snd_c⁄fig_à*
§c
);

116 
¢d_c⁄fig_make
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
,

117 
¢d_c⁄fig_ty≥_t
 
ty≥
);

118 
¢d_c⁄fig_make_öãgî
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

119 
¢d_c⁄fig_make_öãgî64
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

120 
¢d_c⁄fig_make_ªÆ
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

121 
¢d_c⁄fig_make_°rög
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

122 
¢d_c⁄fig_make_poöãr
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

123 
¢d_c⁄fig_make_compound
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, 
joö
);

125 
¢d_c⁄fig_imake_öãgî
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° 
vÆue
);

126 
¢d_c⁄fig_imake_öãgî64
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° 
vÆue
);

127 
¢d_c⁄fig_imake_ªÆ
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° 
vÆue
);

128 
¢d_c⁄fig_imake_°rög
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° *
ascii
);

129 
¢d_c⁄fig_imake_poöãr
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° *
±r
);

131 
¢d_c⁄fig_ty≥_t
 
¢d_c⁄fig_gë_ty≥
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
);

133 
¢d_c⁄fig_£t_id
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
id
);

134 
¢d_c⁄fig_£t_öãgî
(
¢d_c⁄fig_t
 *
c⁄fig
, 
vÆue
);

135 
¢d_c⁄fig_£t_öãgî64
(
¢d_c⁄fig_t
 *
c⁄fig
, 
vÆue
);

136 
¢d_c⁄fig_£t_ªÆ
(
¢d_c⁄fig_t
 *
c⁄fig
, 
vÆue
);

137 
¢d_c⁄fig_£t_°rög
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
vÆue
);

138 
¢d_c⁄fig_£t_ascii
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
ascii
);

139 
¢d_c⁄fig_£t_poöãr
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
±r
);

140 
¢d_c⁄fig_gë_id
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° **
vÆue
);

141 
¢d_c⁄fig_gë_öãgî
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, *
vÆue
);

142 
¢d_c⁄fig_gë_öãgî64
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, *
vÆue
);

143 
¢d_c⁄fig_gë_ªÆ
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, *
vÆue
);

144 
¢d_c⁄fig_gë_úól
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, *
vÆue
);

145 
¢d_c⁄fig_gë_°rög
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° **
vÆue
);

146 
¢d_c⁄fig_gë_ascii
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, **
vÆue
);

147 
¢d_c⁄fig_gë_poöãr
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° **
vÆue
);

148 
¢d_c⁄fig_ã°_id
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
id
);

150 
¢d_c⁄fig_ôî©‹_t
 
¢d_c⁄fig_ôî©‹_fú°
(c⁄° 
¢d_c⁄fig_t
 *
node
);

151 
¢d_c⁄fig_ôî©‹_t
 
¢d_c⁄fig_ôî©‹_√xt
(c⁄° snd_c⁄fig_ôî©‹_à
ôî©‹
);

152 
¢d_c⁄fig_ôî©‹_t
 
¢d_c⁄fig_ôî©‹_íd
(c⁄° 
¢d_c⁄fig_t
 *
node
);

153 
¢d_c⁄fig_t
 *
¢d_c⁄fig_ôî©‹_íåy
(c⁄° 
¢d_c⁄fig_ôî©‹_t
 
ôî©‹
);

172 
	#¢d_c⁄fig_f‹_óch
(
pos
, 
√xt
, 
node
) \

173 
pos
 = 
	`¢d_c⁄fig_ôî©‹_fú°
(
node
), 
√xt
 = 
	`¢d_c⁄fig_ôî©‹_√xt
’os);Öo†!
	`¢d_c⁄fig_ôî©‹_íd
“ode);Öo†√xt,Çexà¢d_c⁄fig_ôî©‹_√xt’os))

	)

177 
¢d_c⁄fig_gë_boﬁ_ascii
(c⁄° *
ascii
);

178 
¢d_c⁄fig_gë_boﬁ
(c⁄° 
¢d_c⁄fig_t
 *
c⁄f
);

179 
¢d_c⁄fig_gë_˘l_iÁ˚_ascii
(c⁄° *
ascii
);

180 
¢d_c⁄fig_gë_˘l_iÁ˚
(c⁄° 
¢d_c⁄fig_t
 *
c⁄f
);

187 
¢d_dev«me
 
	t¢d_dev«me_t
;

192 
	s¢d_dev«me
 {

193 *
	g«me
;

194 *
	gcommít
;

195 
¢d_dev«me_t
 *
	g√xt
;

198 
¢d_«mes_li°
(c⁄° *
iÁ˚
, 
¢d_dev«me_t
 **
li°
);

199 
¢d_«mes_li°_‰ì
(
¢d_dev«me_t
 *
li°
);

203 #ifde‡
__˝lu•lus


	@/usr/include/alsa/control.h

28 #i‚de‡
__ALSA_CONTROL_H


29 
	#__ALSA_CONTROL_H


	)

31 #ifde‡
__˝lu•lus


43 
	#SND_CONTROL_DLSYM_VERSION
 
_dlsym_c⁄åﬁ_001


	)

46 
	s¢d_´s_õc958
 {

47 
°©us
[24];

48 
subcode
[147];

49 
∑d
;

50 
dig_sub‰ame
[4];

51 } 
	t¢d_´s_õc958_t
;

54 
_¢d_˘l_ˇrd_öfo
 
	t¢d_˘l_ˇrd_öfo_t
;

57 
_¢d_˘l_ñem_id
 
	t¢d_˘l_ñem_id_t
;

60 
_¢d_˘l_ñem_li°
 
	t¢d_˘l_ñem_li°_t
;

63 
_¢d_˘l_ñem_öfo
 
	t¢d_˘l_ñem_öfo_t
;

66 
_¢d_˘l_ñem_vÆue
 
	t¢d_˘l_ñem_vÆue_t
;

69 
_¢d_˘l_evít
 
	t¢d_˘l_evít_t
;

72 
	e_¢d_˘l_ñem_ty≥
 {

74 
SND_CTL_ELEM_TYPE_NONE
 = 0,

76 
SND_CTL_ELEM_TYPE_BOOLEAN
,

78 
SND_CTL_ELEM_TYPE_INTEGER
,

80 
SND_CTL_ELEM_TYPE_ENUMERATED
,

82 
SND_CTL_ELEM_TYPE_BYTES
,

84 
SND_CTL_ELEM_TYPE_IEC958
,

86 
SND_CTL_ELEM_TYPE_INTEGER64
,

87 
SND_CTL_ELEM_TYPE_LAST
 = 
SND_CTL_ELEM_TYPE_INTEGER64


88 } 
	t¢d_˘l_ñem_ty≥_t
;

91 
	e_¢d_˘l_ñem_iÁ˚
 {

93 
SND_CTL_ELEM_IFACE_CARD
 = 0,

95 
SND_CTL_ELEM_IFACE_HWDEP
,

97 
SND_CTL_ELEM_IFACE_MIXER
,

99 
SND_CTL_ELEM_IFACE_PCM
,

101 
SND_CTL_ELEM_IFACE_RAWMIDI
,

103 
SND_CTL_ELEM_IFACE_TIMER
,

105 
SND_CTL_ELEM_IFACE_SEQUENCER
,

106 
SND_CTL_ELEM_IFACE_LAST
 = 
SND_CTL_ELEM_IFACE_SEQUENCER


107 } 
	t¢d_˘l_ñem_iÁ˚_t
;

110 
	e_¢d_˘l_evít_ty≥
 {

112 
SND_CTL_EVENT_ELEM
 = 0,

113 
SND_CTL_EVENT_LAST
 = 
SND_CTL_EVENT_ELEM


114 }
	t¢d_˘l_evít_ty≥_t
;

118 
	#SND_CTL_EVENT_MASK_REMOVE
 (~0U)

	)

120 
	#SND_CTL_EVENT_MASK_VALUE
 (1<<0)

	)

122 
	#SND_CTL_EVENT_MASK_INFO
 (1<<1)

	)

124 
	#SND_CTL_EVENT_MASK_ADD
 (1<<2)

	)

126 
	#SND_CTL_EVENT_MASK_TLV
 (1<<3)

	)

129 
	#SND_CTL_NAME_NONE
 ""

	)

131 
	#SND_CTL_NAME_PLAYBACK
 "Pœyback "

	)

133 
	#SND_CTL_NAME_CAPTURE
 "C≠tuª "

	)

136 
	#SND_CTL_NAME_IEC958_NONE
 ""

	)

138 
	#SND_CTL_NAME_IEC958_SWITCH
 "Swôch"

	)

140 
	#SND_CTL_NAME_IEC958_VOLUME
 "Vﬁume"

	)

142 
	#SND_CTL_NAME_IEC958_DEFAULT
 "DeÁu…"

	)

144 
	#SND_CTL_NAME_IEC958_MASK
 "Mask"

	)

146 
	#SND_CTL_NAME_IEC958_CON_MASK
 "C⁄ Mask"

	)

148 
	#SND_CTL_NAME_IEC958_PRO_MASK
 "PrÿMask"

	)

150 
	#SND_CTL_NAME_IEC958_PCM_STREAM
 "PCM Såóm"

	)

152 
	#SND_CTL_NAME_IEC958
(
ex∂
,
dúe˘i⁄
,
wh©
Ë"IEC958 "Éx∂ 
SND_CTL_NAME_
##dúe˘i⁄ 
SND_CTL_NAME_IEC958_
##
	)
what

155 
	#SND_CTL_POWER_MASK
 0xff00

	)

157 
	#SND_CTL_POWER_D0
 0x0000

	)

159 
	#SND_CTL_POWER_D1
 0x0100

	)

161 
	#SND_CTL_POWER_D2
 0x0200

	)

163 
	#SND_CTL_POWER_D3
 0x0300

	)

165 
	#SND_CTL_POWER_D3hŸ
 (
SND_CTL_POWER_D3
|0x0000)

	)

167 
	#SND_CTL_POWER_D3cﬁd
 (
SND_CTL_POWER_D3
|0x0001)

	)

170 
	#SND_CTL_TLVT_CONTAINER
 0x0000

	)

172 
	#SND_CTL_TLVT_DB_SCALE
 0x0001

	)

174 
	#SND_CTL_TLVT_DB_LINEAR
 0x0002

	)

176 
	#SND_CTL_TLVT_DB_RANGE
 0x0003

	)

178 
	#SND_CTL_TLVT_DB_MINMAX
 0x0004

	)

180 
	#SND_CTL_TLVT_DB_MINMAX_MUTE
 0x0005

	)

183 
	#SND_CTL_TLV_DB_GAIN_MUTE
 -9999999

	)

186 
	#SND_CTL_TLVT_CHMAP_FIXED
 0x00101

	)

188 
	#SND_CTL_TLVT_CHMAP_VAR
 0x00102

	)

190 
	#SND_CTL_TLVT_CHMAP_PAIRED
 0x00103

	)

193 
	e_¢d_˘l_ty≥
 {

195 
SND_CTL_TYPE_HW
,

197 
SND_CTL_TYPE_SHM
,

199 
SND_CTL_TYPE_INET
,

201 
SND_CTL_TYPE_EXT


202 } 
	t¢d_˘l_ty≥_t
;

205 
	#SND_CTL_NONBLOCK
 0x0001

	)

208 
	#SND_CTL_ASYNC
 0x0002

	)

211 
	#SND_CTL_READONLY
 0x0004

	)

214 
_¢d_˘l
 
	t¢d_˘l_t
;

217 
	#SND_SCTL_NOFREE
 0x0001

	)

220 
_¢d_s˘l
 
	t¢d_s˘l_t
;

222 
¢d_ˇrd_lﬂd
(
ˇrd
);

223 
¢d_ˇrd_√xt
(*
ˇrd
);

224 
¢d_ˇrd_gë_ödex
(c⁄° *
«me
);

225 
¢d_ˇrd_gë_«me
(
ˇrd
, **
«me
);

226 
¢d_ˇrd_gë_l⁄g«me
(
ˇrd
, **
«me
);

228 
¢d_devi˚_«me_höt
(
ˇrd
, c⁄° *
iÁ˚
, ***
höts
);

229 
¢d_devi˚_«me_‰ì_höt
(**
höts
);

230 *
¢d_devi˚_«me_gë_höt
(c⁄° *
höt
, c⁄° *
id
);

232 
¢d_˘l_›í
(
¢d_˘l_t
 **
˘l
, c⁄° *
«me
, 
mode
);

233 
¢d_˘l_›í_lc⁄f
(
¢d_˘l_t
 **
˘l
, c⁄° *
«me
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

234 
¢d_˘l_›í_ÁŒback
(
¢d_˘l_t
 **
˘l
, 
¢d_c⁄fig_t
 *
roŸ
, c⁄° *
«me
, c⁄° *
‹ig_«me
, 
mode
);

235 
¢d_˘l_˛o£
(
¢d_˘l_t
 *
˘l
);

236 
¢d_˘l_n⁄block
(
¢d_˘l_t
 *
˘l
, 
n⁄block
);

237 
¢d_async_add_˘l_h™dÀr
(
¢d_async_h™dÀr_t
 **
h™dÀr
, 
¢d_˘l_t
 *
˘l
,

238 
¢d_async_ˇŒback_t
 
ˇŒback
, *
¥iv©e_d©a
);

239 
¢d_˘l_t
 *
¢d_async_h™dÀr_gë_˘l
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

240 
¢d_˘l_pﬁl_des¸ùt‹s_cou¡
(
¢d_˘l_t
 *
˘l
);

241 
¢d_˘l_pﬁl_des¸ùt‹s
(
¢d_˘l_t
 *
˘l
, 
pﬁlfd
 *
pfds
, 
•a˚
);

242 
¢d_˘l_pﬁl_des¸ùt‹s_ªvíts
(
¢d_˘l_t
 *
˘l
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

243 
¢d_˘l_subs¸ibe_evíts
(
¢d_˘l_t
 *
˘l
, 
subs¸ibe
);

244 
¢d_˘l_ˇrd_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ˇrd_öfo_t
 *
öfo
);

245 
¢d_˘l_ñem_li°
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_li°_t
 *
li°
);

246 
¢d_˘l_ñem_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_öfo_t
 *
öfo
);

247 
¢d_˘l_ñem_ªad
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_vÆue_t
 *
vÆue
);

248 
¢d_˘l_ñem_wrôe
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_vÆue_t
 *
vÆue
);

249 
¢d_˘l_ñem_lock
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_id_t
 *
id
);

250 
¢d_˘l_ñem_u∆ock
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_id_t
 *
id
);

251 
¢d_˘l_ñem_év_ªad
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

252 *
év
, 
év_size
);

253 
¢d_˘l_ñem_év_wrôe
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

254 c⁄° *
év
);

255 
¢d_˘l_ñem_év_comm™d
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

256 c⁄° *
év
);

257 #ifde‡
__ALSA_HWDEP_H


258 
¢d_˘l_hwdï_√xt_devi˚
(
¢d_˘l_t
 *
˘l
, * 
devi˚
);

259 
¢d_˘l_hwdï_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_hwdï_öfo_t
 * 
öfo
);

261 #ifde‡
__ALSA_PCM_H


262 
¢d_˘l_pcm_√xt_devi˚
(
¢d_˘l_t
 *
˘l
, *
devi˚
);

263 
¢d_˘l_pcm_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_pcm_öfo_t
 * 
öfo
);

264 
¢d_˘l_pcm_¥e„r_subdevi˚
(
¢d_˘l_t
 *
˘l
, 
subdev
);

266 #ifde‡
__ALSA_RAWMIDI_H


267 
¢d_˘l_øwmidi_√xt_devi˚
(
¢d_˘l_t
 *
˘l
, * 
devi˚
);

268 
¢d_˘l_øwmidi_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_øwmidi_öfo_t
 * 
öfo
);

269 
¢d_˘l_øwmidi_¥e„r_subdevi˚
(
¢d_˘l_t
 *
˘l
, 
subdev
);

271 
¢d_˘l_£t_powî_°©e
(
¢d_˘l_t
 *
˘l
, 
°©e
);

272 
¢d_˘l_gë_powî_°©e
(
¢d_˘l_t
 *
˘l
, *
°©e
);

274 
¢d_˘l_ªad
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_evít_t
 *
evít
);

275 
¢d_˘l_waô
(
¢d_˘l_t
 *
˘l
, 
timeout
);

276 c⁄° *
¢d_˘l_«me
(
¢d_˘l_t
 *
˘l
);

277 
¢d_˘l_ty≥_t
 
¢d_˘l_ty≥
(
¢d_˘l_t
 *
˘l
);

279 c⁄° *
¢d_˘l_ñem_ty≥_«me
(
¢d_˘l_ñem_ty≥_t
 
ty≥
);

280 c⁄° *
¢d_˘l_ñem_iÁ˚_«me
(
¢d_˘l_ñem_iÁ˚_t
 
iÁ˚
);

281 c⁄° *
¢d_˘l_evít_ty≥_«me
(
¢d_˘l_evít_ty≥_t
 
ty≥
);

283 
¢d_˘l_evít_ñem_gë_mask
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

284 
¢d_˘l_evít_ñem_gë_numid
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

285 
¢d_˘l_evít_ñem_gë_id
(c⁄° 
¢d_˘l_evít_t
 *
obj
, 
¢d_˘l_ñem_id_t
 *
±r
);

286 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_evít_ñem_gë_öãrÁ˚
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

287 
¢d_˘l_evít_ñem_gë_devi˚
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

288 
¢d_˘l_evít_ñem_gë_subdevi˚
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

289 c⁄° *
¢d_˘l_evít_ñem_gë_«me
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

290 
¢d_˘l_evít_ñem_gë_ödex
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

292 
¢d_˘l_ñem_li°_Æloc_•a˚
(
¢d_˘l_ñem_li°_t
 *
obj
, 
íåõs
);

293 
¢d_˘l_ñem_li°_‰ì_•a˚
(
¢d_˘l_ñem_li°_t
 *
obj
);

295 *
¢d_˘l_ascii_ñem_id_gë
(
¢d_˘l_ñem_id_t
 *
id
);

296 
¢d_˘l_ascii_ñem_id_∑r£
(
¢d_˘l_ñem_id_t
 *
d°
, c⁄° *
°r
);

297 
¢d_˘l_ascii_vÆue_∑r£
(
¢d_˘l_t
 *
h™dÀ
,

298 
¢d_˘l_ñem_vÆue_t
 *
d°
,

299 
¢d_˘l_ñem_öfo_t
 *
öfo
,

300 c⁄° *
vÆue
);

302 
size_t
 
¢d_˘l_ñem_id_sizeof
();

307 
	#¢d_˘l_ñem_id_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ñem_id
)

	)

308 
¢d_˘l_ñem_id_mÆloc
(
¢d_˘l_ñem_id_t
 **
±r
);

309 
¢d_˘l_ñem_id_‰ì
(
¢d_˘l_ñem_id_t
 *
obj
);

310 
¢d_˘l_ñem_id_˛ór
(
¢d_˘l_ñem_id_t
 *
obj
);

311 
¢d_˘l_ñem_id_c›y
(
¢d_˘l_ñem_id_t
 *
d°
, c⁄° snd_˘l_ñem_id_à*
§c
);

312 
¢d_˘l_ñem_id_gë_numid
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

313 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_ñem_id_gë_öãrÁ˚
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

314 
¢d_˘l_ñem_id_gë_devi˚
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

315 
¢d_˘l_ñem_id_gë_subdevi˚
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

316 c⁄° *
¢d_˘l_ñem_id_gë_«me
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

317 
¢d_˘l_ñem_id_gë_ödex
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

318 
¢d_˘l_ñem_id_£t_numid
(
¢d_˘l_ñem_id_t
 *
obj
, 
vÆ
);

319 
¢d_˘l_ñem_id_£t_öãrÁ˚
(
¢d_˘l_ñem_id_t
 *
obj
, 
¢d_˘l_ñem_iÁ˚_t
 
vÆ
);

320 
¢d_˘l_ñem_id_£t_devi˚
(
¢d_˘l_ñem_id_t
 *
obj
, 
vÆ
);

321 
¢d_˘l_ñem_id_£t_subdevi˚
(
¢d_˘l_ñem_id_t
 *
obj
, 
vÆ
);

322 
¢d_˘l_ñem_id_£t_«me
(
¢d_˘l_ñem_id_t
 *
obj
, c⁄° *
vÆ
);

323 
¢d_˘l_ñem_id_£t_ödex
(
¢d_˘l_ñem_id_t
 *
obj
, 
vÆ
);

325 
size_t
 
¢d_˘l_ˇrd_öfo_sizeof
();

330 
	#¢d_˘l_ˇrd_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ˇrd_öfo
)

	)

331 
¢d_˘l_ˇrd_öfo_mÆloc
(
¢d_˘l_ˇrd_öfo_t
 **
±r
);

332 
¢d_˘l_ˇrd_öfo_‰ì
(
¢d_˘l_ˇrd_öfo_t
 *
obj
);

333 
¢d_˘l_ˇrd_öfo_˛ór
(
¢d_˘l_ˇrd_öfo_t
 *
obj
);

334 
¢d_˘l_ˇrd_öfo_c›y
(
¢d_˘l_ˇrd_öfo_t
 *
d°
, c⁄° snd_˘l_ˇrd_öfo_à*
§c
);

335 
¢d_˘l_ˇrd_öfo_gë_ˇrd
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

336 c⁄° *
¢d_˘l_ˇrd_öfo_gë_id
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

337 c⁄° *
¢d_˘l_ˇrd_öfo_gë_drivî
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

338 c⁄° *
¢d_˘l_ˇrd_öfo_gë_«me
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

339 c⁄° *
¢d_˘l_ˇrd_öfo_gë_l⁄g«me
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

340 c⁄° *
¢d_˘l_ˇrd_öfo_gë_mixî«me
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

341 c⁄° *
¢d_˘l_ˇrd_öfo_gë_comp⁄íts
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

343 
size_t
 
¢d_˘l_evít_sizeof
();

348 
	#¢d_˘l_evít_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_evít
)

	)

349 
¢d_˘l_evít_mÆloc
(
¢d_˘l_evít_t
 **
±r
);

350 
¢d_˘l_evít_‰ì
(
¢d_˘l_evít_t
 *
obj
);

351 
¢d_˘l_evít_˛ór
(
¢d_˘l_evít_t
 *
obj
);

352 
¢d_˘l_evít_c›y
(
¢d_˘l_evít_t
 *
d°
, c⁄° snd_˘l_evít_à*
§c
);

353 
¢d_˘l_evít_ty≥_t
 
¢d_˘l_evít_gë_ty≥
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

355 
size_t
 
¢d_˘l_ñem_li°_sizeof
();

360 
	#¢d_˘l_ñem_li°_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ñem_li°
)

	)

361 
¢d_˘l_ñem_li°_mÆloc
(
¢d_˘l_ñem_li°_t
 **
±r
);

362 
¢d_˘l_ñem_li°_‰ì
(
¢d_˘l_ñem_li°_t
 *
obj
);

363 
¢d_˘l_ñem_li°_˛ór
(
¢d_˘l_ñem_li°_t
 *
obj
);

364 
¢d_˘l_ñem_li°_c›y
(
¢d_˘l_ñem_li°_t
 *
d°
, c⁄° snd_˘l_ñem_li°_à*
§c
);

365 
¢d_˘l_ñem_li°_£t_off£t
(
¢d_˘l_ñem_li°_t
 *
obj
, 
vÆ
);

366 
¢d_˘l_ñem_li°_gë_u£d
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
);

367 
¢d_˘l_ñem_li°_gë_cou¡
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
);

368 
¢d_˘l_ñem_li°_gë_id
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
, 
¢d_˘l_ñem_id_t
 *
±r
);

369 
¢d_˘l_ñem_li°_gë_numid
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

370 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_ñem_li°_gë_öãrÁ˚
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

371 
¢d_˘l_ñem_li°_gë_devi˚
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

372 
¢d_˘l_ñem_li°_gë_subdevi˚
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

373 c⁄° *
¢d_˘l_ñem_li°_gë_«me
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

374 
¢d_˘l_ñem_li°_gë_ödex
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

376 
size_t
 
¢d_˘l_ñem_öfo_sizeof
();

381 
	#¢d_˘l_ñem_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ñem_öfo
)

	)

382 
¢d_˘l_ñem_öfo_mÆloc
(
¢d_˘l_ñem_öfo_t
 **
±r
);

383 
¢d_˘l_ñem_öfo_‰ì
(
¢d_˘l_ñem_öfo_t
 *
obj
);

384 
¢d_˘l_ñem_öfo_˛ór
(
¢d_˘l_ñem_öfo_t
 *
obj
);

385 
¢d_˘l_ñem_öfo_c›y
(
¢d_˘l_ñem_öfo_t
 *
d°
, c⁄° snd_˘l_ñem_öfo_à*
§c
);

386 
¢d_˘l_ñem_ty≥_t
 
¢d_˘l_ñem_öfo_gë_ty≥
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

387 
¢d_˘l_ñem_öfo_is_ªadabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

388 
¢d_˘l_ñem_öfo_is_wrôabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

389 
¢d_˘l_ñem_öfo_is_vﬁ©ûe
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

390 
¢d_˘l_ñem_öfo_is_öa˘ive
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

391 
¢d_˘l_ñem_öfo_is_locked
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

392 
¢d_˘l_ñem_öfo_is_év_ªadabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

393 
¢d_˘l_ñem_öfo_is_év_wrôabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

394 
¢d_˘l_ñem_öfo_is_év_comm™dabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

395 
¢d_˘l_ñem_öfo_is_ow√r
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

396 
¢d_˘l_ñem_öfo_is_u£r
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

397 
pid_t
 
¢d_˘l_ñem_öfo_gë_ow√r
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

398 
¢d_˘l_ñem_öfo_gë_cou¡
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

399 
¢d_˘l_ñem_öfo_gë_mö
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

400 
¢d_˘l_ñem_öfo_gë_max
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

401 
¢d_˘l_ñem_öfo_gë_°ï
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

402 
¢d_˘l_ñem_öfo_gë_mö64
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

403 
¢d_˘l_ñem_öfo_gë_max64
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

404 
¢d_˘l_ñem_öfo_gë_°ï64
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

405 
¢d_˘l_ñem_öfo_gë_ôems
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

406 
¢d_˘l_ñem_öfo_£t_ôem
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

407 c⁄° *
¢d_˘l_ñem_öfo_gë_ôem_«me
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

408 
¢d_˘l_ñem_öfo_gë_dimísi⁄s
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

409 
¢d_˘l_ñem_öfo_gë_dimísi⁄
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
, 
idx
);

410 
¢d_˘l_ñem_öfo_gë_id
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
, 
¢d_˘l_ñem_id_t
 *
±r
);

411 
¢d_˘l_ñem_öfo_gë_numid
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

412 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_ñem_öfo_gë_öãrÁ˚
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

413 
¢d_˘l_ñem_öfo_gë_devi˚
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

414 
¢d_˘l_ñem_öfo_gë_subdevi˚
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

415 c⁄° *
¢d_˘l_ñem_öfo_gë_«me
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

416 
¢d_˘l_ñem_öfo_gë_ödex
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

417 
¢d_˘l_ñem_öfo_£t_id
(
¢d_˘l_ñem_öfo_t
 *
obj
, c⁄° 
¢d_˘l_ñem_id_t
 *
±r
);

418 
¢d_˘l_ñem_öfo_£t_numid
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

419 
¢d_˘l_ñem_öfo_£t_öãrÁ˚
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
¢d_˘l_ñem_iÁ˚_t
 
vÆ
);

420 
¢d_˘l_ñem_öfo_£t_devi˚
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

421 
¢d_˘l_ñem_öfo_£t_subdevi˚
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

422 
¢d_˘l_ñem_öfo_£t_«me
(
¢d_˘l_ñem_öfo_t
 *
obj
, c⁄° *
vÆ
);

423 
¢d_˘l_ñem_öfo_£t_ödex
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

425 
¢d_˘l_ñem_add_öãgî
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
, 
cou¡
, 
imö
, 
imax
, 
i°ï
);

426 
¢d_˘l_ñem_add_öãgî64
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
, 
cou¡
, 
imö
, 
imax
, 
i°ï
);

427 
¢d_˘l_ñem_add_boﬁón
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
, 
cou¡
);

428 
¢d_˘l_ñem_add_íumî©ed
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
, 
cou¡
, 
ôems
, c⁄° *c⁄° 
«mes
[]);

429 
¢d_˘l_ñem_add_õc958
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
);

430 
¢d_˘l_ñem_ªmove
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_id_t
 *
id
);

432 
size_t
 
¢d_˘l_ñem_vÆue_sizeof
();

437 
	#¢d_˘l_ñem_vÆue_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ñem_vÆue
)

	)

438 
¢d_˘l_ñem_vÆue_mÆloc
(
¢d_˘l_ñem_vÆue_t
 **
±r
);

439 
¢d_˘l_ñem_vÆue_‰ì
(
¢d_˘l_ñem_vÆue_t
 *
obj
);

440 
¢d_˘l_ñem_vÆue_˛ór
(
¢d_˘l_ñem_vÆue_t
 *
obj
);

441 
¢d_˘l_ñem_vÆue_c›y
(
¢d_˘l_ñem_vÆue_t
 *
d°
, c⁄° snd_˘l_ñem_vÆue_à*
§c
);

442 
¢d_˘l_ñem_vÆue_com∑ª
(
¢d_˘l_ñem_vÆue_t
 *
À·
, c⁄° snd_˘l_ñem_vÆue_à*
right
);

443 
¢d_˘l_ñem_vÆue_gë_id
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
¢d_˘l_ñem_id_t
 *
±r
);

444 
¢d_˘l_ñem_vÆue_gë_numid
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

445 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_ñem_vÆue_gë_öãrÁ˚
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

446 
¢d_˘l_ñem_vÆue_gë_devi˚
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

447 
¢d_˘l_ñem_vÆue_gë_subdevi˚
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

448 c⁄° *
¢d_˘l_ñem_vÆue_gë_«me
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

449 
¢d_˘l_ñem_vÆue_gë_ödex
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

450 
¢d_˘l_ñem_vÆue_£t_id
(
¢d_˘l_ñem_vÆue_t
 *
obj
, c⁄° 
¢d_˘l_ñem_id_t
 *
±r
);

451 
¢d_˘l_ñem_vÆue_£t_numid
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
vÆ
);

452 
¢d_˘l_ñem_vÆue_£t_öãrÁ˚
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
¢d_˘l_ñem_iÁ˚_t
 
vÆ
);

453 
¢d_˘l_ñem_vÆue_£t_devi˚
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
vÆ
);

454 
¢d_˘l_ñem_vÆue_£t_subdevi˚
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
vÆ
);

455 
¢d_˘l_ñem_vÆue_£t_«me
(
¢d_˘l_ñem_vÆue_t
 *
obj
, c⁄° *
vÆ
);

456 
¢d_˘l_ñem_vÆue_£t_ödex
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
vÆ
);

457 
¢d_˘l_ñem_vÆue_gë_boﬁón
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

458 
¢d_˘l_ñem_vÆue_gë_öãgî
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

459 
¢d_˘l_ñem_vÆue_gë_öãgî64
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

460 
¢d_˘l_ñem_vÆue_gë_íumî©ed
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

461 
¢d_˘l_ñem_vÆue_gë_byã
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

462 
¢d_˘l_ñem_vÆue_£t_boﬁón
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

463 
¢d_˘l_ñem_vÆue_£t_öãgî
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

464 
¢d_˘l_ñem_vÆue_£t_öãgî64
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

465 
¢d_˘l_ñem_vÆue_£t_íumî©ed
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

466 
¢d_˘l_ñem_vÆue_£t_byã
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

467 
¢d_˘l_ñem_£t_byãs
(
¢d_˘l_ñem_vÆue_t
 *
obj
, *
d©a
, 
size_t
 
size
);

468 c⁄° * 
¢d_˘l_ñem_vÆue_gë_byãs
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

469 
¢d_˘l_ñem_vÆue_gë_õc958
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
¢d_´s_õc958_t
 *
±r
);

470 
¢d_˘l_ñem_vÆue_£t_õc958
(
¢d_˘l_ñem_vÆue_t
 *
obj
, c⁄° 
¢d_´s_õc958_t
 *
±r
);

472 
¢d_év_∑r£_dB_öfo
(*
év
, 
év_size
,

473 **
db_évp
);

474 
¢d_év_gë_dB_ønge
(*
év
, 
øngemö
, 
øngemax
,

475 *
mö
, *
max
);

476 
¢d_év_c⁄vît_to_dB
(*
év
, 
øngemö
, 
øngemax
,

477 
vﬁume
, *
db_gaö
);

478 
¢d_év_c⁄vît_‰om_dB
(*
év
, 
øngemö
, 
øngemax
,

479 
db_gaö
, *
vÆue
, 
xdú
);

480 
¢d_˘l_gë_dB_ønge
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

481 *
mö
, *
max
);

482 
¢d_˘l_c⁄vît_to_dB
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

483 
vﬁume
, *
db_gaö
);

484 
¢d_˘l_c⁄vît_‰om_dB
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

485 
db_gaö
, *
vÆue
, 
xdú
);

496 
_¢d_h˘l_ñem
 
	t¢d_h˘l_ñem_t
;

499 
_¢d_h˘l
 
	t¢d_h˘l_t
;

507 (*
¢d_h˘l_com∑ª_t
)(c⁄° 
	t¢d_h˘l_ñem_t
 *
	te1
,

508 c⁄° 
	t¢d_h˘l_ñem_t
 *
	te2
);

509 
¢d_h˘l_com∑ª_Á°
(c⁄° 
¢d_h˘l_ñem_t
 *
c1
,

510 c⁄° 
¢d_h˘l_ñem_t
 *
c2
);

518 (*
¢d_h˘l_ˇŒback_t
)(
	t¢d_h˘l_t
 *
	th˘l
,

519 
	tmask
,

520 
	t¢d_h˘l_ñem_t
 *
	tñem
);

527 (*
¢d_h˘l_ñem_ˇŒback_t
)(
	t¢d_h˘l_ñem_t
 *
	tñem
,

528 
	tmask
);

530 
¢d_h˘l_›í
(
¢d_h˘l_t
 **
h˘l
, c⁄° *
«me
, 
mode
);

531 
¢d_h˘l_›í_˘l
(
¢d_h˘l_t
 **
h˘Õ
, 
¢d_˘l_t
 *
˘l
);

532 
¢d_h˘l_˛o£
(
¢d_h˘l_t
 *
h˘l
);

533 
¢d_h˘l_n⁄block
(
¢d_h˘l_t
 *
h˘l
, 
n⁄block
);

534 
¢d_h˘l_pﬁl_des¸ùt‹s_cou¡
(
¢d_h˘l_t
 *
h˘l
);

535 
¢d_h˘l_pﬁl_des¸ùt‹s
(
¢d_h˘l_t
 *
h˘l
, 
pﬁlfd
 *
pfds
, 
•a˚
);

536 
¢d_h˘l_pﬁl_des¸ùt‹s_ªvíts
(
¢d_h˘l_t
 *
˘l
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

537 
¢d_h˘l_gë_cou¡
(
¢d_h˘l_t
 *
h˘l
);

538 
¢d_h˘l_£t_com∑ª
(
¢d_h˘l_t
 *
h˘l
, 
¢d_h˘l_com∑ª_t
 
hs‹t
);

539 
¢d_h˘l_ñem_t
 *
¢d_h˘l_fú°_ñem
(
¢d_h˘l_t
 *
h˘l
);

540 
¢d_h˘l_ñem_t
 *
¢d_h˘l_œ°_ñem
(
¢d_h˘l_t
 *
h˘l
);

541 
¢d_h˘l_ñem_t
 *
¢d_h˘l_föd_ñem
(
¢d_h˘l_t
 *
h˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
);

542 
¢d_h˘l_£t_ˇŒback
(
¢d_h˘l_t
 *
h˘l
, 
¢d_h˘l_ˇŒback_t
 
ˇŒback
);

543 
¢d_h˘l_£t_ˇŒback_¥iv©e
(
¢d_h˘l_t
 *
h˘l
, *
d©a
);

544 *
¢d_h˘l_gë_ˇŒback_¥iv©e
(
¢d_h˘l_t
 *
h˘l
);

545 
¢d_h˘l_lﬂd
(
¢d_h˘l_t
 *
h˘l
);

546 
¢d_h˘l_‰ì
(
¢d_h˘l_t
 *
h˘l
);

547 
¢d_h˘l_h™dÀ_evíts
(
¢d_h˘l_t
 *
h˘l
);

548 c⁄° *
¢d_h˘l_«me
(
¢d_h˘l_t
 *
h˘l
);

549 
¢d_h˘l_waô
(
¢d_h˘l_t
 *
h˘l
, 
timeout
);

550 
¢d_˘l_t
 *
¢d_h˘l_˘l
(
¢d_h˘l_t
 *
h˘l
);

552 
¢d_h˘l_ñem_t
 *
¢d_h˘l_ñem_√xt
(¢d_h˘l_ñem_à*
ñem
);

553 
¢d_h˘l_ñem_t
 *
¢d_h˘l_ñem_¥ev
(¢d_h˘l_ñem_à*
ñem
);

554 
¢d_h˘l_ñem_öfo
(
¢d_h˘l_ñem_t
 *
ñem
, 
¢d_˘l_ñem_öfo_t
 * 
öfo
);

555 
¢d_h˘l_ñem_ªad
(
¢d_h˘l_ñem_t
 *
ñem
, 
¢d_˘l_ñem_vÆue_t
 * 
vÆue
);

556 
¢d_h˘l_ñem_wrôe
(
¢d_h˘l_ñem_t
 *
ñem
, 
¢d_˘l_ñem_vÆue_t
 * 
vÆue
);

557 
¢d_h˘l_ñem_év_ªad
(
¢d_h˘l_ñem_t
 *
ñem
, *
év
, 
év_size
);

558 
¢d_h˘l_ñem_év_wrôe
(
¢d_h˘l_ñem_t
 *
ñem
, c⁄° *
év
);

559 
¢d_h˘l_ñem_év_comm™d
(
¢d_h˘l_ñem_t
 *
ñem
, c⁄° *
év
);

561 
¢d_h˘l_t
 *
¢d_h˘l_ñem_gë_h˘l
(
¢d_h˘l_ñem_t
 *
ñem
);

563 
¢d_h˘l_ñem_gë_id
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
, 
¢d_˘l_ñem_id_t
 *
±r
);

564 
¢d_h˘l_ñem_gë_numid
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

565 
¢d_˘l_ñem_iÁ˚_t
 
¢d_h˘l_ñem_gë_öãrÁ˚
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

566 
¢d_h˘l_ñem_gë_devi˚
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

567 
¢d_h˘l_ñem_gë_subdevi˚
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

568 c⁄° *
¢d_h˘l_ñem_gë_«me
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

569 
¢d_h˘l_ñem_gë_ödex
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

570 
¢d_h˘l_ñem_£t_ˇŒback
(
¢d_h˘l_ñem_t
 *
obj
, 
¢d_h˘l_ñem_ˇŒback_t
 
vÆ
);

571 * 
¢d_h˘l_ñem_gë_ˇŒback_¥iv©e
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

572 
¢d_h˘l_ñem_£t_ˇŒback_¥iv©e
(
¢d_h˘l_ñem_t
 *
obj
, * 
vÆ
);

585 
¢d_s˘l_buûd
(
¢d_s˘l_t
 **
˘l
, 
¢d_˘l_t
 *
h™dÀ
, 
¢d_c⁄fig_t
 *
c⁄fig
,

586 
¢d_c⁄fig_t
 *
¥iv©e_d©a
, 
mode
);

587 
¢d_s˘l_‰ì
(
¢d_s˘l_t
 *
h™dÀ
);

588 
¢d_s˘l_ö°Æl
(
¢d_s˘l_t
 *
h™dÀ
);

589 
¢d_s˘l_ªmove
(
¢d_s˘l_t
 *
h™dÀ
);

593 #ifde‡
__˝lu•lus


	@/usr/include/alsa/error.h

28 #i‚de‡
__ALSA_ERROR_H


29 
	#__ALSA_ERROR_H


	)

31 #ifde‡
__˝lu•lus


41 
	#SND_ERROR_BEGIN
 500000

	)

42 
	#SND_ERROR_INCOMPATIBLE_VERSION
 (
SND_ERROR_BEGIN
+0Ë

	)

43 
	#SND_ERROR_ALISP_NIL
 (
SND_ERROR_BEGIN
+1Ë

	)

45 c⁄° *
¢d_°ªº‹
(
î∫um
);

59 (*
¢d_lib_îr‹_h™dÀr_t
)(c⁄° *
	tfûe
, 
	tlöe
, c⁄° *
	tfun˘i⁄
, 
	tîr
, c⁄° *
	tfmt
, ...) ;

60 
¢d_lib_îr‹_h™dÀr_t
 
¢d_lib_îr‹
;

61 
¢d_lib_îr‹_£t_h™dÀr
(
¢d_lib_îr‹_h™dÀr_t
 
h™dÀr
);

63 #i‡
__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 > 95)

64 
	#SNDERR
(...Ë
	`¢d_lib_îr‹
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, 0, 
__VA_ARGS__
Ë

	)

65 
	#SYSERR
(...Ë
	`¢d_lib_îr‹
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, 
î∫o
, 
__VA_ARGS__
Ë

	)

67 
	#SNDERR
(
¨gs
...Ë
	`¢d_lib_îr‹
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, 0, ##¨gsË

	)

68 
	#SYSERR
(
¨gs
...Ë
	`¢d_lib_îr‹
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, 
î∫o
, ##¨gsË

	)

73 #ifde‡
__˝lu•lus


	@/usr/include/alsa/global.h

28 #i‚de‡
__ALSA_GLOBAL_H_


29 
	#__ALSA_GLOBAL_H_


	)

32 
	~<time.h
>

34 #ifde‡
__˝lu•lus


47 c⁄° *
¢d_asoundlib_vîsi⁄
();

49 #i‚de‡
ATTRIBUTE_UNUSED


51 
	#ATTRIBUTE_UNUSED
 
	`__©åibuã__
 ((
__unu£d__
))

	)

54 #ifde‡
PIC


57 
	#__SND_DLSYM_VERSION
(
«me
, 
vîsi⁄
Ë
_
 ##Çamê## 
	)
version

62 
	#SND_DLSYM_BUILD_VERSION
(
«me
, 
vîsi⁄
Ë
	`__SND_DLSYM_VERSION
“ame, vîsi⁄);

	)

66 
	s¢d_dlsym_lök
 {

67 
¢d_dlsym_lök
 *
√xt
;

68 c⁄° *
dlsym_«me
;

69 c⁄° *
dlsym_±r
;

72 
¢d_dlsym_lök
 *
¢d_dlsym_°¨t
;

75 
	#__SND_DLSYM_VERSION
(
¥efix
, 
«me
, 
vîsi⁄
Ë
_
 ##Öªfix ##Çamê## 
	)
version

80 
	#SND_DLSYM_BUILD_VERSION
(
«me
, 
vîsi⁄
) \

81 
¢d_dlsym_lök
 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
); \

82 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_c⁄°ru˘‹_
, 
«me
, 
vîsi⁄
Ë(Ë
	`__©åibuã__
 ((
c⁄°ru˘‹
)); \

83 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_c⁄°ru˘‹_
, 
«me
, 
vîsi⁄
) () { \

84 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
).
√xt
 = 
¢d_dlsym_°¨t
; \

85 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
).
dlsym_«me
 = #name; \

86 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
).
dlsym_±r
 = (*)&name; \

87 
¢d_dlsym_°¨t
 = &
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
); \

88 }

	)

92 #i‚de‡
__STRING


94 
	#__STRING
(
x
Ë#x

	)

98 
	#SND_DLSYM_VERSION
(
vîsi⁄
Ë
	`__STRING
(vîsi⁄)

	)

100 *
¢d_dl›í
(c⁄° *
fûe
, 
mode
);

101 *
¢d_dlsym
(*
h™dÀ
, c⁄° *
«me
, c⁄° *
vîsi⁄
);

102 
¢d_dl˛o£
(*
h™dÀ
);

106 
	#__¢d_Æloˇ
(
±r
,
ty≥
Ëdÿ{ *±∏—y≥##
_t
 *Ë
	`Æloˇ
—y≥##
	`_sizeof
()); 
	`mem£t
(*±r, 0,Åy≥##_sizeof()); } 0)

	)

114 
_¢d_async_h™dÀr
 
	t¢d_async_h™dÀr_t
;

121 (*
	g¢d_async_ˇŒback_t
)(
	t¢d_async_h™dÀr_t
 *
	th™dÀr
);

123 
¢d_async_add_h™dÀr
(
¢d_async_h™dÀr_t
 **
h™dÀr
, 
fd
,

124 
¢d_async_ˇŒback_t
 
ˇŒback
, *
¥iv©e_d©a
);

125 
¢d_async_dñ_h™dÀr
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

126 
¢d_async_h™dÀr_gë_fd
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

127 
¢d_async_h™dÀr_gë_signo
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

128 *
¢d_async_h™dÀr_gë_ˇŒback_¥iv©e
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

130 
¢d_shm_¨ó
 *
¢d_shm_¨ó_¸óã
(
shmid
, *
±r
);

131 
¢d_shm_¨ó
 *
¢d_shm_¨ó_sh¨e
(¢d_shm_¨ó *
¨ó
);

132 
¢d_shm_¨ó_de°roy
(
¢d_shm_¨ó
 *
¨ó
);

134 
¢d_u£r_fûe
(c⁄° *
fûe
, **
ªsu…
);

136 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_POSIX_SOURCE
)

137 
	stimevÆ
 {

138 
time_t
 
	gtv_£c
;

139 
	gtv_u£c
;

142 
	stime•ec
 {

143 
time_t
 
	gtv_£c
;

144 
	gtv_n£c
;

149 
timevÆ
 
	t¢d_time°amp_t
;

151 
time•ec
 
	t¢d_htime°amp_t
;

155 #ifde‡
__˝lu•lus


	@/usr/include/alsa/hwdep.h

28 #i‚de‡
__ALSA_HWDEP_H


29 
	#__ALSA_HWDEP_H


	)

31 #ifde‡
__˝lu•lus


42 
	#SND_HWDEP_DLSYM_VERSION
 
_dlsym_hwdï_001


	)

45 
_¢d_hwdï_öfo
 
	t¢d_hwdï_öfo_t
;

48 
_¢d_hwdï_d•_°©us
 
	t¢d_hwdï_d•_°©us_t
;

51 
_¢d_hwdï_d•_image
 
	t¢d_hwdï_d•_image_t
;

54 
	e_¢d_hwdï_iÁ˚
 {

55 
SND_HWDEP_IFACE_OPL2
 = 0,

56 
SND_HWDEP_IFACE_OPL3
,

57 
SND_HWDEP_IFACE_OPL4
,

58 
SND_HWDEP_IFACE_SB16CSP
,

59 
SND_HWDEP_IFACE_EMU10K1
,

60 
SND_HWDEP_IFACE_YSS225
,

61 
SND_HWDEP_IFACE_ICS2115
,

62 
SND_HWDEP_IFACE_SSCAPE
,

63 
SND_HWDEP_IFACE_VX
,

64 
SND_HWDEP_IFACE_MIXART
,

65 
SND_HWDEP_IFACE_USX2Y
,

66 
SND_HWDEP_IFACE_EMUX_WAVETABLE
,

67 
SND_HWDEP_IFACE_BLUETOOTH
,

68 
SND_HWDEP_IFACE_USX2Y_PCM
,

69 
SND_HWDEP_IFACE_PCXHR
,

70 
SND_HWDEP_IFACE_SB_RC
,

72 
SND_HWDEP_IFACE_LAST
 = 
SND_HWDEP_IFACE_SB_RC


73 } 
	t¢d_hwdï_iÁ˚_t
;

76 
	#SND_HWDEP_OPEN_READ
 (
O_RDONLY
)

	)

78 
	#SND_HWDEP_OPEN_WRITE
 (
O_WRONLY
)

	)

80 
	#SND_HWDEP_OPEN_DUPLEX
 (
O_RDWR
)

	)

82 
	#SND_HWDEP_OPEN_NONBLOCK
 (
O_NONBLOCK
)

	)

85 
	e_¢d_hwdï_ty≥
 {

87 
SND_HWDEP_TYPE_HW
,

89 
SND_HWDEP_TYPE_SHM
,

91 
SND_HWDEP_TYPE_INET


92 } 
	t¢d_hwdï_ty≥_t
;

95 
_¢d_hwdï
 
	t¢d_hwdï_t
;

97 
¢d_hwdï_›í
(
¢d_hwdï_t
 **
hwdï
, c⁄° *
«me
, 
mode
);

98 
¢d_hwdï_˛o£
(
¢d_hwdï_t
 *
hwdï
);

99 
¢d_hwdï_pﬁl_des¸ùt‹s
(
¢d_hwdï_t
 *
hwdï
, 
pﬁlfd
 *
pfds
, 
•a˚
);

100 
¢d_hwdï_pﬁl_des¸ùt‹s_ªvíts
(
¢d_hwdï_t
 *
hwdï
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

101 
¢d_hwdï_n⁄block
(
¢d_hwdï_t
 *
hwdï
, 
n⁄block
);

102 
¢d_hwdï_öfo
(
¢d_hwdï_t
 *
hwdï
, 
¢d_hwdï_öfo_t
 * 
öfo
);

103 
¢d_hwdï_d•_°©us
(
¢d_hwdï_t
 *
hwdï
, 
¢d_hwdï_d•_°©us_t
 *
°©us
);

104 
¢d_hwdï_d•_lﬂd
(
¢d_hwdï_t
 *
hwdï
, 
¢d_hwdï_d•_image_t
 *
block
);

105 
¢d_hwdï_io˘l
(
¢d_hwdï_t
 *
hwdï
, 
ªque°
, * 
¨g
);

106 
ssize_t
 
¢d_hwdï_wrôe
(
¢d_hwdï_t
 *
hwdï
, c⁄° *
buf„r
, 
size_t
 
size
);

107 
ssize_t
 
¢d_hwdï_ªad
(
¢d_hwdï_t
 *
hwdï
, *
buf„r
, 
size_t
 
size
);

109 
size_t
 
¢d_hwdï_öfo_sizeof
();

111 
	#¢d_hwdï_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_hwdï_öfo
)

	)

112 
¢d_hwdï_öfo_mÆloc
(
¢d_hwdï_öfo_t
 **
±r
);

113 
¢d_hwdï_öfo_‰ì
(
¢d_hwdï_öfo_t
 *
obj
);

114 
¢d_hwdï_öfo_c›y
(
¢d_hwdï_öfo_t
 *
d°
, c⁄° snd_hwdï_öfo_à*
§c
);

116 
¢d_hwdï_öfo_gë_devi˚
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

117 
¢d_hwdï_öfo_gë_ˇrd
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

118 c⁄° *
¢d_hwdï_öfo_gë_id
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

119 c⁄° *
¢d_hwdï_öfo_gë_«me
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

120 
¢d_hwdï_iÁ˚_t
 
¢d_hwdï_öfo_gë_iÁ˚
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

121 
¢d_hwdï_öfo_£t_devi˚
(
¢d_hwdï_öfo_t
 *
obj
, 
vÆ
);

123 
size_t
 
¢d_hwdï_d•_°©us_sizeof
();

125 
	#¢d_hwdï_d•_°©us_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_hwdï_d•_°©us
)

	)

126 
¢d_hwdï_d•_°©us_mÆloc
(
¢d_hwdï_d•_°©us_t
 **
±r
);

127 
¢d_hwdï_d•_°©us_‰ì
(
¢d_hwdï_d•_°©us_t
 *
obj
);

128 
¢d_hwdï_d•_°©us_c›y
(
¢d_hwdï_d•_°©us_t
 *
d°
, c⁄° snd_hwdï_d•_°©us_à*
§c
);

130 
¢d_hwdï_d•_°©us_gë_vîsi⁄
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

131 c⁄° *
¢d_hwdï_d•_°©us_gë_id
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

132 
¢d_hwdï_d•_°©us_gë_num_d•s
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

133 
¢d_hwdï_d•_°©us_gë_d•_lﬂded
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

134 
¢d_hwdï_d•_°©us_gë_chù_ªady
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

136 
size_t
 
¢d_hwdï_d•_image_sizeof
();

138 
	#¢d_hwdï_d•_image_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_hwdï_d•_image
)

	)

139 
¢d_hwdï_d•_image_mÆloc
(
¢d_hwdï_d•_image_t
 **
±r
);

140 
¢d_hwdï_d•_image_‰ì
(
¢d_hwdï_d•_image_t
 *
obj
);

141 
¢d_hwdï_d•_image_c›y
(
¢d_hwdï_d•_image_t
 *
d°
, c⁄° snd_hwdï_d•_image_à*
§c
);

143 
¢d_hwdï_d•_image_gë_ödex
(c⁄° 
¢d_hwdï_d•_image_t
 *
obj
);

144 c⁄° *
¢d_hwdï_d•_image_gë_«me
(c⁄° 
¢d_hwdï_d•_image_t
 *
obj
);

145 c⁄° *
¢d_hwdï_d•_image_gë_image
(c⁄° 
¢d_hwdï_d•_image_t
 *
obj
);

146 
size_t
 
¢d_hwdï_d•_image_gë_Àngth
(c⁄° 
¢d_hwdï_d•_image_t
 *
obj
);

148 
¢d_hwdï_d•_image_£t_ödex
(
¢d_hwdï_d•_image_t
 *
obj
, 
_ödex
);

149 
¢d_hwdï_d•_image_£t_«me
(
¢d_hwdï_d•_image_t
 *
obj
, c⁄° *
«me
);

150 
¢d_hwdï_d•_image_£t_image
(
¢d_hwdï_d•_image_t
 *
obj
, *
buf„r
);

151 
¢d_hwdï_d•_image_£t_Àngth
(
¢d_hwdï_d•_image_t
 *
obj
, 
size_t
 
Àngth
);

155 #ifde‡
__˝lu•lus


	@/usr/include/alsa/input.h

28 #i‚de‡
__ALSA_INPUT_H


29 
	#__ALSA_INPUT_H


	)

31 #ifde‡
__˝lu•lus


54 
_¢d_öput
 
	t¢d_öput_t
;

57 
	e_¢d_öput_ty≥
 {

59 
SND_INPUT_STDIO
,

61 
SND_INPUT_BUFFER


62 } 
	t¢d_öput_ty≥_t
;

64 
¢d_öput_°dio_›í
(
¢d_öput_t
 **
öpuç
, c⁄° *
fûe
, c⁄° *
mode
);

65 
¢d_öput_°dio_©èch
(
¢d_öput_t
 **
öpuç
, 
FILE
 *
Â
, 
_˛o£
);

66 
¢d_öput_buf„r_›í
(
¢d_öput_t
 **
öpuç
, c⁄° *
buf„r
, 
ssize_t
 
size
);

67 
¢d_öput_˛o£
(
¢d_öput_t
 *
öput
);

68 
¢d_öput_sˇnf
(
¢d_öput_t
 *
öput
, c⁄° *
f‹m©
, ...)

69 #i‚de‡
DOC_HIDDEN


70 
__©åibuã__
 ((
f‹m©
 (
sˇnf
, 2, 3)))

73 *
¢d_öput_gës
(
¢d_öput_t
 *
öput
, *
°r
, 
size_t
 
size
);

74 
¢d_öput_gëc
(
¢d_öput_t
 *
öput
);

75 
¢d_öput_ungëc
(
¢d_öput_t
 *
öput
, 
c
);

79 #ifde‡
__˝lu•lus


	@/usr/include/alsa/mixer.h

28 #i‚de‡
__ALSA_MIXER_H


29 
	#__ALSA_MIXER_H


	)

31 #ifde‡
__˝lu•lus


42 
_¢d_mixî
 
	t¢d_mixî_t
;

44 
_¢d_mixî_˛ass
 
	t¢d_mixî_˛ass_t
;

46 
_¢d_mixî_ñem
 
	t¢d_mixî_ñem_t
;

55 (*
¢d_mixî_ˇŒback_t
)(
	t¢d_mixî_t
 *
	t˘l
,

56 
	tmask
,

57 
	t¢d_mixî_ñem_t
 *
	tñem
);

65 (*
¢d_mixî_ñem_ˇŒback_t
)(
	t¢d_mixî_ñem_t
 *
	tñem
,

66 
	tmask
);

74 (*
¢d_mixî_com∑ª_t
)(c⁄° 
	t¢d_mixî_ñem_t
 *
	te1
,

75 c⁄° 
	t¢d_mixî_ñem_t
 *
	te2
);

85 (*
¢d_mixî_evít_t
)(
	t¢d_mixî_˛ass_t
 *
	t˛ass_
, 
	tmask
,

86 
	t¢d_h˘l_ñem_t
 *
	thñem
, 
	t¢d_mixî_ñem_t
 *
	tmñem
);

90 
	e_¢d_mixî_ñem_ty≥
 {

92 
SND_MIXER_ELEM_SIMPLE
,

93 
SND_MIXER_ELEM_LAST
 = 
SND_MIXER_ELEM_SIMPLE


94 } 
	t¢d_mixî_ñem_ty≥_t
;

96 
¢d_mixî_›í
(
¢d_mixî_t
 **
mixî
, 
mode
);

97 
¢d_mixî_˛o£
(
¢d_mixî_t
 *
mixî
);

98 
¢d_mixî_ñem_t
 *
¢d_mixî_fú°_ñem
(
¢d_mixî_t
 *
mixî
);

99 
¢d_mixî_ñem_t
 *
¢d_mixî_œ°_ñem
(
¢d_mixî_t
 *
mixî
);

100 
¢d_mixî_h™dÀ_evíts
(
¢d_mixî_t
 *
mixî
);

101 
¢d_mixî_©èch
(
¢d_mixî_t
 *
mixî
, c⁄° *
«me
);

102 
¢d_mixî_©èch_h˘l
(
¢d_mixî_t
 *
mixî
, 
¢d_h˘l_t
 *
h˘l
);

103 
¢d_mixî_dëach
(
¢d_mixî_t
 *
mixî
, c⁄° *
«me
);

104 
¢d_mixî_dëach_h˘l
(
¢d_mixî_t
 *
mixî
, 
¢d_h˘l_t
 *
h˘l
);

105 
¢d_mixî_gë_h˘l
(
¢d_mixî_t
 *
mixî
, c⁄° *
«me
, 
¢d_h˘l_t
 **
h˘l
);

106 
¢d_mixî_pﬁl_des¸ùt‹s_cou¡
(
¢d_mixî_t
 *
mixî
);

107 
¢d_mixî_pﬁl_des¸ùt‹s
(
¢d_mixî_t
 *
mixî
, 
pﬁlfd
 *
pfds
, 
•a˚
);

108 
¢d_mixî_pﬁl_des¸ùt‹s_ªvíts
(
¢d_mixî_t
 *
mixî
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

109 
¢d_mixî_lﬂd
(
¢d_mixî_t
 *
mixî
);

110 
¢d_mixî_‰ì
(
¢d_mixî_t
 *
mixî
);

111 
¢d_mixî_waô
(
¢d_mixî_t
 *
mixî
, 
timeout
);

112 
¢d_mixî_£t_com∑ª
(
¢d_mixî_t
 *
mixî
, 
¢d_mixî_com∑ª_t
 
ms‹t
);

113 
¢d_mixî_£t_ˇŒback
(
¢d_mixî_t
 *
obj
, 
¢d_mixî_ˇŒback_t
 
vÆ
);

114 * 
¢d_mixî_gë_ˇŒback_¥iv©e
(c⁄° 
¢d_mixî_t
 *
obj
);

115 
¢d_mixî_£t_ˇŒback_¥iv©e
(
¢d_mixî_t
 *
obj
, * 
vÆ
);

116 
¢d_mixî_gë_cou¡
(c⁄° 
¢d_mixî_t
 *
obj
);

117 
¢d_mixî_˛ass_uƒegi°î
(
¢d_mixî_˛ass_t
 *
˛ss
);

119 
¢d_mixî_ñem_t
 *
¢d_mixî_ñem_√xt
(¢d_mixî_ñem_à*
ñem
);

120 
¢d_mixî_ñem_t
 *
¢d_mixî_ñem_¥ev
(¢d_mixî_ñem_à*
ñem
);

121 
¢d_mixî_ñem_£t_ˇŒback
(
¢d_mixî_ñem_t
 *
obj
, 
¢d_mixî_ñem_ˇŒback_t
 
vÆ
);

122 * 
¢d_mixî_ñem_gë_ˇŒback_¥iv©e
(c⁄° 
¢d_mixî_ñem_t
 *
obj
);

123 
¢d_mixî_ñem_£t_ˇŒback_¥iv©e
(
¢d_mixî_ñem_t
 *
obj
, * 
vÆ
);

124 
¢d_mixî_ñem_ty≥_t
 
¢d_mixî_ñem_gë_ty≥
(c⁄° 
¢d_mixî_ñem_t
 *
obj
);

126 
¢d_mixî_˛ass_ªgi°î
(
¢d_mixî_˛ass_t
 *
˛ass_
, 
¢d_mixî_t
 *
mixî
);

127 
¢d_mixî_ñem_√w
(
¢d_mixî_ñem_t
 **
ñem
,

128 
¢d_mixî_ñem_ty≥_t
 
ty≥
,

129 
com∑ª_weight
,

130 *
¥iv©e_d©a
,

131 (*
¥iv©e_‰ì
)(
¢d_mixî_ñem_t
 *
ñem
));

132 
¢d_mixî_ñem_add
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_˛ass_t
 *
˛ass_
);

133 
¢d_mixî_ñem_ªmove
(
¢d_mixî_ñem_t
 *
ñem
);

134 
¢d_mixî_ñem_‰ì
(
¢d_mixî_ñem_t
 *
ñem
);

135 
¢d_mixî_ñem_öfo
(
¢d_mixî_ñem_t
 *
ñem
);

136 
¢d_mixî_ñem_vÆue
(
¢d_mixî_ñem_t
 *
ñem
);

137 
¢d_mixî_ñem_©èch
(
¢d_mixî_ñem_t
 *
mñem
, 
¢d_h˘l_ñem_t
 *
hñem
);

138 
¢d_mixî_ñem_dëach
(
¢d_mixî_ñem_t
 *
mñem
, 
¢d_h˘l_ñem_t
 *
hñem
);

139 
¢d_mixî_ñem_em±y
(
¢d_mixî_ñem_t
 *
mñem
);

140 *
¢d_mixî_ñem_gë_¥iv©e
(c⁄° 
¢d_mixî_ñem_t
 *
mñem
);

142 
size_t
 
¢d_mixî_˛ass_sizeof
();

147 
	#¢d_mixî_˛ass_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_mixî_˛ass
)

	)

148 
¢d_mixî_˛ass_mÆloc
(
¢d_mixî_˛ass_t
 **
±r
);

149 
¢d_mixî_˛ass_‰ì
(
¢d_mixî_˛ass_t
 *
obj
);

150 
¢d_mixî_˛ass_c›y
(
¢d_mixî_˛ass_t
 *
d°
, c⁄° snd_mixî_˛ass_à*
§c
);

151 
¢d_mixî_t
 *
¢d_mixî_˛ass_gë_mixî
(c⁄° 
¢d_mixî_˛ass_t
 *
˛ass_
);

152 
¢d_mixî_evít_t
 
¢d_mixî_˛ass_gë_evít
(c⁄° 
¢d_mixî_˛ass_t
 *
˛ass_
);

153 *
¢d_mixî_˛ass_gë_¥iv©e
(c⁄° 
¢d_mixî_˛ass_t
 *
˛ass_
);

154 
¢d_mixî_com∑ª_t
 
¢d_mixî_˛ass_gë_com∑ª
(c⁄° 
¢d_mixî_˛ass_t
 *
˛ass_
);

155 
¢d_mixî_˛ass_£t_evít
(
¢d_mixî_˛ass_t
 *
˛ass_
, 
¢d_mixî_evít_t
 
evít
);

156 
¢d_mixî_˛ass_£t_¥iv©e
(
¢d_mixî_˛ass_t
 *
˛ass_
, *
¥iv©e_d©a
);

157 
¢d_mixî_˛ass_£t_¥iv©e_‰ì
(
¢d_mixî_˛ass_t
 *
˛ass_
, (*
¥iv©e_‰ì
)(snd_mixer_class_t *class_));

158 
¢d_mixî_˛ass_£t_com∑ª
(
¢d_mixî_˛ass_t
 *
˛ass_
, 
¢d_mixî_com∑ª_t
 
com∑ª
);

170 
	e_¢d_mixî_£Àm_ch™√l_id
 {

172 
SND_MIXER_SCHN_UNKNOWN
 = -1,

174 
SND_MIXER_SCHN_FRONT_LEFT
 = 0,

176 
SND_MIXER_SCHN_FRONT_RIGHT
,

178 
SND_MIXER_SCHN_REAR_LEFT
,

180 
SND_MIXER_SCHN_REAR_RIGHT
,

182 
SND_MIXER_SCHN_FRONT_CENTER
,

184 
SND_MIXER_SCHN_WOOFER
,

186 
SND_MIXER_SCHN_SIDE_LEFT
,

188 
SND_MIXER_SCHN_SIDE_RIGHT
,

190 
SND_MIXER_SCHN_REAR_CENTER
,

191 
SND_MIXER_SCHN_LAST
 = 31,

193 
SND_MIXER_SCHN_MONO
 = 
SND_MIXER_SCHN_FRONT_LEFT


194 } 
	t¢d_mixî_£Àm_ch™√l_id_t
;

197 
	e¢d_mixî_£Àm_ªg›t_ab°ø˘
 {

199 
SND_MIXER_SABSTRACT_NONE
 = 0,

201 
SND_MIXER_SABSTRACT_BASIC
,

205 
	s¢d_mixî_£Àm_ªg›t
 {

207 
vî
;

209 
¢d_mixî_£Àm_ªg›t_ab°ø˘
 
ab°ø˘
;

211 c⁄° *
devi˚
;

213 
¢d_pcm_t
 *
∂ayback_pcm
;

215 
¢d_pcm_t
 *
ˇ±uª_pcm
;

219 
_¢d_mixî_£Àm_id
 
	t¢d_mixî_£Àm_id_t
;

221 c⁄° *
¢d_mixî_£Àm_ch™√l_«me
(
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
);

223 
¢d_mixî_£Àm_ªgi°î
(
¢d_mixî_t
 *
mixî
,

224 
¢d_mixî_£Àm_ªg›t
 *
›ti⁄s
,

225 
¢d_mixî_˛ass_t
 **
˛as•
);

226 
¢d_mixî_£Àm_gë_id
(
¢d_mixî_ñem_t
 *
ñemít
,

227 
¢d_mixî_£Àm_id_t
 *
id
);

228 c⁄° *
¢d_mixî_£Àm_gë_«me
(
¢d_mixî_ñem_t
 *
ñem
);

229 
¢d_mixî_£Àm_gë_ödex
(
¢d_mixî_ñem_t
 *
ñem
);

230 
¢d_mixî_ñem_t
 *
¢d_mixî_föd_£Àm
(
¢d_mixî_t
 *
mixî
,

231 c⁄° 
¢d_mixî_£Àm_id_t
 *
id
);

233 
¢d_mixî_£Àm_is_a˘ive
(
¢d_mixî_ñem_t
 *
ñem
);

234 
¢d_mixî_£Àm_is_∂ayback_m⁄o
(
¢d_mixî_ñem_t
 *
ñem
);

235 
¢d_mixî_£Àm_has_∂ayback_ch™√l
(
¢d_mixî_ñem_t
 *
obj
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
);

236 
¢d_mixî_£Àm_is_ˇ±uª_m⁄o
(
¢d_mixî_ñem_t
 *
ñem
);

237 
¢d_mixî_£Àm_has_ˇ±uª_ch™√l
(
¢d_mixî_ñem_t
 *
obj
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
);

238 
¢d_mixî_£Àm_gë_ˇ±uª_group
(
¢d_mixî_ñem_t
 *
ñem
);

239 
¢d_mixî_£Àm_has_comm⁄_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
);

240 
¢d_mixî_£Àm_has_∂ayback_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
);

241 
¢d_mixî_£Àm_has_∂ayback_vﬁume_joöed
(
¢d_mixî_ñem_t
 *
ñem
);

242 
¢d_mixî_£Àm_has_ˇ±uª_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
);

243 
¢d_mixî_£Àm_has_ˇ±uª_vﬁume_joöed
(
¢d_mixî_ñem_t
 *
ñem
);

244 
¢d_mixî_£Àm_has_comm⁄_swôch
(
¢d_mixî_ñem_t
 *
ñem
);

245 
¢d_mixî_£Àm_has_∂ayback_swôch
(
¢d_mixî_ñem_t
 *
ñem
);

246 
¢d_mixî_£Àm_has_∂ayback_swôch_joöed
(
¢d_mixî_ñem_t
 *
ñem
);

247 
¢d_mixî_£Àm_has_ˇ±uª_swôch
(
¢d_mixî_ñem_t
 *
ñem
);

248 
¢d_mixî_£Àm_has_ˇ±uª_swôch_joöed
(
¢d_mixî_ñem_t
 *
ñem
);

249 
¢d_mixî_£Àm_has_ˇ±uª_swôch_ex˛usive
(
¢d_mixî_ñem_t
 *
ñem
);

251 
¢d_mixî_£Àm_ask_∂ayback_vﬁ_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
, *
dBvÆue
);

252 
¢d_mixî_£Àm_ask_ˇ±uª_vﬁ_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
, *
dBvÆue
);

253 
¢d_mixî_£Àm_ask_∂ayback_dB_vﬁ
(
¢d_mixî_ñem_t
 *
ñem
, 
dBvÆue
, 
dú
, *
vÆue
);

254 
¢d_mixî_£Àm_ask_ˇ±uª_dB_vﬁ
(
¢d_mixî_ñem_t
 *
ñem
, 
dBvÆue
, 
dú
, *
vÆue
);

255 
¢d_mixî_£Àm_gë_∂ayback_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

256 
¢d_mixî_£Àm_gë_ˇ±uª_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

257 
¢d_mixî_£Àm_gë_∂ayback_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

258 
¢d_mixî_£Àm_gë_ˇ±uª_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

259 
¢d_mixî_£Àm_gë_∂ayback_swôch
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

260 
¢d_mixî_£Àm_gë_ˇ±uª_swôch
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

261 
¢d_mixî_£Àm_£t_∂ayback_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
);

262 
¢d_mixî_£Àm_£t_ˇ±uª_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
);

263 
¢d_mixî_£Àm_£t_∂ayback_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
, 
dú
);

264 
¢d_mixî_£Àm_£t_ˇ±uª_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
, 
dú
);

265 
¢d_mixî_£Àm_£t_∂ayback_vﬁume_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
);

266 
¢d_mixî_£Àm_£t_ˇ±uª_vﬁume_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
);

267 
¢d_mixî_£Àm_£t_∂ayback_dB_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
, 
dú
);

268 
¢d_mixî_£Àm_£t_ˇ±uª_dB_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
, 
dú
);

269 
¢d_mixî_£Àm_£t_∂ayback_swôch
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
);

270 
¢d_mixî_£Àm_£t_ˇ±uª_swôch
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
);

271 
¢d_mixî_£Àm_£t_∂ayback_swôch_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
);

272 
¢d_mixî_£Àm_£t_ˇ±uª_swôch_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
);

273 
¢d_mixî_£Àm_gë_∂ayback_vﬁume_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

274 *
mö
, *
max
);

275 
¢d_mixî_£Àm_gë_∂ayback_dB_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

276 *
mö
, *
max
);

277 
¢d_mixî_£Àm_£t_∂ayback_vﬁume_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

278 
mö
, 
max
);

279 
¢d_mixî_£Àm_gë_ˇ±uª_vﬁume_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

280 *
mö
, *
max
);

281 
¢d_mixî_£Àm_gë_ˇ±uª_dB_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

282 *
mö
, *
max
);

283 
¢d_mixî_£Àm_£t_ˇ±uª_vﬁume_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

284 
mö
, 
max
);

286 
¢d_mixî_£Àm_is_íumî©ed
(
¢d_mixî_ñem_t
 *
ñem
);

287 
¢d_mixî_£Àm_is_íum_∂ayback
(
¢d_mixî_ñem_t
 *
ñem
);

288 
¢d_mixî_£Àm_is_íum_ˇ±uª
(
¢d_mixî_ñem_t
 *
ñem
);

289 
¢d_mixî_£Àm_gë_íum_ôems
(
¢d_mixî_ñem_t
 *
ñem
);

290 
¢d_mixî_£Àm_gë_íum_ôem_«me
(
¢d_mixî_ñem_t
 *
ñem
, 
idx
, 
size_t
 
maxÀn
, *
°r
);

291 
¢d_mixî_£Àm_gë_íum_ôem
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
idxp
);

292 
¢d_mixî_£Àm_£t_íum_ôem
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
idx
);

294 
size_t
 
¢d_mixî_£Àm_id_sizeof
();

299 
	#¢d_mixî_£Àm_id_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_mixî_£Àm_id
)

	)

300 
¢d_mixî_£Àm_id_mÆloc
(
¢d_mixî_£Àm_id_t
 **
±r
);

301 
¢d_mixî_£Àm_id_‰ì
(
¢d_mixî_£Àm_id_t
 *
obj
);

302 
¢d_mixî_£Àm_id_c›y
(
¢d_mixî_£Àm_id_t
 *
d°
, c⁄° snd_mixî_£Àm_id_à*
§c
);

303 c⁄° *
¢d_mixî_£Àm_id_gë_«me
(c⁄° 
¢d_mixî_£Àm_id_t
 *
obj
);

304 
¢d_mixî_£Àm_id_gë_ödex
(c⁄° 
¢d_mixî_£Àm_id_t
 *
obj
);

305 
¢d_mixî_£Àm_id_£t_«me
(
¢d_mixî_£Àm_id_t
 *
obj
, c⁄° *
vÆ
);

306 
¢d_mixî_£Àm_id_£t_ödex
(
¢d_mixî_£Àm_id_t
 *
obj
, 
vÆ
);

312 #ifde‡
__˝lu•lus


	@/usr/include/alsa/output.h

28 #i‚de‡
__ALSA_OUTPUT_H


29 
	#__ALSA_OUTPUT_H


	)

31 #ifde‡
__˝lu•lus


54 
_¢d_ouçut
 
	t¢d_ouçut_t
;

57 
	e_¢d_ouçut_ty≥
 {

59 
SND_OUTPUT_STDIO
,

61 
SND_OUTPUT_BUFFER


62 } 
	t¢d_ouçut_ty≥_t
;

64 
¢d_ouçut_°dio_›í
(
¢d_ouçut_t
 **
ouçuç
, c⁄° *
fûe
, c⁄° *
mode
);

65 
¢d_ouçut_°dio_©èch
(
¢d_ouçut_t
 **
ouçuç
, 
FILE
 *
Â
, 
_˛o£
);

66 
¢d_ouçut_buf„r_›í
(
¢d_ouçut_t
 **
ouçuç
);

67 
size_t
 
¢d_ouçut_buf„r_°rög
(
¢d_ouçut_t
 *
ouçut
, **
buf
);

68 
¢d_ouçut_˛o£
(
¢d_ouçut_t
 *
ouçut
);

69 
¢d_ouçut_¥ötf
(
¢d_ouçut_t
 *
ouçut
, c⁄° *
f‹m©
, ...)

70 #i‚de‡
DOC_HIDDEN


71 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 2, 3)))

74 
¢d_ouçut_v¥ötf
(
¢d_ouçut_t
 *
ouçut
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
);

75 
¢d_ouçut_puts
(
¢d_ouçut_t
 *
ouçut
, c⁄° *
°r
);

76 
¢d_ouçut_putc
(
¢d_ouçut_t
 *
ouçut
, 
c
);

77 
¢d_ouçut_Êush
(
¢d_ouçut_t
 *
ouçut
);

81 #ifde‡
__˝lu•lus


	@/usr/include/alsa/pcm.h

29 #i‚de‡
__ALSA_PCM_H


30 
	#__ALSA_PCM_H


	)

32 #ifde‡
__˝lu•lus


43 
	#SND_PCM_DLSYM_VERSION
 
_dlsym_pcm_001


	)

46 
_¢d_pcm_öfo
 
	t¢d_pcm_öfo_t
;

62 
_¢d_pcm_hw_∑øms
 
	t¢d_pcm_hw_∑øms_t
;

65 
_¢d_pcm_sw_∑øms
 
	t¢d_pcm_sw_∑øms_t
;

67 
_¢d_pcm_°©us
 
	t¢d_pcm_°©us_t
;

69 
_¢d_pcm_ac˚ss_mask
 
	t¢d_pcm_ac˚ss_mask_t
;

71 
_¢d_pcm_f‹m©_mask
 
	t¢d_pcm_f‹m©_mask_t
;

73 
_¢d_pcm_subf‹m©_mask
 
	t¢d_pcm_subf‹m©_mask_t
;

76 
	e_¢d_pcm_˛ass
 {

79 
SND_PCM_CLASS_GENERIC
 = 0,

81 
SND_PCM_CLASS_MULTI
,

83 
SND_PCM_CLASS_MODEM
,

85 
SND_PCM_CLASS_DIGITIZER
,

86 
SND_PCM_CLASS_LAST
 = 
SND_PCM_CLASS_DIGITIZER


87 } 
	t¢d_pcm_˛ass_t
;

90 
	e_¢d_pcm_sub˛ass
 {

92 
SND_PCM_SUBCLASS_GENERIC_MIX
 = 0,

94 
SND_PCM_SUBCLASS_MULTI_MIX
,

95 
SND_PCM_SUBCLASS_LAST
 = 
SND_PCM_SUBCLASS_MULTI_MIX


96 } 
	t¢d_pcm_sub˛ass_t
;

99 
	e_¢d_pcm_°ªam
 {

101 
SND_PCM_STREAM_PLAYBACK
 = 0,

103 
SND_PCM_STREAM_CAPTURE
,

104 
SND_PCM_STREAM_LAST
 = 
SND_PCM_STREAM_CAPTURE


105 } 
	t¢d_pcm_°ªam_t
;

108 
	e_¢d_pcm_ac˚ss
 {

110 
SND_PCM_ACCESS_MMAP_INTERLEAVED
 = 0,

112 
SND_PCM_ACCESS_MMAP_NONINTERLEAVED
,

114 
SND_PCM_ACCESS_MMAP_COMPLEX
,

116 
SND_PCM_ACCESS_RW_INTERLEAVED
,

118 
SND_PCM_ACCESS_RW_NONINTERLEAVED
,

119 
SND_PCM_ACCESS_LAST
 = 
SND_PCM_ACCESS_RW_NONINTERLEAVED


120 } 
	t¢d_pcm_ac˚ss_t
;

123 
	e_¢d_pcm_f‹m©
 {

125 
SND_PCM_FORMAT_UNKNOWN
 = -1,

127 
SND_PCM_FORMAT_S8
 = 0,

129 
SND_PCM_FORMAT_U8
,

131 
SND_PCM_FORMAT_S16_LE
,

133 
SND_PCM_FORMAT_S16_BE
,

135 
SND_PCM_FORMAT_U16_LE
,

137 
SND_PCM_FORMAT_U16_BE
,

139 
SND_PCM_FORMAT_S24_LE
,

141 
SND_PCM_FORMAT_S24_BE
,

143 
SND_PCM_FORMAT_U24_LE
,

145 
SND_PCM_FORMAT_U24_BE
,

147 
SND_PCM_FORMAT_S32_LE
,

149 
SND_PCM_FORMAT_S32_BE
,

151 
SND_PCM_FORMAT_U32_LE
,

153 
SND_PCM_FORMAT_U32_BE
,

155 
SND_PCM_FORMAT_FLOAT_LE
,

157 
SND_PCM_FORMAT_FLOAT_BE
,

159 
SND_PCM_FORMAT_FLOAT64_LE
,

161 
SND_PCM_FORMAT_FLOAT64_BE
,

163 
SND_PCM_FORMAT_IEC958_SUBFRAME_LE
,

165 
SND_PCM_FORMAT_IEC958_SUBFRAME_BE
,

167 
SND_PCM_FORMAT_MU_LAW
,

169 
SND_PCM_FORMAT_A_LAW
,

171 
SND_PCM_FORMAT_IMA_ADPCM
,

173 
SND_PCM_FORMAT_MPEG
,

175 
SND_PCM_FORMAT_GSM
,

177 
SND_PCM_FORMAT_SPECIAL
 = 31,

179 
SND_PCM_FORMAT_S24_3LE
 = 32,

181 
SND_PCM_FORMAT_S24_3BE
,

183 
SND_PCM_FORMAT_U24_3LE
,

185 
SND_PCM_FORMAT_U24_3BE
,

187 
SND_PCM_FORMAT_S20_3LE
,

189 
SND_PCM_FORMAT_S20_3BE
,

191 
SND_PCM_FORMAT_U20_3LE
,

193 
SND_PCM_FORMAT_U20_3BE
,

195 
SND_PCM_FORMAT_S18_3LE
,

197 
SND_PCM_FORMAT_S18_3BE
,

199 
SND_PCM_FORMAT_U18_3LE
,

201 
SND_PCM_FORMAT_U18_3BE
,

202 
SND_PCM_FORMAT_LAST
 = 
SND_PCM_FORMAT_U18_3BE
,

204 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


206 
SND_PCM_FORMAT_S16
 = 
SND_PCM_FORMAT_S16_LE
,

208 
SND_PCM_FORMAT_U16
 = 
SND_PCM_FORMAT_U16_LE
,

210 
SND_PCM_FORMAT_S24
 = 
SND_PCM_FORMAT_S24_LE
,

212 
SND_PCM_FORMAT_U24
 = 
SND_PCM_FORMAT_U24_LE
,

214 
SND_PCM_FORMAT_S32
 = 
SND_PCM_FORMAT_S32_LE
,

216 
SND_PCM_FORMAT_U32
 = 
SND_PCM_FORMAT_U32_LE
,

218 
SND_PCM_FORMAT_FLOAT
 = 
SND_PCM_FORMAT_FLOAT_LE
,

220 
SND_PCM_FORMAT_FLOAT64
 = 
SND_PCM_FORMAT_FLOAT64_LE
,

222 
SND_PCM_FORMAT_IEC958_SUBFRAME
 = 
SND_PCM_FORMAT_IEC958_SUBFRAME_LE


223 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


225 
SND_PCM_FORMAT_S16
 = 
SND_PCM_FORMAT_S16_BE
,

227 
SND_PCM_FORMAT_U16
 = 
SND_PCM_FORMAT_U16_BE
,

229 
SND_PCM_FORMAT_S24
 = 
SND_PCM_FORMAT_S24_BE
,

231 
SND_PCM_FORMAT_U24
 = 
SND_PCM_FORMAT_U24_BE
,

233 
SND_PCM_FORMAT_S32
 = 
SND_PCM_FORMAT_S32_BE
,

235 
SND_PCM_FORMAT_U32
 = 
SND_PCM_FORMAT_U32_BE
,

237 
SND_PCM_FORMAT_FLOAT
 = 
SND_PCM_FORMAT_FLOAT_BE
,

239 
SND_PCM_FORMAT_FLOAT64
 = 
SND_PCM_FORMAT_FLOAT64_BE
,

241 
SND_PCM_FORMAT_IEC958_SUBFRAME
 = 
SND_PCM_FORMAT_IEC958_SUBFRAME_BE


245 } 
	t¢d_pcm_f‹m©_t
;

248 
	e_¢d_pcm_subf‹m©
 {

250 
SND_PCM_SUBFORMAT_STD
 = 0,

251 
SND_PCM_SUBFORMAT_LAST
 = 
SND_PCM_SUBFORMAT_STD


252 } 
	t¢d_pcm_subf‹m©_t
;

255 
	e_¢d_pcm_°©e
 {

257 
SND_PCM_STATE_OPEN
 = 0,

259 
SND_PCM_STATE_SETUP
,

261 
SND_PCM_STATE_PREPARED
,

263 
SND_PCM_STATE_RUNNING
,

265 
SND_PCM_STATE_XRUN
,

267 
SND_PCM_STATE_DRAINING
,

269 
SND_PCM_STATE_PAUSED
,

271 
SND_PCM_STATE_SUSPENDED
,

273 
SND_PCM_STATE_DISCONNECTED
,

274 
SND_PCM_STATE_LAST
 = 
SND_PCM_STATE_DISCONNECTED


275 } 
	t¢d_pcm_°©e_t
;

278 
	e_¢d_pcm_°¨t
 {

280 
SND_PCM_START_DATA
 = 0,

282 
SND_PCM_START_EXPLICIT
,

283 
SND_PCM_START_LAST
 = 
SND_PCM_START_EXPLICIT


284 } 
	t¢d_pcm_°¨t_t
;

287 
	e_¢d_pcm_xrun
 {

289 
SND_PCM_XRUN_NONE
 = 0,

291 
SND_PCM_XRUN_STOP
,

292 
SND_PCM_XRUN_LAST
 = 
SND_PCM_XRUN_STOP


293 } 
	t¢d_pcm_xrun_t
;

296 
	e_¢d_pcm_t°amp
 {

298 
SND_PCM_TSTAMP_NONE
 = 0,

300 
SND_PCM_TSTAMP_ENABLE
,

304 
SND_PCM_TSTAMP_MMAP
 = 
SND_PCM_TSTAMP_ENABLE
,

305 
SND_PCM_TSTAMP_LAST
 = 
SND_PCM_TSTAMP_ENABLE


306 } 
	t¢d_pcm_t°amp_t
;

309 
	t¢d_pcm_u‰ames_t
;

311 
	t¢d_pcm_s‰ames_t
;

314 
	#SND_PCM_NONBLOCK
 0x00000001

	)

316 
	#SND_PCM_ASYNC
 0x00000002

	)

318 
	#SND_PCM_NO_AUTO_RESAMPLE
 0x00010000

	)

320 
	#SND_PCM_NO_AUTO_CHANNELS
 0x00020000

	)

322 
	#SND_PCM_NO_AUTO_FORMAT
 0x00040000

	)

324 
	#SND_PCM_NO_SOFTVOL
 0x00080000

	)

327 
_¢d_pcm
 
	t¢d_pcm_t
;

330 
	e_¢d_pcm_ty≥
 {

332 
SND_PCM_TYPE_HW
 = 0,

334 
SND_PCM_TYPE_HOOKS
,

337 
SND_PCM_TYPE_MULTI
,

339 
SND_PCM_TYPE_FILE
,

341 
SND_PCM_TYPE_NULL
,

343 
SND_PCM_TYPE_SHM
,

345 
SND_PCM_TYPE_INET
,

347 
SND_PCM_TYPE_COPY
,

349 
SND_PCM_TYPE_LINEAR
,

351 
SND_PCM_TYPE_ALAW
,

353 
SND_PCM_TYPE_MULAW
,

355 
SND_PCM_TYPE_ADPCM
,

357 
SND_PCM_TYPE_RATE
,

359 
SND_PCM_TYPE_ROUTE
,

361 
SND_PCM_TYPE_PLUG
,

363 
SND_PCM_TYPE_SHARE
,

365 
SND_PCM_TYPE_METER
,

367 
SND_PCM_TYPE_MIX
,

369 
SND_PCM_TYPE_DROUTE
,

371 
SND_PCM_TYPE_LBSERVER
,

373 
SND_PCM_TYPE_LINEAR_FLOAT
,

375 
SND_PCM_TYPE_LADSPA
,

377 
SND_PCM_TYPE_DMIX
,

379 
SND_PCM_TYPE_JACK
,

381 
SND_PCM_TYPE_DSNOOP
,

383 
SND_PCM_TYPE_DSHARE
,

385 
SND_PCM_TYPE_IEC958
,

387 
SND_PCM_TYPE_SOFTVOL
,

389 
SND_PCM_TYPE_IOPLUG
,

391 
SND_PCM_TYPE_EXTPLUG
,

393 
SND_PCM_TYPE_MMAP_EMUL
,

394 
SND_PCM_TYPE_LAST
 = 
SND_PCM_TYPE_MMAP_EMUL


398 
_¢d_pcm_ty≥
 
	t¢d_pcm_ty≥_t
;

401 
	s_¢d_pcm_ch™√l_¨ó
 {

403 *
addr
;

405 
fú°
;

407 
°ï
;

408 } 
	t¢d_pcm_ch™√l_¨ó_t
;

411 
	u_¢d_pcm_sync_id
 {

413 
id
[16];

415 
id16
[8];

417 
id32
[4];

418 } 
	t¢d_pcm_sync_id_t
;

421 
_¢d_pcm_sc›e
 
	t¢d_pcm_sc›e_t
;

423 
¢d_pcm_›í
(
¢d_pcm_t
 **
pcm
, c⁄° *
«me
,

424 
¢d_pcm_°ªam_t
 
°ªam
, 
mode
);

425 
¢d_pcm_›í_lc⁄f
(
¢d_pcm_t
 **
pcm
, c⁄° *
«me
,

426 
¢d_pcm_°ªam_t
 
°ªam
, 
mode
,

427 
¢d_c⁄fig_t
 *
lc⁄f
);

428 
¢d_pcm_›í_ÁŒback
(
¢d_pcm_t
 **
pcm
, 
¢d_c⁄fig_t
 *
roŸ
,

429 c⁄° *
«me
, c⁄° *
‹ig_«me
,

430 
¢d_pcm_°ªam_t
 
°ªam
, 
mode
);

432 
¢d_pcm_˛o£
(
¢d_pcm_t
 *
pcm
);

433 c⁄° *
¢d_pcm_«me
(
¢d_pcm_t
 *
pcm
);

434 
¢d_pcm_ty≥_t
 
¢d_pcm_ty≥
(
¢d_pcm_t
 *
pcm
);

435 
¢d_pcm_°ªam_t
 
¢d_pcm_°ªam
(
¢d_pcm_t
 *
pcm
);

436 
¢d_pcm_pﬁl_des¸ùt‹s_cou¡
(
¢d_pcm_t
 *
pcm
);

437 
¢d_pcm_pﬁl_des¸ùt‹s
(
¢d_pcm_t
 *
pcm
, 
pﬁlfd
 *
pfds
, 
•a˚
);

438 
¢d_pcm_pﬁl_des¸ùt‹s_ªvíts
(
¢d_pcm_t
 *
pcm
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

439 
¢d_pcm_n⁄block
(
¢d_pcm_t
 *
pcm
, 
n⁄block
);

440 
¢d_async_add_pcm_h™dÀr
(
¢d_async_h™dÀr_t
 **
h™dÀr
, 
¢d_pcm_t
 *
pcm
,

441 
¢d_async_ˇŒback_t
 
ˇŒback
, *
¥iv©e_d©a
);

442 
¢d_pcm_t
 *
¢d_async_h™dÀr_gë_pcm
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

443 
¢d_pcm_öfo
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_öfo_t
 *
öfo
);

444 
¢d_pcm_hw_∑øms_cuºít
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

445 
¢d_pcm_hw_∑øms
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

446 
¢d_pcm_hw_‰ì
(
¢d_pcm_t
 *
pcm
);

447 
¢d_pcm_sw_∑øms_cuºít
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
);

448 
¢d_pcm_sw_∑øms
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
);

449 
¢d_pcm_¥ï¨e
(
¢d_pcm_t
 *
pcm
);

450 
¢d_pcm_ª£t
(
¢d_pcm_t
 *
pcm
);

451 
¢d_pcm_°©us
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_°©us_t
 *
°©us
);

452 
¢d_pcm_°¨t
(
¢d_pcm_t
 *
pcm
);

453 
¢d_pcm_dr›
(
¢d_pcm_t
 *
pcm
);

454 
¢d_pcm_døö
(
¢d_pcm_t
 *
pcm
);

455 
¢d_pcm_∑u£
(
¢d_pcm_t
 *
pcm
, 
íabÀ
);

456 
¢d_pcm_°©e_t
 
¢d_pcm_°©e
(
¢d_pcm_t
 *
pcm
);

457 
¢d_pcm_hwsync
(
¢d_pcm_t
 *
pcm
);

458 
¢d_pcm_dñay
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_s‰ames_t
 *
dñayp
);

459 
¢d_pcm_ªsume
(
¢d_pcm_t
 *
pcm
);

460 
¢d_pcm_htime°amp
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_u‰ames_t
 *
avaû
, 
¢d_htime°amp_t
 *
t°amp
);

461 
¢d_pcm_s‰ames_t
 
¢d_pcm_avaû
(
¢d_pcm_t
 *
pcm
);

462 
¢d_pcm_s‰ames_t
 
¢d_pcm_avaû_upd©e
(
¢d_pcm_t
 *
pcm
);

463 
¢d_pcm_avaû_dñay
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_s‰ames_t
 *
avaûp
, snd_pcm_s‰ames_à*
dñayp
);

464 
¢d_pcm_s‰ames_t
 
¢d_pcm_ªwödabÀ
(
¢d_pcm_t
 *
pcm
);

465 
¢d_pcm_s‰ames_t
 
¢d_pcm_ªwöd
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_u‰ames_t
 
‰ames
);

466 
¢d_pcm_s‰ames_t
 
¢d_pcm_f‹w¨dabÀ
(
¢d_pcm_t
 *
pcm
);

467 
¢d_pcm_s‰ames_t
 
¢d_pcm_f‹w¨d
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_u‰ames_t
 
‰ames
);

468 
¢d_pcm_s‰ames_t
 
¢d_pcm_wrôei
(
¢d_pcm_t
 *
pcm
, c⁄° *
buf„r
, 
¢d_pcm_u‰ames_t
 
size
);

469 
¢d_pcm_s‰ames_t
 
¢d_pcm_ªadi
(
¢d_pcm_t
 *
pcm
, *
buf„r
, 
¢d_pcm_u‰ames_t
 
size
);

470 
¢d_pcm_s‰ames_t
 
¢d_pcm_wrôí
(
¢d_pcm_t
 *
pcm
, **
bufs
, 
¢d_pcm_u‰ames_t
 
size
);

471 
¢d_pcm_s‰ames_t
 
¢d_pcm_ªadn
(
¢d_pcm_t
 *
pcm
, **
bufs
, 
¢d_pcm_u‰ames_t
 
size
);

472 
¢d_pcm_waô
(
¢d_pcm_t
 *
pcm
, 
timeout
);

474 
¢d_pcm_lök
(
¢d_pcm_t
 *
pcm1
, snd_pcm_à*
pcm2
);

475 
¢d_pcm_u∆ök
(
¢d_pcm_t
 *
pcm
);

478 
	#SND_CHMAP_API_VERSION
 ((1 << 16Ë| (0 << 8Ë| 0)

	)

481 
	e¢d_pcm_chm≠_ty≥
 {

482 
SND_CHMAP_TYPE_NONE
 = 0,

483 
SND_CHMAP_TYPE_FIXED
,

484 
SND_CHMAP_TYPE_VAR
,

485 
SND_CHMAP_TYPE_PAIRED
,

486 
SND_CHMAP_TYPE_LAST
 = 
SND_CHMAP_TYPE_PAIRED
,

490 
	e¢d_pcm_chm≠_posôi⁄
 {

491 
SND_CHMAP_UNKNOWN
 = 0,

492 
SND_CHMAP_NA
,

493 
SND_CHMAP_MONO
,

494 
SND_CHMAP_FL
,

495 
SND_CHMAP_FR
,

496 
SND_CHMAP_RL
,

497 
SND_CHMAP_RR
,

498 
SND_CHMAP_FC
,

499 
SND_CHMAP_LFE
,

500 
SND_CHMAP_SL
,

501 
SND_CHMAP_SR
,

502 
SND_CHMAP_RC
,

503 
SND_CHMAP_FLC
,

504 
SND_CHMAP_FRC
,

505 
SND_CHMAP_RLC
,

506 
SND_CHMAP_RRC
,

507 
SND_CHMAP_FLW
,

508 
SND_CHMAP_FRW
,

509 
SND_CHMAP_FLH
,

510 
SND_CHMAP_FCH
,

511 
SND_CHMAP_FRH
,

512 
SND_CHMAP_TC
,

513 
SND_CHMAP_TFL
,

514 
SND_CHMAP_TFR
,

515 
SND_CHMAP_TFC
,

516 
SND_CHMAP_TRL
,

517 
SND_CHMAP_TRR
,

518 
SND_CHMAP_TRC
,

519 
SND_CHMAP_LAST
 = 
SND_CHMAP_TRC
,

523 
	#SND_CHMAP_POSITION_MASK
 0xffff

	)

526 
	#SND_CHMAP_PHASE_INVERSE
 (0x01 << 16)

	)

528 
	#SND_CHMAP_DRIVER_SPEC
 (0x02 << 16)

	)

531 
	s¢d_pcm_chm≠
 {

532 
ch™√ls
;

533 
pos
[0];

534 } 
	t¢d_pcm_chm≠_t
;

537 
	s¢d_pcm_chm≠_quîy
 {

538 
¢d_pcm_chm≠_ty≥
 
ty≥
;

539 
¢d_pcm_chm≠_t
 
m≠
;

540 } 
	t¢d_pcm_chm≠_quîy_t
;

543 
¢d_pcm_chm≠_quîy_t
 **
¢d_pcm_quîy_chm≠s
(
¢d_pcm_t
 *
pcm
);

544 
¢d_pcm_chm≠_quîy_t
 **
¢d_pcm_quîy_chm≠s_‰om_hw
(
ˇrd
, 
dev
,

545 
subdev
,

546 
¢d_pcm_°ªam_t
 
°ªam
);

547 
¢d_pcm_‰ì_chm≠s
(
¢d_pcm_chm≠_quîy_t
 **
m≠s
);

548 
¢d_pcm_chm≠_t
 *
¢d_pcm_gë_chm≠
(
¢d_pcm_t
 *
pcm
);

549 
¢d_pcm_£t_chm≠
(
¢d_pcm_t
 *
pcm
, c⁄° 
¢d_pcm_chm≠_t
 *
m≠
);

551 c⁄° *
¢d_pcm_chm≠_ty≥_«me
(
¢d_pcm_chm≠_ty≥
 
vÆ
);

552 c⁄° *
¢d_pcm_chm≠_«me
(
¢d_pcm_chm≠_posôi⁄
 
vÆ
);

553 c⁄° *
¢d_pcm_chm≠_l⁄g_«me
(
¢d_pcm_chm≠_posôi⁄
 
vÆ
);

554 
¢d_pcm_chm≠_¥öt
(c⁄° 
¢d_pcm_chm≠_t
 *
m≠
, 
size_t
 
maxÀn
, *
buf
);

555 
¢d_pcm_chm≠_‰om_°rög
(c⁄° *
°r
);

556 
¢d_pcm_chm≠_t
 *
¢d_pcm_chm≠_∑r£_°rög
(c⁄° *
°r
);

565 
¢d_pcm_ªcovî
(
¢d_pcm_t
 *
pcm
, 
îr
, 
sûít
);

566 
¢d_pcm_£t_∑øms
(
¢d_pcm_t
 *
pcm
,

567 
¢d_pcm_f‹m©_t
 
f‹m©
,

568 
¢d_pcm_ac˚ss_t
 
ac˚ss
,

569 
ch™√ls
,

570 
øã
,

571 
so·_ªßm∂e
,

572 
œãncy
);

573 
¢d_pcm_gë_∑øms
(
¢d_pcm_t
 *
pcm
,

574 
¢d_pcm_u‰ames_t
 *
buf„r_size
,

575 
¢d_pcm_u‰ames_t
 *
≥riod_size
);

586 
size_t
 
¢d_pcm_öfo_sizeof
();

591 
	#¢d_pcm_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_öfo
)

	)

592 
¢d_pcm_öfo_mÆloc
(
¢d_pcm_öfo_t
 **
±r
);

593 
¢d_pcm_öfo_‰ì
(
¢d_pcm_öfo_t
 *
obj
);

594 
¢d_pcm_öfo_c›y
(
¢d_pcm_öfo_t
 *
d°
, c⁄° snd_pcm_öfo_à*
§c
);

595 
¢d_pcm_öfo_gë_devi˚
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

596 
¢d_pcm_öfo_gë_subdevi˚
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

597 
¢d_pcm_°ªam_t
 
¢d_pcm_öfo_gë_°ªam
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

598 
¢d_pcm_öfo_gë_ˇrd
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

599 c⁄° *
¢d_pcm_öfo_gë_id
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

600 c⁄° *
¢d_pcm_öfo_gë_«me
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

601 c⁄° *
¢d_pcm_öfo_gë_subdevi˚_«me
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

602 
¢d_pcm_˛ass_t
 
¢d_pcm_öfo_gë_˛ass
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

603 
¢d_pcm_sub˛ass_t
 
¢d_pcm_öfo_gë_sub˛ass
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

604 
¢d_pcm_öfo_gë_subdevi˚s_cou¡
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

605 
¢d_pcm_öfo_gë_subdevi˚s_avaû
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

606 
¢d_pcm_sync_id_t
 
¢d_pcm_öfo_gë_sync
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

607 
¢d_pcm_öfo_£t_devi˚
(
¢d_pcm_öfo_t
 *
obj
, 
vÆ
);

608 
¢d_pcm_öfo_£t_subdevi˚
(
¢d_pcm_öfo_t
 *
obj
, 
vÆ
);

609 
¢d_pcm_öfo_£t_°ªam
(
¢d_pcm_öfo_t
 *
obj
, 
¢d_pcm_°ªam_t
 
vÆ
);

620 
¢d_pcm_hw_∑øms_™y
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

622 
¢d_pcm_hw_∑øms_ˇn_mm≠_ßm∂e_ªsﬁuti⁄
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

623 
¢d_pcm_hw_∑øms_is_doubÀ
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

624 
¢d_pcm_hw_∑øms_is_b©ch
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

625 
¢d_pcm_hw_∑øms_is_block_å™s„r
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

626 
¢d_pcm_hw_∑øms_is_m⁄Ÿ⁄ic
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

627 
¢d_pcm_hw_∑øms_ˇn_ovîønge
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

628 
¢d_pcm_hw_∑øms_ˇn_∑u£
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

629 
¢d_pcm_hw_∑øms_ˇn_ªsume
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

630 
¢d_pcm_hw_∑øms_is_hÆf_du∂ex
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

631 
¢d_pcm_hw_∑øms_is_joöt_du∂ex
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

632 
¢d_pcm_hw_∑øms_ˇn_sync_°¨t
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

633 
¢d_pcm_hw_∑øms_ˇn_dißbÀ_≥riod_wakeup
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

634 
¢d_pcm_hw_∑øms_suµ‹ts_audio_wÆl˛ock_ts
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

635 
¢d_pcm_hw_∑øms_gë_øã_numdí
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
,

636 *
øã_num
,

637 *
øã_dí
);

638 
¢d_pcm_hw_∑øms_gë_sbôs
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

639 
¢d_pcm_hw_∑øms_gë_fifo_size
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

642 
_¢d_pcm_hw_°øãgy
 
	t¢d_pcm_hw_°øãgy_t
;

645 
	s_¢d_pcm_hw_°øãgy_sim∂e_choi˚s_li°
 {

646 
vÆue
;

647 
bad√ss
;

648 } 
	t¢d_pcm_hw_°øãgy_sim∂e_choi˚s_li°_t
;

650 
¢d_pcm_hw_∑øms_°øãgy
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
,

651 c⁄° 
¢d_pcm_hw_°øãgy_t
 *
°øãgy
,

652 
bad√ss_mö
,

653 
bad√ss_max
);

655 
¢d_pcm_hw_°øãgy_‰ì
(
¢d_pcm_hw_°øãgy_t
 *
°øãgy
);

656 
¢d_pcm_hw_°øãgy_sim∂e
(
¢d_pcm_hw_°øãgy_t
 **
°øãgyp
,

657 
bad√ss_mö
,

658 
bad√ss_max
);

659 
¢d_pcm_hw_∑øms_åy_ex∂aö_Áûuª
(
¢d_pcm_t
 *
pcm
,

660 
¢d_pcm_hw_∑øms_t
 *
Áû
,

661 
¢d_pcm_hw_∑øms_t
 *
suc˚ss
,

662 
dïth
,

663 
¢d_ouçut_t
 *
out
);

667 
size_t
 
¢d_pcm_hw_∑øms_sizeof
();

672 
	#¢d_pcm_hw_∑øms_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_hw_∑øms
)

	)

673 
¢d_pcm_hw_∑øms_mÆloc
(
¢d_pcm_hw_∑øms_t
 **
±r
);

674 
¢d_pcm_hw_∑øms_‰ì
(
¢d_pcm_hw_∑øms_t
 *
obj
);

675 
¢d_pcm_hw_∑øms_c›y
(
¢d_pcm_hw_∑øms_t
 *
d°
, c⁄° snd_pcm_hw_∑øms_à*
§c
);

677 #i‡!
deföed
(
ALSA_LIBRARY_BUILD
Ë&& !deföed(
ALSA_PCM_OLD_HW_PARAMS_API
)

679 
¢d_pcm_hw_∑øms_gë_ac˚ss
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 *
_ac˚ss
);

680 
¢d_pcm_hw_∑øms_ã°_ac˚ss
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 
_ac˚ss
);

681 
¢d_pcm_hw_∑øms_£t_ac˚ss
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 
_ac˚ss
);

682 
¢d_pcm_hw_∑øms_£t_ac˚ss_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 *
_ac˚ss
);

683 
¢d_pcm_hw_∑øms_£t_ac˚ss_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 *
_ac˚ss
);

684 
¢d_pcm_hw_∑øms_£t_ac˚ss_mask
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_mask_t
 *
mask
);

685 
¢d_pcm_hw_∑øms_gë_ac˚ss_mask
(
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_mask_t
 *
mask
);

687 
¢d_pcm_hw_∑øms_gë_f‹m©
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 *
vÆ
);

688 
¢d_pcm_hw_∑øms_ã°_f‹m©
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 
vÆ
);

689 
¢d_pcm_hw_∑øms_£t_f‹m©
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 
vÆ
);

690 
¢d_pcm_hw_∑øms_£t_f‹m©_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 *
f‹m©
);

691 
¢d_pcm_hw_∑øms_£t_f‹m©_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 *
f‹m©
);

692 
¢d_pcm_hw_∑øms_£t_f‹m©_mask
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_mask_t
 *
mask
);

693 
¢d_pcm_hw_∑øms_gë_f‹m©_mask
(
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_mask_t
 *
mask
);

695 
¢d_pcm_hw_∑øms_gë_subf‹m©
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 *
subf‹m©
);

696 
¢d_pcm_hw_∑øms_ã°_subf‹m©
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 
subf‹m©
);

697 
¢d_pcm_hw_∑øms_£t_subf‹m©
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 
subf‹m©
);

698 
¢d_pcm_hw_∑øms_£t_subf‹m©_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 *
subf‹m©
);

699 
¢d_pcm_hw_∑øms_£t_subf‹m©_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 *
subf‹m©
);

700 
¢d_pcm_hw_∑øms_£t_subf‹m©_mask
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_mask_t
 *
mask
);

701 
¢d_pcm_hw_∑øms_gë_subf‹m©_mask
(
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_mask_t
 *
mask
);

703 
¢d_pcm_hw_∑øms_gë_ch™√ls
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

704 
¢d_pcm_hw_∑øms_gë_ch™√ls_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

705 
¢d_pcm_hw_∑øms_gë_ch™√ls_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

706 
¢d_pcm_hw_∑øms_ã°_ch™√ls
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

707 
¢d_pcm_hw_∑øms_£t_ch™√ls
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

708 
¢d_pcm_hw_∑øms_£t_ch™√ls_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

709 
¢d_pcm_hw_∑øms_£t_ch™√ls_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

710 
¢d_pcm_hw_∑øms_£t_ch™√ls_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
max
);

711 
¢d_pcm_hw_∑øms_£t_ch™√ls_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

712 
¢d_pcm_hw_∑øms_£t_ch™√ls_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

713 
¢d_pcm_hw_∑øms_£t_ch™√ls_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

715 
¢d_pcm_hw_∑øms_gë_øã
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

716 
¢d_pcm_hw_∑øms_gë_øã_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

717 
¢d_pcm_hw_∑øms_gë_øã_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

718 
¢d_pcm_hw_∑øms_ã°_øã
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

719 
¢d_pcm_hw_∑øms_£t_øã
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

720 
¢d_pcm_hw_∑øms_£t_øã_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

721 
¢d_pcm_hw_∑øms_£t_øã_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

722 
¢d_pcm_hw_∑øms_£t_øã_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
);

723 
¢d_pcm_hw_∑øms_£t_øã_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

724 
¢d_pcm_hw_∑øms_£t_øã_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

725 
¢d_pcm_hw_∑øms_£t_øã_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

726 
¢d_pcm_hw_∑øms_£t_øã_ªßm∂e
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

727 
¢d_pcm_hw_∑øms_gë_øã_ªßm∂e
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

728 
¢d_pcm_hw_∑øms_£t_exp‹t_buf„r
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

729 
¢d_pcm_hw_∑øms_gë_exp‹t_buf„r
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

730 
¢d_pcm_hw_∑øms_£t_≥riod_wakeup
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

731 
¢d_pcm_hw_∑øms_gë_≥riod_wakeup
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

733 
¢d_pcm_hw_∑øms_gë_≥riod_time
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

734 
¢d_pcm_hw_∑øms_gë_≥riod_time_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

735 
¢d_pcm_hw_∑øms_gë_≥riod_time_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

736 
¢d_pcm_hw_∑øms_ã°_≥riod_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

737 
¢d_pcm_hw_∑øms_£t_≥riod_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

738 
¢d_pcm_hw_∑øms_£t_≥riod_time_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

739 
¢d_pcm_hw_∑øms_£t_≥riod_time_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

740 
¢d_pcm_hw_∑øms_£t_≥riod_time_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
);

741 
¢d_pcm_hw_∑øms_£t_≥riod_time_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

742 
¢d_pcm_hw_∑øms_£t_≥riod_time_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

743 
¢d_pcm_hw_∑øms_£t_≥riod_time_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

745 
¢d_pcm_hw_∑øms_gë_≥riod_size
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
‰ames
, *
dú
);

746 
¢d_pcm_hw_∑øms_gë_≥riod_size_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
‰ames
, *
dú
);

747 
¢d_pcm_hw_∑øms_gë_≥riod_size_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
‰ames
, *
dú
);

748 
¢d_pcm_hw_∑øms_ã°_≥riod_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
, 
dú
);

749 
¢d_pcm_hw_∑øms_£t_≥riod_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
, 
dú
);

750 
¢d_pcm_hw_∑øms_£t_≥riod_size_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

751 
¢d_pcm_hw_∑øms_£t_≥riod_size_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

752 
¢d_pcm_hw_∑øms_£t_≥riod_size_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
mö
, *
mödú
, snd_pcm_u‰ames_à*
max
, *
maxdú
);

753 
¢d_pcm_hw_∑øms_£t_≥riod_size_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

754 
¢d_pcm_hw_∑øms_£t_≥riod_size_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

755 
¢d_pcm_hw_∑øms_£t_≥riod_size_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

756 
¢d_pcm_hw_∑øms_£t_≥riod_size_öãgî
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

758 
¢d_pcm_hw_∑øms_gë_≥riods
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

759 
¢d_pcm_hw_∑øms_gë_≥riods_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

760 
¢d_pcm_hw_∑øms_gë_≥riods_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

761 
¢d_pcm_hw_∑øms_ã°_≥riods
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

762 
¢d_pcm_hw_∑øms_£t_≥riods
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

763 
¢d_pcm_hw_∑øms_£t_≥riods_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

764 
¢d_pcm_hw_∑øms_£t_≥riods_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

765 
¢d_pcm_hw_∑øms_£t_≥riods_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
);

766 
¢d_pcm_hw_∑øms_£t_≥riods_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

767 
¢d_pcm_hw_∑øms_£t_≥riods_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

768 
¢d_pcm_hw_∑øms_£t_≥riods_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

769 
¢d_pcm_hw_∑øms_£t_≥riods_öãgî
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

771 
¢d_pcm_hw_∑øms_gë_buf„r_time
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

772 
¢d_pcm_hw_∑øms_gë_buf„r_time_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

773 
¢d_pcm_hw_∑øms_gë_buf„r_time_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

774 
¢d_pcm_hw_∑øms_ã°_buf„r_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

775 
¢d_pcm_hw_∑øms_£t_buf„r_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

776 
¢d_pcm_hw_∑øms_£t_buf„r_time_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

777 
¢d_pcm_hw_∑øms_£t_buf„r_time_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

778 
¢d_pcm_hw_∑øms_£t_buf„r_time_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
);

779 
¢d_pcm_hw_∑øms_£t_buf„r_time_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

780 
¢d_pcm_hw_∑øms_£t_buf„r_time_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

781 
¢d_pcm_hw_∑øms_£t_buf„r_time_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

783 
¢d_pcm_hw_∑øms_gë_buf„r_size
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

784 
¢d_pcm_hw_∑øms_gë_buf„r_size_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

785 
¢d_pcm_hw_∑øms_gë_buf„r_size_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

786 
¢d_pcm_hw_∑øms_ã°_buf„r_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

787 
¢d_pcm_hw_∑øms_£t_buf„r_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

788 
¢d_pcm_hw_∑øms_£t_buf„r_size_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

789 
¢d_pcm_hw_∑øms_£t_buf„r_size_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

790 
¢d_pcm_hw_∑øms_£t_buf„r_size_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
mö
, snd_pcm_u‰ames_à*
max
);

791 
¢d_pcm_hw_∑øms_£t_buf„r_size_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

792 
¢d_pcm_hw_∑øms_£t_buf„r_size_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

793 
¢d_pcm_hw_∑øms_£t_buf„r_size_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

797 
¢d_pcm_hw_∑øms_gë_mö_Æign
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

808 
size_t
 
¢d_pcm_sw_∑øms_sizeof
();

813 
	#¢d_pcm_sw_∑øms_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_sw_∑øms
)

	)

814 
¢d_pcm_sw_∑øms_mÆloc
(
¢d_pcm_sw_∑øms_t
 **
±r
);

815 
¢d_pcm_sw_∑øms_‰ì
(
¢d_pcm_sw_∑øms_t
 *
obj
);

816 
¢d_pcm_sw_∑øms_c›y
(
¢d_pcm_sw_∑øms_t
 *
d°
, c⁄° snd_pcm_sw_∑øms_à*
§c
);

817 
¢d_pcm_sw_∑øms_gë_bound¨y
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

819 #i‡!
deföed
(
ALSA_LIBRARY_BUILD
Ë&& !deföed(
ALSA_PCM_OLD_SW_PARAMS_API
)

821 
¢d_pcm_sw_∑øms_£t_t°amp_mode
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_t°amp_t
 
vÆ
);

822 
¢d_pcm_sw_∑øms_gë_t°amp_mode
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_t°amp_t
 *
vÆ
);

823 
¢d_pcm_sw_∑øms_£t_avaû_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

824 
¢d_pcm_sw_∑øms_gë_avaû_mö
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

825 
¢d_pcm_sw_∑øms_£t_≥riod_evít
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
vÆ
);

826 
¢d_pcm_sw_∑øms_gë_≥riod_evít
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, *
vÆ
);

827 
¢d_pcm_sw_∑øms_£t_°¨t_thªshﬁd
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

828 
¢d_pcm_sw_∑øms_gë_°¨t_thªshﬁd
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑ømsm
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

829 
¢d_pcm_sw_∑øms_£t_°›_thªshﬁd
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

830 
¢d_pcm_sw_∑øms_gë_°›_thªshﬁd
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

831 
¢d_pcm_sw_∑øms_£t_sûí˚_thªshﬁd
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

832 
¢d_pcm_sw_∑øms_gë_sûí˚_thªshﬁd
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

833 
¢d_pcm_sw_∑øms_£t_sûí˚_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

834 
¢d_pcm_sw_∑øms_gë_sûí˚_size
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

841 #i‚de‡
ALSA_LIBRARY_BUILD


842 #i‡
deföed
(
ALSA_PCM_OLD_HW_PARAMS_API
Ë|| deföed(
ALSA_PCM_OLD_SW_PARAMS_API
)

843 
	~"pcm_ﬁd.h
"

854 
size_t
 
¢d_pcm_ac˚ss_mask_sizeof
();

859 
	#¢d_pcm_ac˚ss_mask_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_ac˚ss_mask
)

	)

860 
¢d_pcm_ac˚ss_mask_mÆloc
(
¢d_pcm_ac˚ss_mask_t
 **
±r
);

861 
¢d_pcm_ac˚ss_mask_‰ì
(
¢d_pcm_ac˚ss_mask_t
 *
obj
);

862 
¢d_pcm_ac˚ss_mask_c›y
(
¢d_pcm_ac˚ss_mask_t
 *
d°
, c⁄° snd_pcm_ac˚ss_mask_à*
§c
);

863 
¢d_pcm_ac˚ss_mask_n⁄e
(
¢d_pcm_ac˚ss_mask_t
 *
mask
);

864 
¢d_pcm_ac˚ss_mask_™y
(
¢d_pcm_ac˚ss_mask_t
 *
mask
);

865 
¢d_pcm_ac˚ss_mask_ã°
(c⁄° 
¢d_pcm_ac˚ss_mask_t
 *
mask
, 
¢d_pcm_ac˚ss_t
 
vÆ
);

866 
¢d_pcm_ac˚ss_mask_em±y
(c⁄° 
¢d_pcm_ac˚ss_mask_t
 *
mask
);

867 
¢d_pcm_ac˚ss_mask_£t
(
¢d_pcm_ac˚ss_mask_t
 *
mask
, 
¢d_pcm_ac˚ss_t
 
vÆ
);

868 
¢d_pcm_ac˚ss_mask_ª£t
(
¢d_pcm_ac˚ss_mask_t
 *
mask
, 
¢d_pcm_ac˚ss_t
 
vÆ
);

879 
size_t
 
¢d_pcm_f‹m©_mask_sizeof
();

884 
	#¢d_pcm_f‹m©_mask_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_f‹m©_mask
)

	)

885 
¢d_pcm_f‹m©_mask_mÆloc
(
¢d_pcm_f‹m©_mask_t
 **
±r
);

886 
¢d_pcm_f‹m©_mask_‰ì
(
¢d_pcm_f‹m©_mask_t
 *
obj
);

887 
¢d_pcm_f‹m©_mask_c›y
(
¢d_pcm_f‹m©_mask_t
 *
d°
, c⁄° snd_pcm_f‹m©_mask_à*
§c
);

888 
¢d_pcm_f‹m©_mask_n⁄e
(
¢d_pcm_f‹m©_mask_t
 *
mask
);

889 
¢d_pcm_f‹m©_mask_™y
(
¢d_pcm_f‹m©_mask_t
 *
mask
);

890 
¢d_pcm_f‹m©_mask_ã°
(c⁄° 
¢d_pcm_f‹m©_mask_t
 *
mask
, 
¢d_pcm_f‹m©_t
 
vÆ
);

891 
¢d_pcm_f‹m©_mask_em±y
(c⁄° 
¢d_pcm_f‹m©_mask_t
 *
mask
);

892 
¢d_pcm_f‹m©_mask_£t
(
¢d_pcm_f‹m©_mask_t
 *
mask
, 
¢d_pcm_f‹m©_t
 
vÆ
);

893 
¢d_pcm_f‹m©_mask_ª£t
(
¢d_pcm_f‹m©_mask_t
 *
mask
, 
¢d_pcm_f‹m©_t
 
vÆ
);

904 
size_t
 
¢d_pcm_subf‹m©_mask_sizeof
();

909 
	#¢d_pcm_subf‹m©_mask_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_subf‹m©_mask
)

	)

910 
¢d_pcm_subf‹m©_mask_mÆloc
(
¢d_pcm_subf‹m©_mask_t
 **
±r
);

911 
¢d_pcm_subf‹m©_mask_‰ì
(
¢d_pcm_subf‹m©_mask_t
 *
obj
);

912 
¢d_pcm_subf‹m©_mask_c›y
(
¢d_pcm_subf‹m©_mask_t
 *
d°
, c⁄° snd_pcm_subf‹m©_mask_à*
§c
);

913 
¢d_pcm_subf‹m©_mask_n⁄e
(
¢d_pcm_subf‹m©_mask_t
 *
mask
);

914 
¢d_pcm_subf‹m©_mask_™y
(
¢d_pcm_subf‹m©_mask_t
 *
mask
);

915 
¢d_pcm_subf‹m©_mask_ã°
(c⁄° 
¢d_pcm_subf‹m©_mask_t
 *
mask
, 
¢d_pcm_subf‹m©_t
 
vÆ
);

916 
¢d_pcm_subf‹m©_mask_em±y
(c⁄° 
¢d_pcm_subf‹m©_mask_t
 *
mask
);

917 
¢d_pcm_subf‹m©_mask_£t
(
¢d_pcm_subf‹m©_mask_t
 *
mask
, 
¢d_pcm_subf‹m©_t
 
vÆ
);

918 
¢d_pcm_subf‹m©_mask_ª£t
(
¢d_pcm_subf‹m©_mask_t
 *
mask
, 
¢d_pcm_subf‹m©_t
 
vÆ
);

929 
size_t
 
¢d_pcm_°©us_sizeof
();

934 
	#¢d_pcm_°©us_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_°©us
)

	)

935 
¢d_pcm_°©us_mÆloc
(
¢d_pcm_°©us_t
 **
±r
);

936 
¢d_pcm_°©us_‰ì
(
¢d_pcm_°©us_t
 *
obj
);

937 
¢d_pcm_°©us_c›y
(
¢d_pcm_°©us_t
 *
d°
, c⁄° snd_pcm_°©us_à*
§c
);

938 
¢d_pcm_°©e_t
 
¢d_pcm_°©us_gë_°©e
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

939 
¢d_pcm_°©us_gë_åiggî_t°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_time°amp_t
 *
±r
);

940 
¢d_pcm_°©us_gë_åiggî_ht°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

941 
¢d_pcm_°©us_gë_t°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_time°amp_t
 *
±r
);

942 
¢d_pcm_°©us_gë_ht°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

943 
¢d_pcm_°©us_gë_audio_ht°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

944 
¢d_pcm_s‰ames_t
 
¢d_pcm_°©us_gë_dñay
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

945 
¢d_pcm_u‰ames_t
 
¢d_pcm_°©us_gë_avaû
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

946 
¢d_pcm_u‰ames_t
 
¢d_pcm_°©us_gë_avaû_max
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

947 
¢d_pcm_u‰ames_t
 
¢d_pcm_°©us_gë_ovîønge
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

958 c⁄° *
¢d_pcm_ty≥_«me
(
¢d_pcm_ty≥_t
 
ty≥
);

959 c⁄° *
¢d_pcm_°ªam_«me
(c⁄° 
¢d_pcm_°ªam_t
 
°ªam
);

960 c⁄° *
¢d_pcm_ac˚ss_«me
(c⁄° 
¢d_pcm_ac˚ss_t
 
_ac˚ss
);

961 c⁄° *
¢d_pcm_f‹m©_«me
(c⁄° 
¢d_pcm_f‹m©_t
 
f‹m©
);

962 c⁄° *
¢d_pcm_f‹m©_des¸ùti⁄
(c⁄° 
¢d_pcm_f‹m©_t
 
f‹m©
);

963 c⁄° *
¢d_pcm_subf‹m©_«me
(c⁄° 
¢d_pcm_subf‹m©_t
 
subf‹m©
);

964 c⁄° *
¢d_pcm_subf‹m©_des¸ùti⁄
(c⁄° 
¢d_pcm_subf‹m©_t
 
subf‹m©
);

965 
¢d_pcm_f‹m©_t
 
¢d_pcm_f‹m©_vÆue
(c⁄° * 
«me
);

966 c⁄° *
¢d_pcm_t°amp_mode_«me
(c⁄° 
¢d_pcm_t°amp_t
 
mode
);

967 c⁄° *
¢d_pcm_°©e_«me
(c⁄° 
¢d_pcm_°©e_t
 
°©e
);

978 
¢d_pcm_dump
(
¢d_pcm_t
 *
pcm
, 
¢d_ouçut_t
 *
out
);

979 
¢d_pcm_dump_hw_£tup
(
¢d_pcm_t
 *
pcm
, 
¢d_ouçut_t
 *
out
);

980 
¢d_pcm_dump_sw_£tup
(
¢d_pcm_t
 *
pcm
, 
¢d_ouçut_t
 *
out
);

981 
¢d_pcm_dump_£tup
(
¢d_pcm_t
 *
pcm
, 
¢d_ouçut_t
 *
out
);

982 
¢d_pcm_hw_∑øms_dump
(
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_ouçut_t
 *
out
);

983 
¢d_pcm_sw_∑øms_dump
(
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_ouçut_t
 *
out
);

984 
¢d_pcm_°©us_dump
(
¢d_pcm_°©us_t
 *
°©us
, 
¢d_ouçut_t
 *
out
);

995 
¢d_pcm_mm≠_begö
(
¢d_pcm_t
 *
pcm
,

996 c⁄° 
¢d_pcm_ch™√l_¨ó_t
 **
¨ós
,

997 
¢d_pcm_u‰ames_t
 *
off£t
,

998 
¢d_pcm_u‰ames_t
 *
‰ames
);

999 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_commô
(
¢d_pcm_t
 *
pcm
,

1000 
¢d_pcm_u‰ames_t
 
off£t
,

1001 
¢d_pcm_u‰ames_t
 
‰ames
);

1002 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_wrôei
(
¢d_pcm_t
 *
pcm
, c⁄° *
buf„r
, 
¢d_pcm_u‰ames_t
 
size
);

1003 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_ªadi
(
¢d_pcm_t
 *
pcm
, *
buf„r
, 
¢d_pcm_u‰ames_t
 
size
);

1004 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_wrôí
(
¢d_pcm_t
 *
pcm
, **
bufs
, 
¢d_pcm_u‰ames_t
 
size
);

1005 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_ªadn
(
¢d_pcm_t
 *
pcm
, **
bufs
, 
¢d_pcm_u‰ames_t
 
size
);

1016 
¢d_pcm_f‹m©_sig√d
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1017 
¢d_pcm_f‹m©_unsig√d
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1018 
¢d_pcm_f‹m©_löór
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1019 
¢d_pcm_f‹m©_Êﬂt
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1020 
¢d_pcm_f‹m©_lôée_ídün
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1021 
¢d_pcm_f‹m©_big_ídün
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1022 
¢d_pcm_f‹m©_˝u_ídün
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1023 
¢d_pcm_f‹m©_width
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1024 
¢d_pcm_f‹m©_physiˇl_width
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1025 
¢d_pcm_f‹m©_t
 
¢d_pcm_buûd_löór_f‹m©
(
width
, 
pwidth
, 
unsignd
, 
big_ídün
);

1026 
ssize_t
 
¢d_pcm_f‹m©_size
(
¢d_pcm_f‹m©_t
 
f‹m©
, 
size_t
 
ßm∂es
);

1027 
u_öt8_t
 
¢d_pcm_f‹m©_sûí˚
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1028 
u_öt16_t
 
¢d_pcm_f‹m©_sûí˚_16
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1029 
u_öt32_t
 
¢d_pcm_f‹m©_sûí˚_32
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1030 
u_öt64_t
 
¢d_pcm_f‹m©_sûí˚_64
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1031 
¢d_pcm_f‹m©_£t_sûí˚
(
¢d_pcm_f‹m©_t
 
f‹m©
, *
buf
, 
ßm∂es
);

1033 
¢d_pcm_s‰ames_t
 
¢d_pcm_byãs_to_‰ames
(
¢d_pcm_t
 *
pcm
, 
ssize_t
 
byãs
);

1034 
ssize_t
 
¢d_pcm_‰ames_to_byãs
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_s‰ames_t
 
‰ames
);

1035 
¢d_pcm_byãs_to_ßm∂es
(
¢d_pcm_t
 *
pcm
, 
ssize_t
 
byãs
);

1036 
ssize_t
 
¢d_pcm_ßm∂es_to_byãs
(
¢d_pcm_t
 *
pcm
, 
ßm∂es
);

1038 
¢d_pcm_¨ó_sûí˚
(c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
d°_ch™√l
, 
¢d_pcm_u‰ames_t
 
d°_off£t
,

1039 
ßm∂es
, 
¢d_pcm_f‹m©_t
 
f‹m©
);

1040 
¢d_pcm_¨ós_sûí˚
(c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
d°_ch™√ls
, 
¢d_pcm_u‰ames_t
 
d°_off£t
,

1041 
ch™√ls
, 
¢d_pcm_u‰ames_t
 
‰ames
, 
¢d_pcm_f‹m©_t
 
f‹m©
);

1042 
¢d_pcm_¨ó_c›y
(c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
d°_ch™√l
, 
¢d_pcm_u‰ames_t
 
d°_off£t
,

1043 c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
§c_ch™√l
, 
¢d_pcm_u‰ames_t
 
§c_off£t
,

1044 
ßm∂es
, 
¢d_pcm_f‹m©_t
 
f‹m©
);

1045 
¢d_pcm_¨ós_c›y
(c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
d°_ch™√ls
, 
¢d_pcm_u‰ames_t
 
d°_off£t
,

1046 c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
§c_ch™√ls
, 
¢d_pcm_u‰ames_t
 
§c_off£t
,

1047 
ch™√ls
, 
¢d_pcm_u‰ames_t
 
‰ames
, 
¢d_pcm_f‹m©_t
 
f‹m©
);

1059 
	e_¢d_pcm_hook_ty≥
 {

1060 
SND_PCM_HOOK_TYPE_HW_PARAMS
 = 0,

1061 
SND_PCM_HOOK_TYPE_HW_FREE
,

1062 
SND_PCM_HOOK_TYPE_CLOSE
,

1063 
SND_PCM_HOOK_TYPE_LAST
 = 
SND_PCM_HOOK_TYPE_CLOSE


1064 } 
	t¢d_pcm_hook_ty≥_t
;

1067 
_¢d_pcm_hook
 
	t¢d_pcm_hook_t
;

1069 (*
¢d_pcm_hook_func_t
)(
	t¢d_pcm_hook_t
 *
	thook
);

1070 
¢d_pcm_t
 *
¢d_pcm_hook_gë_pcm
(
¢d_pcm_hook_t
 *
hook
);

1071 *
¢d_pcm_hook_gë_¥iv©e
(
¢d_pcm_hook_t
 *
hook
);

1072 
¢d_pcm_hook_£t_¥iv©e
(
¢d_pcm_hook_t
 *
hook
, *
¥iv©e_d©a
);

1073 
¢d_pcm_hook_add
(
¢d_pcm_hook_t
 **
hookp
, 
¢d_pcm_t
 *
pcm
,

1074 
¢d_pcm_hook_ty≥_t
 
ty≥
,

1075 
¢d_pcm_hook_func_t
 
func
, *
¥iv©e_d©a
);

1076 
¢d_pcm_hook_ªmove
(
¢d_pcm_hook_t
 *
hook
);

1088 
	s_¢d_pcm_sc›e_›s
 {

1092 (*
íabÀ
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1096 (*
dißbÀ
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1100 (*
°¨t
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1104 (*
°›
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1108 (*
upd©e
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1112 (*
ª£t
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1116 (*
˛o£
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1117 } 
	t¢d_pcm_sc›e_›s_t
;

1119 
¢d_pcm_u‰ames_t
 
¢d_pcm_mëî_gë_bufsize
(
¢d_pcm_t
 *
pcm
);

1120 
¢d_pcm_mëî_gë_ch™√ls
(
¢d_pcm_t
 *
pcm
);

1121 
¢d_pcm_mëî_gë_øã
(
¢d_pcm_t
 *
pcm
);

1122 
¢d_pcm_u‰ames_t
 
¢d_pcm_mëî_gë_now
(
¢d_pcm_t
 *
pcm
);

1123 
¢d_pcm_u‰ames_t
 
¢d_pcm_mëî_gë_bound¨y
(
¢d_pcm_t
 *
pcm
);

1124 
¢d_pcm_mëî_add_sc›e
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sc›e_t
 *
sc›e
);

1125 
¢d_pcm_sc›e_t
 *
¢d_pcm_mëî_£¨ch_sc›e
(
¢d_pcm_t
 *
pcm
, c⁄° *
«me
);

1126 
¢d_pcm_sc›e_mÆloc
(
¢d_pcm_sc›e_t
 **
±r
);

1127 
¢d_pcm_sc›e_£t_›s
(
¢d_pcm_sc›e_t
 *
sc›e
,

1128 c⁄° 
¢d_pcm_sc›e_›s_t
 *
vÆ
);

1129 
¢d_pcm_sc›e_£t_«me
(
¢d_pcm_sc›e_t
 *
sc›e
, c⁄° *
vÆ
);

1130 c⁄° *
¢d_pcm_sc›e_gë_«me
(
¢d_pcm_sc›e_t
 *
sc›e
);

1131 *
¢d_pcm_sc›e_gë_ˇŒback_¥iv©e
(
¢d_pcm_sc›e_t
 *
sc›e
);

1132 
¢d_pcm_sc›e_£t_ˇŒback_¥iv©e
(
¢d_pcm_sc›e_t
 *
sc›e
, *
vÆ
);

1133 
¢d_pcm_sc›e_s16_›í
(
¢d_pcm_t
 *
pcm
, c⁄° *
«me
,

1134 
¢d_pcm_sc›e_t
 **
sc›ï
);

1135 
öt16_t
 *
¢d_pcm_sc›e_s16_gë_ch™√l_buf„r
(
¢d_pcm_sc›e_t
 *
sc›e
,

1136 
ch™√l
);

1148 
	e_¢d_•cm_œãncy
 {

1151 
SND_SPCM_LATENCY_STANDARD
 = 0,

1154 
SND_SPCM_LATENCY_MEDIUM
,

1157 
SND_SPCM_LATENCY_REALTIME


1158 } 
	t¢d_•cm_œãncy_t
;

1161 
	e_¢d_•cm_xrun_ty≥
 {

1163 
SND_SPCM_XRUN_IGNORE
 = 0,

1165 
SND_SPCM_XRUN_STOP


1166 } 
	t¢d_•cm_xrun_ty≥_t
;

1169 
	e_¢d_•cm_du∂ex_ty≥
 {

1171 
SND_SPCM_DUPLEX_LIBERAL
 = 0,

1173 
SND_SPCM_DUPLEX_PEDANTIC


1174 } 
	t¢d_•cm_du∂ex_ty≥_t
;

1176 
¢d_•cm_öô
(
¢d_pcm_t
 *
pcm
,

1177 
øã
,

1178 
ch™√ls
,

1179 
¢d_pcm_f‹m©_t
 
f‹m©
,

1180 
¢d_pcm_subf‹m©_t
 
subf‹m©
,

1181 
¢d_•cm_œãncy_t
 
œãncy
,

1182 
¢d_pcm_ac˚ss_t
 
_ac˚ss
,

1183 
¢d_•cm_xrun_ty≥_t
 
xrun_ty≥
);

1185 
¢d_•cm_öô_du∂ex
(
¢d_pcm_t
 *
∂ayback_pcm
,

1186 
¢d_pcm_t
 *
ˇ±uª_pcm
,

1187 
øã
,

1188 
ch™√ls
,

1189 
¢d_pcm_f‹m©_t
 
f‹m©
,

1190 
¢d_pcm_subf‹m©_t
 
subf‹m©
,

1191 
¢d_•cm_œãncy_t
 
œãncy
,

1192 
¢d_pcm_ac˚ss_t
 
_ac˚ss
,

1193 
¢d_•cm_xrun_ty≥_t
 
xrun_ty≥
,

1194 
¢d_•cm_du∂ex_ty≥_t
 
du∂ex_ty≥
);

1196 
¢d_•cm_öô_gë_∑øms
(
¢d_pcm_t
 *
pcm
,

1197 *
øã
,

1198 
¢d_pcm_u‰ames_t
 *
buf„r_size
,

1199 
¢d_pcm_u‰ames_t
 *
≥riod_size
);

1211 c⁄° *
¢d_pcm_°¨t_mode_«me
(
¢d_pcm_°¨t_t
 
mode
Ë
__©åibuã__
((
dïªˇãd
));

1212 c⁄° *
¢d_pcm_xrun_mode_«me
(
¢d_pcm_xrun_t
 
mode
Ë
__©åibuã__
((
dïªˇãd
));

1213 
¢d_pcm_sw_∑øms_£t_°¨t_mode
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_°¨t_t
 
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1214 
¢d_pcm_°¨t_t
 
¢d_pcm_sw_∑øms_gë_°¨t_mode
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
Ë
__©åibuã__
((
dïªˇãd
));

1215 
¢d_pcm_sw_∑øms_£t_xrun_mode
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_xrun_t
 
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1216 
¢d_pcm_xrun_t
 
¢d_pcm_sw_∑øms_gë_xrun_mode
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
Ë
__©åibuã__
((
dïªˇãd
));

1217 #i‡!
deföed
(
ALSA_LIBRARY_BUILD
Ë&& !deföed(
ALSA_PCM_OLD_SW_PARAMS_API
)

1218 
¢d_pcm_sw_∑øms_£t_x„r_Æign
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1219 
¢d_pcm_sw_∑øms_gë_x„r_Æign
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1220 
¢d_pcm_sw_∑øms_£t_¶ìp_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1221 
¢d_pcm_sw_∑øms_gë_¶ìp_mö
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, *
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1223 #i‡!
deföed
(
ALSA_LIBRARY_BUILD
Ë&& !deföed(
ALSA_PCM_OLD_HW_PARAMS_API
)

1224 
¢d_pcm_hw_∑øms_gë_tick_time
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1225 
¢d_pcm_hw_∑øms_gë_tick_time_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1226 
¢d_pcm_hw_∑øms_gë_tick_time_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1227 
¢d_pcm_hw_∑øms_ã°_tick_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
Ë
__©åibuã__
((
dïªˇãd
));

1228 
¢d_pcm_hw_∑øms_£t_tick_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
Ë
__©åibuã__
((
dïªˇãd
));

1229 
¢d_pcm_hw_∑øms_£t_tick_time_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1230 
¢d_pcm_hw_∑øms_£t_tick_time_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1231 
¢d_pcm_hw_∑øms_£t_tick_time_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
Ë
__©åibuã__
((
dïªˇãd
));

1232 
¢d_pcm_hw_∑øms_£t_tick_time_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1233 
¢d_pcm_hw_∑øms_£t_tick_time_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1234 
¢d_pcm_hw_∑øms_£t_tick_time_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1239 #ifde‡
__˝lu•lus


	@/usr/include/alsa/rawmidi.h

28 #i‚de‡
__ALSA_RAWMIDI_H


29 
	#__ALSA_RAWMIDI_H


	)

31 #ifde‡
__˝lu•lus


42 
	#SND_RAWMIDI_DLSYM_VERSION
 
_dlsym_øwmidi_001


	)

45 
_¢d_øwmidi_öfo
 
	t¢d_øwmidi_öfo_t
;

47 
_¢d_øwmidi_∑øms
 
	t¢d_øwmidi_∑øms_t
;

49 
_¢d_øwmidi_°©us
 
	t¢d_øwmidi_°©us_t
;

52 
	e_¢d_øwmidi_°ªam
 {

54 
SND_RAWMIDI_STREAM_OUTPUT
 = 0,

56 
SND_RAWMIDI_STREAM_INPUT
,

57 
SND_RAWMIDI_STREAM_LAST
 = 
SND_RAWMIDI_STREAM_INPUT


58 } 
	t¢d_øwmidi_°ªam_t
;

61 
	#SND_RAWMIDI_APPEND
 0x0001

	)

63 
	#SND_RAWMIDI_NONBLOCK
 0x0002

	)

65 
	#SND_RAWMIDI_SYNC
 0x0004

	)

68 
_¢d_øwmidi
 
	t¢d_øwmidi_t
;

71 
	e_¢d_øwmidi_ty≥
 {

73 
SND_RAWMIDI_TYPE_HW
,

75 
SND_RAWMIDI_TYPE_SHM
,

77 
SND_RAWMIDI_TYPE_INET
,

79 
SND_RAWMIDI_TYPE_VIRTUAL


80 } 
	t¢d_øwmidi_ty≥_t
;

82 
¢d_øwmidi_›í
(
¢d_øwmidi_t
 **
ö_rmidi
, snd_øwmidi_à**
out_rmidi
,

83 c⁄° *
«me
, 
mode
);

84 
¢d_øwmidi_›í_lc⁄f
(
¢d_øwmidi_t
 **
ö_rmidi
, snd_øwmidi_à**
out_rmidi
,

85 c⁄° *
«me
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

86 
¢d_øwmidi_˛o£
(
¢d_øwmidi_t
 *
rmidi
);

87 
¢d_øwmidi_pﬁl_des¸ùt‹s_cou¡
(
¢d_øwmidi_t
 *
rmidi
);

88 
¢d_øwmidi_pﬁl_des¸ùt‹s
(
¢d_øwmidi_t
 *
rmidi
, 
pﬁlfd
 *
pfds
, 
•a˚
);

89 
¢d_øwmidi_pﬁl_des¸ùt‹s_ªvíts
(
¢d_øwmidi_t
 *
øwmidi
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvít
);

90 
¢d_øwmidi_n⁄block
(
¢d_øwmidi_t
 *
rmidi
, 
n⁄block
);

91 
size_t
 
¢d_øwmidi_öfo_sizeof
();

96 
	#¢d_øwmidi_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_øwmidi_öfo
)

	)

97 
¢d_øwmidi_öfo_mÆloc
(
¢d_øwmidi_öfo_t
 **
±r
);

98 
¢d_øwmidi_öfo_‰ì
(
¢d_øwmidi_öfo_t
 *
obj
);

99 
¢d_øwmidi_öfo_c›y
(
¢d_øwmidi_öfo_t
 *
d°
, c⁄° snd_øwmidi_öfo_à*
§c
);

100 
¢d_øwmidi_öfo_gë_devi˚
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

101 
¢d_øwmidi_öfo_gë_subdevi˚
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

102 
¢d_øwmidi_°ªam_t
 
¢d_øwmidi_öfo_gë_°ªam
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

103 
¢d_øwmidi_öfo_gë_ˇrd
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

104 
¢d_øwmidi_öfo_gë_Êags
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

105 c⁄° *
¢d_øwmidi_öfo_gë_id
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

106 c⁄° *
¢d_øwmidi_öfo_gë_«me
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

107 c⁄° *
¢d_øwmidi_öfo_gë_subdevi˚_«me
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

108 
¢d_øwmidi_öfo_gë_subdevi˚s_cou¡
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

109 
¢d_øwmidi_öfo_gë_subdevi˚s_avaû
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

110 
¢d_øwmidi_öfo_£t_devi˚
(
¢d_øwmidi_öfo_t
 *
obj
, 
vÆ
);

111 
¢d_øwmidi_öfo_£t_subdevi˚
(
¢d_øwmidi_öfo_t
 *
obj
, 
vÆ
);

112 
¢d_øwmidi_öfo_£t_°ªam
(
¢d_øwmidi_öfo_t
 *
obj
, 
¢d_øwmidi_°ªam_t
 
vÆ
);

113 
¢d_øwmidi_öfo
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_öfo_t
 * 
öfo
);

114 
size_t
 
¢d_øwmidi_∑øms_sizeof
();

119 
	#¢d_øwmidi_∑øms_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_øwmidi_∑øms
)

	)

120 
¢d_øwmidi_∑øms_mÆloc
(
¢d_øwmidi_∑øms_t
 **
±r
);

121 
¢d_øwmidi_∑øms_‰ì
(
¢d_øwmidi_∑øms_t
 *
obj
);

122 
¢d_øwmidi_∑øms_c›y
(
¢d_øwmidi_∑øms_t
 *
d°
, c⁄° snd_øwmidi_∑øms_à*
§c
);

123 
¢d_øwmidi_∑øms_£t_buf„r_size
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 *
∑øms
, 
size_t
 
vÆ
);

124 
size_t
 
¢d_øwmidi_∑øms_gë_buf„r_size
(c⁄° 
¢d_øwmidi_∑øms_t
 *
∑øms
);

125 
¢d_øwmidi_∑øms_£t_avaû_mö
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 *
∑øms
, 
size_t
 
vÆ
);

126 
size_t
 
¢d_øwmidi_∑øms_gë_avaû_mö
(c⁄° 
¢d_øwmidi_∑øms_t
 *
∑øms
);

127 
¢d_øwmidi_∑øms_£t_no_a˘ive_£nsög
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 *
∑øms
, 
vÆ
);

128 
¢d_øwmidi_∑øms_gë_no_a˘ive_£nsög
(c⁄° 
¢d_øwmidi_∑øms_t
 *
∑øms
);

129 
¢d_øwmidi_∑øms
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 * 
∑øms
);

130 
¢d_øwmidi_∑øms_cuºít
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 *
∑øms
);

131 
size_t
 
¢d_øwmidi_°©us_sizeof
();

136 
	#¢d_øwmidi_°©us_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_øwmidi_°©us
)

	)

137 
¢d_øwmidi_°©us_mÆloc
(
¢d_øwmidi_°©us_t
 **
±r
);

138 
¢d_øwmidi_°©us_‰ì
(
¢d_øwmidi_°©us_t
 *
obj
);

139 
¢d_øwmidi_°©us_c›y
(
¢d_øwmidi_°©us_t
 *
d°
, c⁄° snd_øwmidi_°©us_à*
§c
);

140 
¢d_øwmidi_°©us_gë_t°amp
(c⁄° 
¢d_øwmidi_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

141 
size_t
 
¢d_øwmidi_°©us_gë_avaû
(c⁄° 
¢d_øwmidi_°©us_t
 *
obj
);

142 
size_t
 
¢d_øwmidi_°©us_gë_xruns
(c⁄° 
¢d_øwmidi_°©us_t
 *
obj
);

143 
¢d_øwmidi_°©us
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_°©us_t
 * 
°©us
);

144 
¢d_øwmidi_døö
(
¢d_øwmidi_t
 *
rmidi
);

145 
¢d_øwmidi_dr›
(
¢d_øwmidi_t
 *
rmidi
);

146 
ssize_t
 
¢d_øwmidi_wrôe
(
¢d_øwmidi_t
 *
rmidi
, c⁄° *
buf„r
, 
size_t
 
size
);

147 
ssize_t
 
¢d_øwmidi_ªad
(
¢d_øwmidi_t
 *
rmidi
, *
buf„r
, 
size_t
 
size
);

148 c⁄° *
¢d_øwmidi_«me
(
¢d_øwmidi_t
 *
rmidi
);

149 
¢d_øwmidi_ty≥_t
 
¢d_øwmidi_ty≥
(
¢d_øwmidi_t
 *
rmidi
);

150 
¢d_øwmidi_°ªam_t
 
¢d_øwmidi_°ªam
(
¢d_øwmidi_t
 *
øwmidi
);

154 #ifde‡
__˝lu•lus


	@/usr/include/alsa/seq.h

29 #i‚de‡
__ALSA_SEQ_H


30 
	#__ALSA_SEQ_H


	)

32 #ifde‡
__˝lu•lus


44 
	#SND_SEQ_DLSYM_VERSION
 
_dlsym_£q_001


	)

47 
_¢d_£q
 
	t¢d_£q_t
;

52 
	#SND_SEQ_OPEN_OUTPUT
 1

	)

53 
	#SND_SEQ_OPEN_INPUT
 2

	)

54 
	#SND_SEQ_OPEN_DUPLEX
 (
SND_SEQ_OPEN_OUTPUT
|
SND_SEQ_OPEN_INPUT
Ë

	)

59 
	#SND_SEQ_NONBLOCK
 0x0001

	)

62 
	e_¢d_£q_ty≥
 {

63 
SND_SEQ_TYPE_HW
,

64 
SND_SEQ_TYPE_SHM
,

65 
SND_SEQ_TYPE_INET


66 } 
	t¢d_£q_ty≥_t
;

69 
	#SND_SEQ_ADDRESS_UNKNOWN
 253

	)

70 
	#SND_SEQ_ADDRESS_SUBSCRIBERS
 254

	)

71 
	#SND_SEQ_ADDRESS_BROADCAST
 255

	)

74 
	#SND_SEQ_CLIENT_SYSTEM
 0

	)

78 
¢d_£q_›í
(
¢d_£q_t
 **
h™dÀ
, c⁄° *
«me
, 
°ªams
, 
mode
);

79 
¢d_£q_›í_lc⁄f
(
¢d_£q_t
 **
h™dÀ
, c⁄° *
«me
, 
°ªams
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

80 c⁄° *
¢d_£q_«me
(
¢d_£q_t
 *
£q
);

81 
¢d_£q_ty≥_t
 
¢d_£q_ty≥
(
¢d_£q_t
 *
£q
);

82 
¢d_£q_˛o£
(
¢d_£q_t
 *
h™dÀ
);

83 
¢d_£q_pﬁl_des¸ùt‹s_cou¡
(
¢d_£q_t
 *
h™dÀ
, 
evíts
);

84 
¢d_£q_pﬁl_des¸ùt‹s
(
¢d_£q_t
 *
h™dÀ
, 
pﬁlfd
 *
pfds
, 
•a˚
, 
evíts
);

85 
¢d_£q_pﬁl_des¸ùt‹s_ªvíts
(
¢d_£q_t
 *
£q
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

86 
¢d_£q_n⁄block
(
¢d_£q_t
 *
h™dÀ
, 
n⁄block
);

87 
¢d_£q_˛õ¡_id
(
¢d_£q_t
 *
h™dÀ
);

89 
size_t
 
¢d_£q_gë_ouçut_buf„r_size
(
¢d_£q_t
 *
h™dÀ
);

90 
size_t
 
¢d_£q_gë_öput_buf„r_size
(
¢d_£q_t
 *
h™dÀ
);

91 
¢d_£q_£t_ouçut_buf„r_size
(
¢d_£q_t
 *
h™dÀ
, 
size_t
 
size
);

92 
¢d_£q_£t_öput_buf„r_size
(
¢d_£q_t
 *
h™dÀ
, 
size_t
 
size
);

95 
_¢d_£q_sy°em_öfo
 
	t¢d_£q_sy°em_öfo_t
;

97 
size_t
 
¢d_£q_sy°em_öfo_sizeof
();

99 
	#¢d_£q_sy°em_öfo_Æloˇ
(
±r
) \

100 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_sy°em_öfo
)

	)

101 
¢d_£q_sy°em_öfo_mÆloc
(
¢d_£q_sy°em_öfo_t
 **
±r
);

102 
¢d_£q_sy°em_öfo_‰ì
(
¢d_£q_sy°em_öfo_t
 *
±r
);

103 
¢d_£q_sy°em_öfo_c›y
(
¢d_£q_sy°em_öfo_t
 *
d°
, c⁄° snd_£q_sy°em_öfo_à*
§c
);

105 
¢d_£q_sy°em_öfo_gë_queues
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

106 
¢d_£q_sy°em_öfo_gë_˛õ¡s
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

107 
¢d_£q_sy°em_öfo_gë_p‹ts
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

108 
¢d_£q_sy°em_öfo_gë_ch™√ls
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

109 
¢d_£q_sy°em_öfo_gë_cur_˛õ¡s
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

110 
¢d_£q_sy°em_öfo_gë_cur_queues
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

112 
¢d_£q_sy°em_öfo
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_sy°em_öfo_t
 *
öfo
);

125 
_¢d_£q_˛õ¡_öfo
 
	t¢d_£q_˛õ¡_öfo_t
;

128 
	e¢d_£q_˛õ¡_ty≥
 {

129 
SND_SEQ_USER_CLIENT
 = 1,

130 
SND_SEQ_KERNEL_CLIENT
 = 2

131 } 
	t¢d_£q_˛õ¡_ty≥_t
;

133 
size_t
 
¢d_£q_˛õ¡_öfo_sizeof
();

135 
	#¢d_£q_˛õ¡_öfo_Æloˇ
(
±r
) \

136 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_˛õ¡_öfo
)

	)

137 
¢d_£q_˛õ¡_öfo_mÆloc
(
¢d_£q_˛õ¡_öfo_t
 **
±r
);

138 
¢d_£q_˛õ¡_öfo_‰ì
(
¢d_£q_˛õ¡_öfo_t
 *
±r
);

139 
¢d_£q_˛õ¡_öfo_c›y
(
¢d_£q_˛õ¡_öfo_t
 *
d°
, c⁄° snd_£q_˛õ¡_öfo_à*
§c
);

141 
¢d_£q_˛õ¡_öfo_gë_˛õ¡
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

142 
¢d_£q_˛õ¡_ty≥_t
 
¢d_£q_˛õ¡_öfo_gë_ty≥
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

143 c⁄° *
¢d_£q_˛õ¡_öfo_gë_«me
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

144 
¢d_£q_˛õ¡_öfo_gë_brﬂdˇ°_fûãr
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

145 
¢d_£q_˛õ¡_öfo_gë_îr‹_boun˚
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

146 c⁄° *
¢d_£q_˛õ¡_öfo_gë_evít_fûãr
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

147 
¢d_£q_˛õ¡_öfo_gë_num_p‹ts
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

148 
¢d_£q_˛õ¡_öfo_gë_evít_lo°
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

150 
¢d_£q_˛õ¡_öfo_£t_˛õ¡
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
˛õ¡
);

151 
¢d_£q_˛õ¡_öfo_£t_«me
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, c⁄° *
«me
);

152 
¢d_£q_˛õ¡_öfo_£t_brﬂdˇ°_fûãr
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
vÆ
);

153 
¢d_£q_˛õ¡_öfo_£t_îr‹_boun˚
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
vÆ
);

154 
¢d_£q_˛õ¡_öfo_£t_evít_fûãr
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, *
fûãr
);

156 
¢d_£q_˛õ¡_öfo_evít_fûãr_˛ór
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

157 
¢d_£q_˛õ¡_öfo_evít_fûãr_add
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
evít_ty≥
);

158 
¢d_£q_˛õ¡_öfo_evít_fûãr_dñ
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
evít_ty≥
);

159 
¢d_£q_˛õ¡_öfo_evít_fûãr_check
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
evít_ty≥
);

161 
¢d_£q_gë_˛õ¡_öfo
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

162 
¢d_£q_gë_™y_˛õ¡_öfo
(
¢d_£q_t
 *
h™dÀ
, 
˛õ¡
, 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

163 
¢d_£q_£t_˛õ¡_öfo
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

164 
¢d_£q_quîy_√xt_˛õ¡
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

170 
_¢d_£q_˛õ¡_poﬁ
 
	t¢d_£q_˛õ¡_poﬁ_t
;

172 
size_t
 
¢d_£q_˛õ¡_poﬁ_sizeof
();

174 
	#¢d_£q_˛õ¡_poﬁ_Æloˇ
(
±r
) \

175 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_˛õ¡_poﬁ
)

	)

176 
¢d_£q_˛õ¡_poﬁ_mÆloc
(
¢d_£q_˛õ¡_poﬁ_t
 **
±r
);

177 
¢d_£q_˛õ¡_poﬁ_‰ì
(
¢d_£q_˛õ¡_poﬁ_t
 *
±r
);

178 
¢d_£q_˛õ¡_poﬁ_c›y
(
¢d_£q_˛õ¡_poﬁ_t
 *
d°
, c⁄° snd_£q_˛õ¡_poﬁ_à*
§c
);

180 
¢d_£q_˛õ¡_poﬁ_gë_˛õ¡
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

181 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_ouçut_poﬁ
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

182 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_öput_poﬁ
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

183 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_ouçut_room
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

184 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_ouçut_‰ì
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

185 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_öput_‰ì
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

186 
¢d_£q_˛õ¡_poﬁ_£t_ouçut_poﬁ
(
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
, 
size_t
 
size
);

187 
¢d_£q_˛õ¡_poﬁ_£t_öput_poﬁ
(
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
, 
size_t
 
size
);

188 
¢d_£q_˛õ¡_poﬁ_£t_ouçut_room
(
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
, 
size_t
 
size
);

190 
¢d_£q_gë_˛õ¡_poﬁ
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

191 
¢d_£q_£t_˛õ¡_poﬁ
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

205 
_¢d_£q_p‹t_öfo
 
	t¢d_£q_p‹t_öfo_t
;

208 
	#SND_SEQ_PORT_SYSTEM_TIMER
 0

	)

209 
	#SND_SEQ_PORT_SYSTEM_ANNOUNCE
 1

	)

212 
	#SND_SEQ_PORT_CAP_READ
 (1<<0Ë

	)

213 
	#SND_SEQ_PORT_CAP_WRITE
 (1<<1Ë

	)

215 
	#SND_SEQ_PORT_CAP_SYNC_READ
 (1<<2Ë

	)

216 
	#SND_SEQ_PORT_CAP_SYNC_WRITE
 (1<<3Ë

	)

218 
	#SND_SEQ_PORT_CAP_DUPLEX
 (1<<4Ë

	)

220 
	#SND_SEQ_PORT_CAP_SUBS_READ
 (1<<5Ë

	)

221 
	#SND_SEQ_PORT_CAP_SUBS_WRITE
 (1<<6Ë

	)

222 
	#SND_SEQ_PORT_CAP_NO_EXPORT
 (1<<7Ë

	)

226 
	#SND_SEQ_PORT_TYPE_SPECIFIC
 (1<<0)

	)

228 
	#SND_SEQ_PORT_TYPE_MIDI_GENERIC
 (1<<1)

	)

230 
	#SND_SEQ_PORT_TYPE_MIDI_GM
 (1<<2)

	)

232 
	#SND_SEQ_PORT_TYPE_MIDI_GS
 (1<<3)

	)

234 
	#SND_SEQ_PORT_TYPE_MIDI_XG
 (1<<4)

	)

236 
	#SND_SEQ_PORT_TYPE_MIDI_MT32
 (1<<5)

	)

238 
	#SND_SEQ_PORT_TYPE_MIDI_GM2
 (1<<6)

	)

241 
	#SND_SEQ_PORT_TYPE_SYNTH
 (1<<10)

	)

244 
	#SND_SEQ_PORT_TYPE_DIRECT_SAMPLE
 (1<<11)

	)

247 
	#SND_SEQ_PORT_TYPE_SAMPLE
 (1<<12)

	)

249 
	#SND_SEQ_PORT_TYPE_HARDWARE
 (1<<16)

	)

251 
	#SND_SEQ_PORT_TYPE_SOFTWARE
 (1<<17)

	)

253 
	#SND_SEQ_PORT_TYPE_SYNTHESIZER
 (1<<18)

	)

256 
	#SND_SEQ_PORT_TYPE_PORT
 (1<<19)

	)

258 
	#SND_SEQ_PORT_TYPE_APPLICATION
 (1<<20)

	)

261 
size_t
 
¢d_£q_p‹t_öfo_sizeof
();

263 
	#¢d_£q_p‹t_öfo_Æloˇ
(
±r
) \

264 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_p‹t_öfo
)

	)

265 
¢d_£q_p‹t_öfo_mÆloc
(
¢d_£q_p‹t_öfo_t
 **
±r
);

266 
¢d_£q_p‹t_öfo_‰ì
(
¢d_£q_p‹t_öfo_t
 *
±r
);

267 
¢d_£q_p‹t_öfo_c›y
(
¢d_£q_p‹t_öfo_t
 *
d°
, c⁄° snd_£q_p‹t_öfo_à*
§c
);

269 
¢d_£q_p‹t_öfo_gë_˛õ¡
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

270 
¢d_£q_p‹t_öfo_gë_p‹t
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

271 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_p‹t_öfo_gë_addr
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

272 c⁄° *
¢d_£q_p‹t_öfo_gë_«me
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

273 
¢d_£q_p‹t_öfo_gë_ˇ∑bûôy
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

274 
¢d_£q_p‹t_öfo_gë_ty≥
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

275 
¢d_£q_p‹t_öfo_gë_midi_ch™√ls
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

276 
¢d_£q_p‹t_öfo_gë_midi_voi˚s
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

277 
¢d_£q_p‹t_öfo_gë_sy¡h_voi˚s
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

278 
¢d_£q_p‹t_öfo_gë_ªad_u£
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

279 
¢d_£q_p‹t_öfo_gë_wrôe_u£
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

280 
¢d_£q_p‹t_öfo_gë_p‹t_•ecifõd
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

281 
¢d_£q_p‹t_öfo_gë_time°ampög
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

282 
¢d_£q_p‹t_öfo_gë_time°amp_ªÆ
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

283 
¢d_£q_p‹t_öfo_gë_time°amp_queue
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

285 
¢d_£q_p‹t_öfo_£t_˛õ¡
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
˛õ¡
);

286 
¢d_£q_p‹t_öfo_£t_p‹t
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
p‹t
);

287 
¢d_£q_p‹t_öfo_£t_addr
(
¢d_£q_p‹t_öfo_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

288 
¢d_£q_p‹t_öfo_£t_«me
(
¢d_£q_p‹t_öfo_t
 *
öfo
, c⁄° *
«me
);

289 
¢d_£q_p‹t_öfo_£t_ˇ∑bûôy
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
ˇ∑bûôy
);

290 
¢d_£q_p‹t_öfo_£t_ty≥
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
ty≥
);

291 
¢d_£q_p‹t_öfo_£t_midi_ch™√ls
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
ch™√ls
);

292 
¢d_£q_p‹t_öfo_£t_midi_voi˚s
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
voi˚s
);

293 
¢d_£q_p‹t_öfo_£t_sy¡h_voi˚s
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
voi˚s
);

294 
¢d_£q_p‹t_öfo_£t_p‹t_•ecifõd
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
vÆ
);

295 
¢d_£q_p‹t_öfo_£t_time°ampög
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
íabÀ
);

296 
¢d_£q_p‹t_öfo_£t_time°amp_ªÆ
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
ªÆtime
);

297 
¢d_£q_p‹t_öfo_£t_time°amp_queue
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
queue
);

299 
¢d_£q_¸óã_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

300 
¢d_£q_dñëe_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
p‹t
);

301 
¢d_£q_gë_p‹t_öfo
(
¢d_£q_t
 *
h™dÀ
, 
p‹t
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

302 
¢d_£q_gë_™y_p‹t_öfo
(
¢d_£q_t
 *
h™dÀ
, 
˛õ¡
, 
p‹t
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

303 
¢d_£q_£t_p‹t_öfo
(
¢d_£q_t
 *
h™dÀ
, 
p‹t
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

304 
¢d_£q_quîy_√xt_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

317 
_¢d_£q_p‹t_subs¸ibe
 
	t¢d_£q_p‹t_subs¸ibe_t
;

319 
size_t
 
¢d_£q_p‹t_subs¸ibe_sizeof
();

321 
	#¢d_£q_p‹t_subs¸ibe_Æloˇ
(
±r
) \

322 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_p‹t_subs¸ibe
)

	)

323 
¢d_£q_p‹t_subs¸ibe_mÆloc
(
¢d_£q_p‹t_subs¸ibe_t
 **
±r
);

324 
¢d_£q_p‹t_subs¸ibe_‰ì
(
¢d_£q_p‹t_subs¸ibe_t
 *
±r
);

325 
¢d_£q_p‹t_subs¸ibe_c›y
(
¢d_£q_p‹t_subs¸ibe_t
 *
d°
, c⁄° snd_£q_p‹t_subs¸ibe_à*
§c
);

327 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_p‹t_subs¸ibe_gë_£ndî
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

328 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_p‹t_subs¸ibe_gë_de°
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

329 
¢d_£q_p‹t_subs¸ibe_gë_queue
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

330 
¢d_£q_p‹t_subs¸ibe_gë_ex˛usive
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

331 
¢d_£q_p‹t_subs¸ibe_gë_time_upd©e
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

332 
¢d_£q_p‹t_subs¸ibe_gë_time_ªÆ
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

334 
¢d_£q_p‹t_subs¸ibe_£t_£ndî
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

335 
¢d_£q_p‹t_subs¸ibe_£t_de°
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

336 
¢d_£q_p‹t_subs¸ibe_£t_queue
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, 
q
);

337 
¢d_£q_p‹t_subs¸ibe_£t_ex˛usive
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, 
vÆ
);

338 
¢d_£q_p‹t_subs¸ibe_£t_time_upd©e
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, 
vÆ
);

339 
¢d_£q_p‹t_subs¸ibe_£t_time_ªÆ
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, 
vÆ
);

341 
¢d_£q_gë_p‹t_subs¸ùti⁄
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_subs¸ibe_t
 *
sub
);

342 
¢d_£q_subs¸ibe_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_subs¸ibe_t
 *
sub
);

343 
¢d_£q_unsubs¸ibe_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_subs¸ibe_t
 *
sub
);

349 
_¢d_£q_quîy_subs¸ibe
 
	t¢d_£q_quîy_subs¸ibe_t
;

353 
SND_SEQ_QUERY_SUBS_READ
,

354 
SND_SEQ_QUERY_SUBS_WRITE


355 } 
	t¢d_£q_quîy_subs_ty≥_t
;

357 
size_t
 
¢d_£q_quîy_subs¸ibe_sizeof
();

359 
	#¢d_£q_quîy_subs¸ibe_Æloˇ
(
±r
) \

360 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_quîy_subs¸ibe
)

	)

361 
¢d_£q_quîy_subs¸ibe_mÆloc
(
¢d_£q_quîy_subs¸ibe_t
 **
±r
);

362 
¢d_£q_quîy_subs¸ibe_‰ì
(
¢d_£q_quîy_subs¸ibe_t
 *
±r
);

363 
¢d_£q_quîy_subs¸ibe_c›y
(
¢d_£q_quîy_subs¸ibe_t
 *
d°
, c⁄° snd_£q_quîy_subs¸ibe_à*
§c
);

365 
¢d_£q_quîy_subs¸ibe_gë_˛õ¡
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

366 
¢d_£q_quîy_subs¸ibe_gë_p‹t
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

367 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_quîy_subs¸ibe_gë_roŸ
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

368 
¢d_£q_quîy_subs_ty≥_t
 
¢d_£q_quîy_subs¸ibe_gë_ty≥
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

369 
¢d_£q_quîy_subs¸ibe_gë_ödex
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

370 
¢d_£q_quîy_subs¸ibe_gë_num_subs
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

371 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_quîy_subs¸ibe_gë_addr
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

372 
¢d_£q_quîy_subs¸ibe_gë_queue
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

373 
¢d_£q_quîy_subs¸ibe_gë_ex˛usive
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

374 
¢d_£q_quîy_subs¸ibe_gë_time_upd©e
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

375 
¢d_£q_quîy_subs¸ibe_gë_time_ªÆ
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

377 
¢d_£q_quîy_subs¸ibe_£t_˛õ¡
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, 
˛õ¡
);

378 
¢d_£q_quîy_subs¸ibe_£t_p‹t
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, 
p‹t
);

379 
¢d_£q_quîy_subs¸ibe_£t_roŸ
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

380 
¢d_£q_quîy_subs¸ibe_£t_ty≥
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, 
¢d_£q_quîy_subs_ty≥_t
 
ty≥
);

381 
¢d_£q_quîy_subs¸ibe_£t_ödex
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, 
_ödex
);

383 
¢d_£q_quîy_p‹t_subs¸ibîs
(
¢d_£q_t
 *
£q
, 
¢d_£q_quîy_subs¸ibe_t
 * 
subs
);

396 
_¢d_£q_queue_öfo
 
	t¢d_£q_queue_öfo_t
;

398 
_¢d_£q_queue_°©us
 
	t¢d_£q_queue_°©us_t
;

400 
_¢d_£q_queue_ãmpo
 
	t¢d_£q_queue_ãmpo_t
;

402 
_¢d_£q_queue_timî
 
	t¢d_£q_queue_timî_t
;

405 
	#SND_SEQ_QUEUE_DIRECT
 253

	)

407 
size_t
 
¢d_£q_queue_öfo_sizeof
();

409 
	#¢d_£q_queue_öfo_Æloˇ
(
±r
) \

410 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_queue_öfo
)

	)

411 
¢d_£q_queue_öfo_mÆloc
(
¢d_£q_queue_öfo_t
 **
±r
);

412 
¢d_£q_queue_öfo_‰ì
(
¢d_£q_queue_öfo_t
 *
±r
);

413 
¢d_£q_queue_öfo_c›y
(
¢d_£q_queue_öfo_t
 *
d°
, c⁄° snd_£q_queue_öfo_à*
§c
);

415 
¢d_£q_queue_öfo_gë_queue
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

416 c⁄° *
¢d_£q_queue_öfo_gë_«me
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

417 
¢d_£q_queue_öfo_gë_ow√r
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

418 
¢d_£q_queue_öfo_gë_locked
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

419 
¢d_£q_queue_öfo_gë_Êags
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

421 
¢d_£q_queue_öfo_£t_«me
(
¢d_£q_queue_öfo_t
 *
öfo
, c⁄° *
«me
);

422 
¢d_£q_queue_öfo_£t_ow√r
(
¢d_£q_queue_öfo_t
 *
öfo
, 
ow√r
);

423 
¢d_£q_queue_öfo_£t_locked
(
¢d_£q_queue_öfo_t
 *
öfo
, 
locked
);

424 
¢d_£q_queue_öfo_£t_Êags
(
¢d_£q_queue_öfo_t
 *
öfo
, 
Êags
);

426 
¢d_£q_¸óã_queue
(
¢d_£q_t
 *
£q
, 
¢d_£q_queue_öfo_t
 *
öfo
);

427 
¢d_£q_Æloc_«med_queue
(
¢d_£q_t
 *
£q
, c⁄° *
«me
);

428 
¢d_£q_Æloc_queue
(
¢d_£q_t
 *
h™dÀ
);

429 
¢d_£q_‰ì_queue
(
¢d_£q_t
 *
h™dÀ
, 
q
);

430 
¢d_£q_gë_queue_öfo
(
¢d_£q_t
 *
£q
, 
q
, 
¢d_£q_queue_öfo_t
 *
öfo
);

431 
¢d_£q_£t_queue_öfo
(
¢d_£q_t
 *
£q
, 
q
, 
¢d_£q_queue_öfo_t
 *
öfo
);

432 
¢d_£q_quîy_«med_queue
(
¢d_£q_t
 *
£q
, c⁄° *
«me
);

434 
¢d_£q_gë_queue_ußge
(
¢d_£q_t
 *
h™dÀ
, 
q
);

435 
¢d_£q_£t_queue_ußge
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
u£d
);

439 
size_t
 
¢d_£q_queue_°©us_sizeof
();

441 
	#¢d_£q_queue_°©us_Æloˇ
(
±r
) \

442 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_queue_°©us
)

	)

443 
¢d_£q_queue_°©us_mÆloc
(
¢d_£q_queue_°©us_t
 **
±r
);

444 
¢d_£q_queue_°©us_‰ì
(
¢d_£q_queue_°©us_t
 *
±r
);

445 
¢d_£q_queue_°©us_c›y
(
¢d_£q_queue_°©us_t
 *
d°
, c⁄° snd_£q_queue_°©us_à*
§c
);

447 
¢d_£q_queue_°©us_gë_queue
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

448 
¢d_£q_queue_°©us_gë_evíts
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

449 
¢d_£q_tick_time_t
 
¢d_£q_queue_°©us_gë_tick_time
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

450 c⁄° 
¢d_£q_ªÆ_time_t
 *
¢d_£q_queue_°©us_gë_ªÆ_time
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

451 
¢d_£q_queue_°©us_gë_°©us
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

453 
¢d_£q_gë_queue_°©us
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_°©us_t
 *
°©us
);

457 
size_t
 
¢d_£q_queue_ãmpo_sizeof
();

459 
	#¢d_£q_queue_ãmpo_Æloˇ
(
±r
) \

460 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_queue_ãmpo
)

	)

461 
¢d_£q_queue_ãmpo_mÆloc
(
¢d_£q_queue_ãmpo_t
 **
±r
);

462 
¢d_£q_queue_ãmpo_‰ì
(
¢d_£q_queue_ãmpo_t
 *
±r
);

463 
¢d_£q_queue_ãmpo_c›y
(
¢d_£q_queue_ãmpo_t
 *
d°
, c⁄° snd_£q_queue_ãmpo_à*
§c
);

465 
¢d_£q_queue_ãmpo_gë_queue
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

466 
¢d_£q_queue_ãmpo_gë_ãmpo
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

467 
¢d_£q_queue_ãmpo_gë_µq
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

468 
¢d_£q_queue_ãmpo_gë_skew
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

469 
¢d_£q_queue_ãmpo_gë_skew_ba£
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

470 
¢d_£q_queue_ãmpo_£t_ãmpo
(
¢d_£q_queue_ãmpo_t
 *
öfo
, 
ãmpo
);

471 
¢d_£q_queue_ãmpo_£t_µq
(
¢d_£q_queue_ãmpo_t
 *
öfo
, 
µq
);

472 
¢d_£q_queue_ãmpo_£t_skew
(
¢d_£q_queue_ãmpo_t
 *
öfo
, 
skew
);

473 
¢d_£q_queue_ãmpo_£t_skew_ba£
(
¢d_£q_queue_ãmpo_t
 *
öfo
, 
ba£
);

475 
¢d_£q_gë_queue_ãmpo
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_ãmpo_t
 *
ãmpo
);

476 
¢d_£q_£t_queue_ãmpo
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_ãmpo_t
 *
ãmpo
);

483 
SND_SEQ_TIMER_ALSA
 = 0,

484 
SND_SEQ_TIMER_MIDI_CLOCK
 = 1,

485 
SND_SEQ_TIMER_MIDI_TICK
 = 2

486 } 
	t¢d_£q_queue_timî_ty≥_t
;

488 
size_t
 
¢d_£q_queue_timî_sizeof
();

490 
	#¢d_£q_queue_timî_Æloˇ
(
±r
) \

491 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_queue_timî
)

	)

492 
¢d_£q_queue_timî_mÆloc
(
¢d_£q_queue_timî_t
 **
±r
);

493 
¢d_£q_queue_timî_‰ì
(
¢d_£q_queue_timî_t
 *
±r
);

494 
¢d_£q_queue_timî_c›y
(
¢d_£q_queue_timî_t
 *
d°
, c⁄° snd_£q_queue_timî_à*
§c
);

496 
¢d_£q_queue_timî_gë_queue
(c⁄° 
¢d_£q_queue_timî_t
 *
öfo
);

497 
¢d_£q_queue_timî_ty≥_t
 
¢d_£q_queue_timî_gë_ty≥
(c⁄° 
¢d_£q_queue_timî_t
 *
öfo
);

498 c⁄° 
¢d_timî_id_t
 *
¢d_£q_queue_timî_gë_id
(c⁄° 
¢d_£q_queue_timî_t
 *
öfo
);

499 
¢d_£q_queue_timî_gë_ªsﬁuti⁄
(c⁄° 
¢d_£q_queue_timî_t
 *
öfo
);

501 
¢d_£q_queue_timî_£t_ty≥
(
¢d_£q_queue_timî_t
 *
öfo
, 
¢d_£q_queue_timî_ty≥_t
 
ty≥
);

502 
¢d_£q_queue_timî_£t_id
(
¢d_£q_queue_timî_t
 *
öfo
, c⁄° 
¢d_timî_id_t
 *
id
);

503 
¢d_£q_queue_timî_£t_ªsﬁuti⁄
(
¢d_£q_queue_timî_t
 *
öfo
, 
ªsﬁuti⁄
);

505 
¢d_£q_gë_queue_timî
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_timî_t
 *
timî
);

506 
¢d_£q_£t_queue_timî
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_timî_t
 *
timî
);

517 
¢d_£q_‰ì_evít
(
¢d_£q_evít_t
 *
ev
);

518 
ssize_t
 
¢d_£q_evít_Àngth
(
¢d_£q_evít_t
 *
ev
);

519 
¢d_£q_evít_ouçut
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 *
ev
);

520 
¢d_£q_evít_ouçut_buf„r
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 *
ev
);

521 
¢d_£q_evít_ouçut_dúe˘
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 *
ev
);

522 
¢d_£q_evít_öput
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 **
ev
);

523 
¢d_£q_evít_öput_≥ndög
(
¢d_£q_t
 *
£q
, 
„tch_£quí˚r
);

524 
¢d_£q_døö_ouçut
(
¢d_£q_t
 *
h™dÀ
);

525 
¢d_£q_evít_ouçut_≥ndög
(
¢d_£q_t
 *
£q
);

526 
¢d_£q_exåa˘_ouçut
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 **
ev
);

527 
¢d_£q_dr›_ouçut
(
¢d_£q_t
 *
h™dÀ
);

528 
¢d_£q_dr›_ouçut_buf„r
(
¢d_£q_t
 *
h™dÀ
);

529 
¢d_£q_dr›_öput
(
¢d_£q_t
 *
h™dÀ
);

530 
¢d_£q_dr›_öput_buf„r
(
¢d_£q_t
 *
h™dÀ
);

533 
_¢d_£q_ªmove_evíts
 
	t¢d_£q_ªmove_evíts_t
;

536 
	#SND_SEQ_REMOVE_INPUT
 (1<<0Ë

	)

537 
	#SND_SEQ_REMOVE_OUTPUT
 (1<<1Ë

	)

538 
	#SND_SEQ_REMOVE_DEST
 (1<<2Ë

	)

539 
	#SND_SEQ_REMOVE_DEST_CHANNEL
 (1<<3Ë

	)

540 
	#SND_SEQ_REMOVE_TIME_BEFORE
 (1<<4Ë

	)

541 
	#SND_SEQ_REMOVE_TIME_AFTER
 (1<<5Ë

	)

542 
	#SND_SEQ_REMOVE_TIME_TICK
 (1<<6Ë

	)

543 
	#SND_SEQ_REMOVE_EVENT_TYPE
 (1<<7Ë

	)

544 
	#SND_SEQ_REMOVE_IGNORE_OFF
 (1<<8Ë

	)

545 
	#SND_SEQ_REMOVE_TAG_MATCH
 (1<<9Ë

	)

547 
size_t
 
¢d_£q_ªmove_evíts_sizeof
();

549 
	#¢d_£q_ªmove_evíts_Æloˇ
(
±r
) \

550 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_ªmove_evíts
)

	)

551 
¢d_£q_ªmove_evíts_mÆloc
(
¢d_£q_ªmove_evíts_t
 **
±r
);

552 
¢d_£q_ªmove_evíts_‰ì
(
¢d_£q_ªmove_evíts_t
 *
±r
);

553 
¢d_£q_ªmove_evíts_c›y
(
¢d_£q_ªmove_evíts_t
 *
d°
, c⁄° snd_£q_ªmove_evíts_à*
§c
);

555 
¢d_£q_ªmove_evíts_gë_c⁄dôi⁄
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

556 
¢d_£q_ªmove_evíts_gë_queue
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

557 c⁄° 
¢d_£q_time°amp_t
 *
¢d_£q_ªmove_evíts_gë_time
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

558 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_ªmove_evíts_gë_de°
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

559 
¢d_£q_ªmove_evíts_gë_ch™√l
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

560 
¢d_£q_ªmove_evíts_gë_evít_ty≥
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

561 
¢d_£q_ªmove_evíts_gë_èg
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

563 
¢d_£q_ªmove_evíts_£t_c⁄dôi⁄
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
Êags
);

564 
¢d_£q_ªmove_evíts_£t_queue
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
queue
);

565 
¢d_£q_ªmove_evíts_£t_time
(
¢d_£q_ªmove_evíts_t
 *
öfo
, c⁄° 
¢d_£q_time°amp_t
 *
time
);

566 
¢d_£q_ªmove_evíts_£t_de°
(
¢d_£q_ªmove_evíts_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

567 
¢d_£q_ªmove_evíts_£t_ch™√l
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
ch™√l
);

568 
¢d_£q_ªmove_evíts_£t_evít_ty≥
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
ty≥
);

569 
¢d_£q_ªmove_evíts_£t_èg
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
èg
);

571 
¢d_£q_ªmove_evíts
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_ªmove_evíts_t
 *
öfo
);

582 
¢d_£q_£t_bô
(
ƒ
, *
¨øy
);

583 
¢d_£q_un£t_bô
(
ƒ
, *
¨øy
);

584 
¢d_£q_ch™ge_bô
(
ƒ
, *
¨øy
);

585 
¢d_£q_gë_bô
(
ƒ
, *
¨øy
);

599 
SND_SEQ_EVFLG_RESULT
,

600 
SND_SEQ_EVFLG_NOTE
,

601 
SND_SEQ_EVFLG_CONTROL
,

602 
SND_SEQ_EVFLG_QUEUE
,

603 
SND_SEQ_EVFLG_SYSTEM
,

604 
SND_SEQ_EVFLG_MESSAGE
,

605 
SND_SEQ_EVFLG_CONNECTION
,

606 
SND_SEQ_EVFLG_SAMPLE
,

607 
SND_SEQ_EVFLG_USERS
,

608 
SND_SEQ_EVFLG_INSTR
,

609 
SND_SEQ_EVFLG_QUOTE
,

610 
SND_SEQ_EVFLG_NONE
,

611 
SND_SEQ_EVFLG_RAW
,

612 
SND_SEQ_EVFLG_FIXED
,

613 
SND_SEQ_EVFLG_VARIABLE
,

614 
SND_SEQ_EVFLG_VARUSR


618 
SND_SEQ_EVFLG_NOTE_ONEARG
,

619 
SND_SEQ_EVFLG_NOTE_TWOARG


623 
SND_SEQ_EVFLG_QUEUE_NOARG
,

624 
SND_SEQ_EVFLG_QUEUE_TICK
,

625 
SND_SEQ_EVFLG_QUEUE_TIME
,

626 
SND_SEQ_EVFLG_QUEUE_VALUE


634 c⁄° 
¢d_£q_evít_ty≥s
[];

636 
	#_SND_SEQ_TYPE
(
x
Ë(1<<(x)Ë

	)

637 
	#_SND_SEQ_TYPE_OPT
(
x
Ë((x)<<24Ë

	)

640 
	#¢d_£q_ty≥_check
(
ev
,
x
Ë(
¢d_£q_evít_ty≥s
[”v)->
ty≥
] & 
	`_SND_SEQ_TYPE
(x))

	)

643 
	#¢d_£q_ev_is_ªsu…_ty≥
(
ev
) \

644 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_RESULT
)

	)

646 
	#¢d_£q_ev_is_nŸe_ty≥
(
ev
) \

647 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_NOTE
)

	)

649 
	#¢d_£q_ev_is_c⁄åﬁ_ty≥
(
ev
) \

650 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_CONTROL
)

	)

652 
	#¢d_£q_ev_is_ch™√l_ty≥
(
ev
) \

653 (
¢d_£q_evít_ty≥s
[(
ev
)->
ty≥
] & (
	`_SND_SEQ_TYPE
(
SND_SEQ_EVFLG_NOTE
Ë| _SND_SEQ_TYPE(
SND_SEQ_EVFLG_CONTROL
)))

	)

656 
	#¢d_£q_ev_is_queue_ty≥
(
ev
) \

657 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_QUEUE
)

	)

659 
	#¢d_£q_ev_is_mesßge_ty≥
(
ev
) \

660 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_MESSAGE
)

	)

662 
	#¢d_£q_ev_is_subs¸ibe_ty≥
(
ev
) \

663 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_CONNECTION
)

	)

665 
	#¢d_£q_ev_is_ßm∂e_ty≥
(
ev
) \

666 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_SAMPLE
)

	)

668 
	#¢d_£q_ev_is_u£r_ty≥
(
ev
) \

669 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_USERS
)

	)

671 
	#¢d_£q_ev_is_ö°r_ty≥
(
ev
) \

672 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_INSTR
)

	)

674 
	#¢d_£q_ev_is_fixed_ty≥
(
ev
) \

675 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_FIXED
)

	)

677 
	#¢d_£q_ev_is_v¨übÀ_ty≥
(
ev
) \

678 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_VARIABLE
)

	)

680 
	#¢d_£q_ev_is_v¨u§_ty≥
(
ev
) \

681 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_VARUSR
)

	)

683 
	#¢d_£q_ev_is_ª£rved
(
ev
) \

684 (! 
¢d_£q_evít_ty≥s
[(
ev
)->
ty≥
])

	)

690 
	#¢d_£q_ev_is_¥i‹
(
ev
) \

691 (((
ev
)->
Êags
 & 
SND_SEQ_PRIORITY_MASK
Ë=
SND_SEQ_PRIORITY_HIGH
)

	)

694 
	#¢d_£q_ev_Àngth_ty≥
(
ev
) \

695 ((
ev
)->
Êags
 & 
SND_SEQ_EVENT_LENGTH_MASK
)

	)

697 
	#¢d_£q_ev_is_fixed
(
ev
) \

698 (
	`¢d_£q_ev_Àngth_ty≥
(
ev
Ë=
SND_SEQ_EVENT_LENGTH_FIXED
)

	)

700 
	#¢d_£q_ev_is_v¨übÀ
(
ev
) \

701 (
	`¢d_£q_ev_Àngth_ty≥
(
ev
Ë=
SND_SEQ_EVENT_LENGTH_VARIABLE
)

	)

703 
	#¢d_£q_ev_is_v¨u§
(
ev
) \

704 (
	`¢d_£q_ev_Àngth_ty≥
(
ev
Ë=
SND_SEQ_EVENT_LENGTH_VARUSR
)

	)

707 
	#¢d_£q_ev_time°amp_ty≥
(
ev
) \

708 ((
ev
)->
Êags
 & 
SND_SEQ_TIME_STAMP_MASK
)

	)

710 
	#¢d_£q_ev_is_tick
(
ev
) \

711 (
	`¢d_£q_ev_time°amp_ty≥
(
ev
Ë=
SND_SEQ_TIME_STAMP_TICK
)

	)

713 
	#¢d_£q_ev_is_ªÆ
(
ev
) \

714 (
	`¢d_£q_ev_time°amp_ty≥
(
ev
Ë=
SND_SEQ_TIME_STAMP_REAL
)

	)

717 
	#¢d_£q_ev_timemode_ty≥
(
ev
) \

718 ((
ev
)->
Êags
 & 
SND_SEQ_TIME_MODE_MASK
)

	)

720 
	#¢d_£q_ev_is_ab°ime
(
ev
) \

721 (
	`¢d_£q_ev_timemode_ty≥
(
ev
Ë=
SND_SEQ_TIME_MODE_ABS
)

	)

723 
	#¢d_£q_ev_is_ª…ime
(
ev
) \

724 (
	`¢d_£q_ev_timemode_ty≥
(
ev
Ë=
SND_SEQ_TIME_MODE_REL
)

	)

727 
	#¢d_£q_ev_is_dúe˘
(
ev
) \

728 ((
ev
)->
queue
 =
SND_SEQ_QUEUE_DIRECT
)

	)

732 #ifde‡
__˝lu•lus


	@/usr/include/alsa/seq_event.h

28 #i‚de‡
__ALSA_SEQ_EVENT_H


29 
	#__ALSA_SEQ_EVENT_H


	)

41 
	t¢d_£q_evít_ty≥_t
;

44 
	e¢d_£q_evít_ty≥
 {

46 
	mSND_SEQ_EVENT_SYSTEM
 = 0,

48 
	mSND_SEQ_EVENT_RESULT
,

51 
	mSND_SEQ_EVENT_NOTE
 = 5,

53 
	mSND_SEQ_EVENT_NOTEON
,

55 
	mSND_SEQ_EVENT_NOTEOFF
,

57 
	mSND_SEQ_EVENT_KEYPRESS
,

60 
	mSND_SEQ_EVENT_CONTROLLER
 = 10,

62 
	mSND_SEQ_EVENT_PGMCHANGE
,

64 
	mSND_SEQ_EVENT_CHANPRESS
,

66 
	mSND_SEQ_EVENT_PITCHBEND
,

68 
	mSND_SEQ_EVENT_CONTROL14
,

70 
	mSND_SEQ_EVENT_NONREGPARAM
,

72 
	mSND_SEQ_EVENT_REGPARAM
,

75 
	mSND_SEQ_EVENT_SONGPOS
 = 20,

77 
	mSND_SEQ_EVENT_SONGSEL
,

79 
	mSND_SEQ_EVENT_QFRAME
,

81 
	mSND_SEQ_EVENT_TIMESIGN
,

83 
	mSND_SEQ_EVENT_KEYSIGN
,

86 
	mSND_SEQ_EVENT_START
 = 30,

88 
	mSND_SEQ_EVENT_CONTINUE
,

90 
	mSND_SEQ_EVENT_STOP
,

92 
	mSND_SEQ_EVENT_SETPOS_TICK
,

94 
	mSND_SEQ_EVENT_SETPOS_TIME
,

96 
	mSND_SEQ_EVENT_TEMPO
,

98 
	mSND_SEQ_EVENT_CLOCK
,

100 
	mSND_SEQ_EVENT_TICK
,

102 
	mSND_SEQ_EVENT_QUEUE_SKEW
,

104 
	mSND_SEQ_EVENT_SYNC_POS
,

107 
	mSND_SEQ_EVENT_TUNE_REQUEST
 = 40,

109 
	mSND_SEQ_EVENT_RESET
,

111 
	mSND_SEQ_EVENT_SENSING
,

114 
	mSND_SEQ_EVENT_ECHO
 = 50,

116 
	mSND_SEQ_EVENT_OSS
,

119 
	mSND_SEQ_EVENT_CLIENT_START
 = 60,

121 
	mSND_SEQ_EVENT_CLIENT_EXIT
,

123 
	mSND_SEQ_EVENT_CLIENT_CHANGE
,

125 
	mSND_SEQ_EVENT_PORT_START
,

127 
	mSND_SEQ_EVENT_PORT_EXIT
,

129 
	mSND_SEQ_EVENT_PORT_CHANGE
,

132 
	mSND_SEQ_EVENT_PORT_SUBSCRIBED
,

134 
	mSND_SEQ_EVENT_PORT_UNSUBSCRIBED
,

137 
	mSND_SEQ_EVENT_USR0
 = 90,

139 
	mSND_SEQ_EVENT_USR1
,

141 
	mSND_SEQ_EVENT_USR2
,

143 
	mSND_SEQ_EVENT_USR3
,

145 
	mSND_SEQ_EVENT_USR4
,

147 
	mSND_SEQ_EVENT_USR5
,

149 
	mSND_SEQ_EVENT_USR6
,

151 
	mSND_SEQ_EVENT_USR7
,

153 
	mSND_SEQ_EVENT_USR8
,

155 
	mSND_SEQ_EVENT_USR9
,

158 
	mSND_SEQ_EVENT_SYSEX
 = 130,

160 
	mSND_SEQ_EVENT_BOUNCE
,

162 
	mSND_SEQ_EVENT_USR_VAR0
 = 135,

164 
	mSND_SEQ_EVENT_USR_VAR1
,

166 
	mSND_SEQ_EVENT_USR_VAR2
,

168 
	mSND_SEQ_EVENT_USR_VAR3
,

170 
	mSND_SEQ_EVENT_USR_VAR4
,

173 
	mSND_SEQ_EVENT_NONE
 = 255

178 
	s¢d_£q_addr
 {

179 
	m˛õ¡
;

180 
	mp‹t
;

181 } 
	t¢d_£q_addr_t
;

184 
	s¢d_£q_c⁄√˘
 {

185 
¢d_£q_addr_t
 
	m£ndî
;

186 
¢d_£q_addr_t
 
	mde°
;

187 } 
	t¢d_£q_c⁄√˘_t
;

191 
	s¢d_£q_ªÆ_time
 {

192 
	mtv_£c
;

193 
	mtv_n£c
;

194 } 
	t¢d_£q_ªÆ_time_t
;

197 
	t¢d_£q_tick_time_t
;

200 
	u¢d_£q_time°amp
 {

201 
¢d_£q_tick_time_t
 
	mtick
;

202 
¢d_£q_ªÆ_time
 
	mtime
;

203 } 
	t¢d_£q_time°amp_t
;

211 
	#SND_SEQ_TIME_STAMP_TICK
 (0<<0Ë

	)

212 
	#SND_SEQ_TIME_STAMP_REAL
 (1<<0Ë

	)

213 
	#SND_SEQ_TIME_STAMP_MASK
 (1<<0Ë

	)

215 
	#SND_SEQ_TIME_MODE_ABS
 (0<<1Ë

	)

216 
	#SND_SEQ_TIME_MODE_REL
 (1<<1Ë

	)

217 
	#SND_SEQ_TIME_MODE_MASK
 (1<<1Ë

	)

219 
	#SND_SEQ_EVENT_LENGTH_FIXED
 (0<<2Ë

	)

220 
	#SND_SEQ_EVENT_LENGTH_VARIABLE
 (1<<2Ë

	)

221 
	#SND_SEQ_EVENT_LENGTH_VARUSR
 (2<<2Ë

	)

222 
	#SND_SEQ_EVENT_LENGTH_MASK
 (3<<2Ë

	)

224 
	#SND_SEQ_PRIORITY_NORMAL
 (0<<4Ë

	)

225 
	#SND_SEQ_PRIORITY_HIGH
 (1<<4Ë

	)

226 
	#SND_SEQ_PRIORITY_MASK
 (1<<4Ë

	)

230 
	s¢d_£q_ev_nŸe
 {

231 
	mch™√l
;

232 
	mnŸe
;

233 
	mvñocôy
;

234 
	moff_vñocôy
;

235 
	mduøti⁄
;

236 } 
	t¢d_£q_ev_nŸe_t
;

239 
	s¢d_£q_ev_˘æ
 {

240 
	mch™√l
;

241 
	munu£d
[3];

242 
	m∑øm
;

243 sig√d 
	mvÆue
;

244 } 
	t¢d_£q_ev_˘æ_t
;

247 
	s¢d_£q_ev_øw8
 {

248 
	md
[12];

249 } 
	t¢d_£q_ev_øw8_t
;

252 
	s¢d_£q_ev_øw32
 {

253 
	md
[3];

254 } 
	t¢d_£q_ev_øw32_t
;

257 
	s¢d_£q_ev_ext
 {

258 
	mÀn
;

259 *
	m±r
;

260 } 
	t__©åibuã__
((
	t∑cked
)Ë
	t¢d_£q_ev_ext_t
;

263 
	s¢d_£q_ªsu…
 {

264 
	mevít
;

265 
	mªsu…
;

266 } 
	t¢d_£q_ªsu…_t
;

269 
	s¢d_£q_queue_skew
 {

270 
	mvÆue
;

271 
	mba£
;

272 } 
	t¢d_£q_queue_skew_t
;

275 
	s¢d_£q_ev_queue_c⁄åﬁ
 {

276 
	mqueue
;

277 
	munu£d
[3];

279 sig√d 
	mvÆue
;

280 
¢d_£q_time°amp_t
 
	mtime
;

281 
	mposôi⁄
;

282 
¢d_£q_queue_skew_t
 
	mskew
;

283 
	md32
[2];

284 
	md8
[8];

285 } 
	m∑øm
;

286 } 
	t¢d_£q_ev_queue_c⁄åﬁ_t
;

290 
	s¢d_£q_evít
 {

291 
¢d_£q_evít_ty≥_t
 
	mty≥
;

292 
	mÊags
;

293 
	mèg
;

295 
	mqueue
;

296 
¢d_£q_time°amp_t
 
	mtime
;

298 
¢d_£q_addr_t
 
	msour˚
;

299 
¢d_£q_addr_t
 
	mde°
;

302 
¢d_£q_ev_nŸe_t
 
	mnŸe
;

303 
¢d_£q_ev_˘æ_t
 
	mc⁄åﬁ
;

304 
¢d_£q_ev_øw8_t
 
	møw8
;

305 
¢d_£q_ev_øw32_t
 
	møw32
;

306 
¢d_£q_ev_ext_t
 
	mext
;

307 
¢d_£q_ev_queue_c⁄åﬁ_t
 
	mqueue
;

308 
¢d_£q_time°amp_t
 
	mtime
;

309 
¢d_£q_addr_t
 
	maddr
;

310 
¢d_£q_c⁄√˘_t
 
	mc⁄√˘
;

311 
¢d_£q_ªsu…_t
 
	mªsu…
;

312 } 
	md©a
;

313 } 
	t¢d_£q_evít_t
;

	@/usr/include/alsa/seq_midi_event.h

28 #i‚de‡
__ALSA_SEQ_MIDI_EVENT_H


29 
	#__ALSA_SEQ_MIDI_EVENT_H


	)

31 #ifde‡
__˝lu•lus


43 
¢d_midi_evít
 
	t¢d_midi_evít_t
;

45 
¢d_midi_evít_√w
(
size_t
 
bufsize
, 
¢d_midi_evít_t
 **
rdev
);

46 
¢d_midi_evít_ªsize_buf„r
(
¢d_midi_evít_t
 *
dev
, 
size_t
 
bufsize
);

47 
¢d_midi_evít_‰ì
(
¢d_midi_evít_t
 *
dev
);

48 
¢d_midi_evít_öô
(
¢d_midi_evít_t
 *
dev
);

49 
¢d_midi_evít_ª£t_ícode
(
¢d_midi_evít_t
 *
dev
);

50 
¢d_midi_evít_ª£t_decode
(
¢d_midi_evít_t
 *
dev
);

51 
¢d_midi_evít_no_°©us
(
¢d_midi_evít_t
 *
dev
, 
⁄
);

53 
¢d_midi_evít_ícode
(
¢d_midi_evít_t
 *
dev
, c⁄° *
buf
, 
cou¡
, 
¢d_£q_evít_t
 *
ev
);

54 
¢d_midi_evít_ícode_byã
(
¢d_midi_evít_t
 *
dev
, 
c
, 
¢d_£q_evít_t
 *
ev
);

56 
¢d_midi_evít_decode
(
¢d_midi_evít_t
 *
dev
, *
buf
, 
cou¡
, c⁄° 
¢d_£q_evít_t
 *
ev
);

60 #ifde‡
__˝lu•lus


	@/usr/include/alsa/seqmid.h

28 #i‚de‡
__ALSA_SEQMID_H


29 
	#__ALSA_SEQMID_H


	)

31 #ifde‡
__˝lu•lus


48 
	#¢d_£q_ev_˛ór
(
ev
) \

49 
	`mem£t
(
ev
, 0, (
¢d_£q_evít_t
))

	)

58 
	#¢d_£q_ev_£t_èg
(
ev
,
t
) \

59 ((
ev
)->
èg
 = (
t
))

	)

71 
	#¢d_£q_ev_£t_de°
(
ev
,
c
,
p
) \

72 ((
ev
)->
de°
.
˛õ¡
 = (
c
), (ev)->de°.
p‹t
 = (
p
))

	)

82 
	#¢d_£q_ev_£t_subs
(
ev
) \

83 ((
ev
)->
de°
.
˛õ¡
 = 
SND_SEQ_ADDRESS_SUBSCRIBERS
,\

84 (
ev
)->
de°
.
p‹t
 = 
SND_SEQ_ADDRESS_UNKNOWN
)

	)

94 
	#¢d_£q_ev_£t_brﬂdˇ°
(
ev
) \

95 ((
ev
)->
de°
.
˛õ¡
 = 
SND_SEQ_ADDRESS_BROADCAST
,\

96 (
ev
)->
de°
.
p‹t
 = 
SND_SEQ_ADDRESS_BROADCAST
)

	)

105 
	#¢d_£q_ev_£t_sour˚
(
ev
,
p
) \

106 ((
ev
)->
sour˚
.
p‹t
 = (
p
))

	)

117 
	#¢d_£q_ev_£t_dúe˘
(
ev
) \

118 ((
ev
)->
queue
 = 
SND_SEQ_QUEUE_DIRECT
)

	)

132 
	#¢d_£q_ev_scheduÀ_tick
(
ev
, 
q
, 
ªœtive
, 
âick
) \

133 ((
ev
)->
Êags
 &~(
SND_SEQ_TIME_STAMP_MASK
 | 
SND_SEQ_TIME_MODE_MASK
),\

134 (
ev
)->
Êags
 |
SND_SEQ_TIME_STAMP_TICK
,\

135 (
ev
)->
Êags
 |(
ªœtive
Ë? 
SND_SEQ_TIME_MODE_REL
 : 
SND_SEQ_TIME_MODE_ABS
,\

136 (
ev
)->
time
.
tick
 = (
âick
),\

137 (
ev
)->
queue
 = (
q
))

	)

151 
	#¢d_£q_ev_scheduÀ_ªÆ
(
ev
, 
q
, 
ªœtive
, 
πime
) \

152 ((
ev
)->
Êags
 &~(
SND_SEQ_TIME_STAMP_MASK
 | 
SND_SEQ_TIME_MODE_MASK
),\

153 (
ev
)->
Êags
 |
SND_SEQ_TIME_STAMP_REAL
,\

154 (
ev
)->
Êags
 |(
ªœtive
Ë? 
SND_SEQ_TIME_MODE_REL
 : 
SND_SEQ_TIME_MODE_ABS
,\

155 (
ev
)->
time
.timê*(
πime
),\

156 (
ev
)->
queue
 = (
q
))

	)

163 
	#¢d_£q_ev_£t_¥i‹ôy
(
ev
, 
high_¥i‹
) \

164 ((
ev
)->
Êags
 &~
SND_SEQ_PRIORITY_MASK
,\

165 (
ev
)->
Êags
 |(
high_¥i‹
Ë? 
SND_SEQ_PRIORITY_HIGH
 : 
SND_SEQ_PRIORITY_NORMAL
)

	)

175 
	#¢d_£q_ev_£t_fixed
(
ev
) \

176 ((
ev
)->
Êags
 &~
SND_SEQ_EVENT_LENGTH_MASK
,\

177 (
ev
)->
Êags
 |
SND_SEQ_EVENT_LENGTH_FIXED
)

	)

189 
	#¢d_£q_ev_£t_v¨übÀ
(
ev
, 
d©Æí
, 
d©≠å
) \

190 ((
ev
)->
Êags
 &~
SND_SEQ_EVENT_LENGTH_MASK
,\

191 (
ev
)->
Êags
 |
SND_SEQ_EVENT_LENGTH_VARIABLE
,\

192 (
ev
)->
d©a
.
ext
.
Àn
 = (
d©Æí
),\

193 (
ev
)->
d©a
.
ext
.
±r
 = (
d©≠å
))

	)

205 
	#¢d_£q_ev_£t_v¨u§
(
ev
, 
d©Æí
, 
d©≠å
) \

206 ((
ev
)->
Êags
 &~
SND_SEQ_EVENT_LENGTH_MASK
,\

207 (
ev
)->
Êags
 |
SND_SEQ_EVENT_LENGTH_VARUSR
,\

208 (
ev
)->
d©a
.
ext
.
Àn
 = (
d©Æí
),\

209 (
ev
)->
d©a
.
ext
.
±r
 = (
d©≠å
))

	)

218 
	#¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
typ
, 
q
, 
vÆ
) \

219 ((
ev
)->
ty≥
 = (
typ
),\

220 
	`¢d_£q_ev_£t_de°
(
ev
, 
SND_SEQ_CLIENT_SYSTEM
, 
SND_SEQ_PORT_SYSTEM_TIMER
),\

221 (
ev
)->
d©a
.
queue
.queuê(
q
),\

222 (
ev
)->
d©a
.
queue
.
∑øm
.
vÆue
 = (
vÆ
))

	)

231 
	#¢d_£q_ev_£t_queue_°¨t
(
ev
, 
q
) \

232 
	`¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
SND_SEQ_EVENT_START
, 
q
, 0)

	)

241 
	#¢d_£q_ev_£t_queue_°›
(
ev
, 
q
) \

242 
	`¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
SND_SEQ_EVENT_STOP
, 
q
, 0)

	)

251 
	#¢d_£q_ev_£t_queue_c⁄töue
(
ev
, 
q
) \

252 
	`¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
SND_SEQ_EVENT_CONTINUE
, 
q
, 0)

	)

260 
	#¢d_£q_ev_£t_queue_ãmpo
(
ev
, 
q
, 
vÆ
) \

261 
	`¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
SND_SEQ_EVENT_TEMPO
, 
q
, 
vÆ
)

	)

269 
	#¢d_£q_ev_£t_queue_pos_ªÆ
(
ev
, 
q
, 
πime
) \

270 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_SETPOS_TIME
,\

271 
	`¢d_£q_ev_£t_de°
(
ev
, 
SND_SEQ_CLIENT_SYSTEM
, 
SND_SEQ_PORT_SYSTEM_TIMER
),\

272 (
ev
)->
d©a
.
queue
.queuê(
q
),\

273 (
ev
)->
d©a
.
queue
.
∑øm
.
time
.timê*(
πime
))

	)

281 
	#¢d_£q_ev_£t_queue_pos_tick
(
ev
, 
q
, 
âime
) \

282 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_SETPOS_TICK
,\

283 
	`¢d_£q_ev_£t_de°
(
ev
, 
SND_SEQ_CLIENT_SYSTEM
, 
SND_SEQ_PORT_SYSTEM_TIMER
),\

284 (
ev
)->
d©a
.
queue
.queuê(
q
),\

285 (
ev
)->
d©a
.
queue
.
∑øm
.
time
.
tick
 = (
âime
))

	)

288 
¢d_£q_c⁄åﬁ_queue
(
¢d_£q_t
 *
£q
, 
q
, 
ty≥
, 
vÆue
, 
¢d_£q_evít_t
 *
ev
);

296 
	#¢d_£q_°¨t_queue
(
£q
, 
q
, 
ev
) \

297 
	`¢d_£q_c⁄åﬁ_queue
(
£q
, 
q
, 
SND_SEQ_EVENT_START
, 0, 
ev
)

	)

305 
	#¢d_£q_°›_queue
(
£q
, 
q
, 
ev
) \

306 
	`¢d_£q_c⁄åﬁ_queue
(
£q
, 
q
, 
SND_SEQ_EVENT_STOP
, 0, 
ev
)

	)

314 
	#¢d_£q_c⁄töue_queue
(
£q
, 
q
, 
ev
) \

315 
	`¢d_£q_c⁄åﬁ_queue
(
£q
, 
q
, 
SND_SEQ_EVENT_CONTINUE
, 0, 
ev
)

	)

324 
	#¢d_£q_ch™ge_queue_ãmpo
(
£q
, 
q
, 
ãmpo
, 
ev
) \

325 
	`¢d_£q_c⁄åﬁ_queue
(
£q
, 
q
, 
SND_SEQ_EVENT_TEMPO
, 
ãmpo
, 
ev
)

	)

328 
¢d_£q_¸óã_sim∂e_p‹t
(
¢d_£q_t
 *
£q
, c⁄° *
«me
,

329 
ˇps
, 
ty≥
);

331 
¢d_£q_dñëe_sim∂e_p‹t
(
¢d_£q_t
 *
£q
, 
p‹t
);

336 
¢d_£q_c⁄√˘_‰om
(
¢d_£q_t
 *
£q
, 
my_p‹t
, 
§c_˛õ¡
, 
§c_p‹t
);

337 
¢d_£q_c⁄√˘_to
(
¢d_£q_t
 *
£q
, 
my_p‹t
, 
de°_˛õ¡
, 
de°_p‹t
);

338 
¢d_£q_disc⁄√˘_‰om
(
¢d_£q_t
 *
£q
, 
my_p‹t
, 
§c_˛õ¡
, 
§c_p‹t
);

339 
¢d_£q_disc⁄√˘_to
(
¢d_£q_t
 *
£q
, 
my_p‹t
, 
de°_˛õ¡
, 
de°_p‹t
);

344 
¢d_£q_£t_˛õ¡_«me
(
¢d_£q_t
 *
£q
, c⁄° *
«me
);

345 
¢d_£q_£t_˛õ¡_evít_fûãr
(
¢d_£q_t
 *
£q
, 
evít_ty≥
);

346 
¢d_£q_£t_˛õ¡_poﬁ_ouçut
(
¢d_£q_t
 *
£q
, 
size_t
 
size
);

347 
¢d_£q_£t_˛õ¡_poﬁ_ouçut_room
(
¢d_£q_t
 *
£q
, 
size_t
 
size
);

348 
¢d_£q_£t_˛õ¡_poﬁ_öput
(
¢d_£q_t
 *
£q
, 
size_t
 
size
);

350 
¢d_£q_sync_ouçut_queue
(
¢d_£q_t
 *
£q
);

355 
¢d_£q_∑r£_addªss
(
¢d_£q_t
 *
£q
, 
¢d_£q_addr_t
 *
addr
, c⁄° *
°r
);

360 
¢d_£q_ª£t_poﬁ_ouçut
(
¢d_£q_t
 *
£q
);

361 
¢d_£q_ª£t_poﬁ_öput
(
¢d_£q_t
 *
£q
);

371 
	#¢d_£q_ev_£t_nŸe
(
ev
, 
ch
, 
key
, 
vñ
, 
dur
) \

372 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_NOTE
,\

373 
	`¢d_£q_ev_£t_fixed
(
ev
),\

374 (
ev
)->
d©a
.
nŸe
.
ch™√l
 = (
ch
),\

375 (
ev
)->
d©a
.
nŸe
.nŸê(
key
),\

376 (
ev
)->
d©a
.
nŸe
.
vñocôy
 = (
vñ
),\

377 (
ev
)->
d©a
.
nŸe
.
duøti⁄
 = (
dur
))

	)

386 
	#¢d_£q_ev_£t_nŸe⁄
(
ev
, 
ch
, 
key
, 
vñ
) \

387 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_NOTEON
,\

388 
	`¢d_£q_ev_£t_fixed
(
ev
),\

389 (
ev
)->
d©a
.
nŸe
.
ch™√l
 = (
ch
),\

390 (
ev
)->
d©a
.
nŸe
.nŸê(
key
),\

391 (
ev
)->
d©a
.
nŸe
.
vñocôy
 = (
vñ
))

	)

400 
	#¢d_£q_ev_£t_nŸeoff
(
ev
, 
ch
, 
key
, 
vñ
) \

401 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_NOTEOFF
,\

402 
	`¢d_£q_ev_£t_fixed
(
ev
),\

403 (
ev
)->
d©a
.
nŸe
.
ch™√l
 = (
ch
),\

404 (
ev
)->
d©a
.
nŸe
.nŸê(
key
),\

405 (
ev
)->
d©a
.
nŸe
.
vñocôy
 = (
vñ
))

	)

414 
	#¢d_£q_ev_£t_key¥ess
(
ev
,
ch
,
key
,
vñ
) \

415 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_KEYPRESS
,\

416 
	`¢d_£q_ev_£t_fixed
(
ev
),\

417 (
ev
)->
d©a
.
nŸe
.
ch™√l
 = (
ch
),\

418 (
ev
)->
d©a
.
nŸe
.nŸê(
key
),\

419 (
ev
)->
d©a
.
nŸe
.
vñocôy
 = (
vñ
))

	)

428 
	#¢d_£q_ev_£t_c⁄åﬁÀr
(
ev
,
ch
,
cc
,
vÆ
) \

429 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_CONTROLLER
,\

430 
	`¢d_£q_ev_£t_fixed
(
ev
),\

431 (
ev
)->
d©a
.
c⁄åﬁ
.
ch™√l
 = (
ch
),\

432 (
ev
)->
d©a
.
c⁄åﬁ
.
∑øm
 = (
cc
),\

433 (
ev
)->
d©a
.
c⁄åﬁ
.
vÆue
 = (
vÆ
))

	)

441 
	#¢d_£q_ev_£t_pgmch™ge
(
ev
,
ch
,
vÆ
) \

442 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_PGMCHANGE
,\

443 
	`¢d_£q_ev_£t_fixed
(
ev
),\

444 (
ev
)->
d©a
.
c⁄åﬁ
.
ch™√l
 = (
ch
),\

445 (
ev
)->
d©a
.
c⁄åﬁ
.
vÆue
 = (
vÆ
))

	)

453 
	#¢d_£q_ev_£t_pôchbíd
(
ev
,
ch
,
vÆ
) \

454 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_PITCHBEND
,\

455 
	`¢d_£q_ev_£t_fixed
(
ev
),\

456 (
ev
)->
d©a
.
c⁄åﬁ
.
ch™√l
 = (
ch
),\

457 (
ev
)->
d©a
.
c⁄åﬁ
.
vÆue
 = (
vÆ
))

	)

465 
	#¢d_£q_ev_£t_ch™¥ess
(
ev
,
ch
,
vÆ
) \

466 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_CHANPRESS
,\

467 
	`¢d_£q_ev_£t_fixed
(
ev
),\

468 (
ev
)->
d©a
.
c⁄åﬁ
.
ch™√l
 = (
ch
),\

469 (
ev
)->
d©a
.
c⁄åﬁ
.
vÆue
 = (
vÆ
))

	)

479 
	#¢d_£q_ev_£t_sy£x
(
ev
,
d©Æí
,
d©≠å
) \

480 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_SYSEX
,\

481 
	`¢d_£q_ev_£t_v¨übÀ
(
ev
, 
d©Æí
, 
d©≠å
))

	)

485 #ifde‡
__˝lu•lus


	@/usr/include/alsa/timer.h

28 #i‚de‡
__ALSA_TIMER_H


29 
	#__ALSA_TIMER_H


	)

31 #ifde‡
__˝lu•lus


42 
	#SND_TIMER_DLSYM_VERSION
 
_dlsym_timî_001


	)

44 
	#SND_TIMER_QUERY_DLSYM_VERSION
 
_dlsym_timî_quîy_001


	)

47 
_¢d_timî_id
 
	t¢d_timî_id_t
;

49 
_¢d_timî_göfo
 
	t¢d_timî_göfo_t
;

51 
_¢d_timî_g∑øms
 
	t¢d_timî_g∑øms_t
;

53 
_¢d_timî_g°©us
 
	t¢d_timî_g°©us_t
;

55 
_¢d_timî_öfo
 
	t¢d_timî_öfo_t
;

57 
_¢d_timî_∑øms
 
	t¢d_timî_∑øms_t
;

59 
_¢d_timî_°©us
 
	t¢d_timî_°©us_t
;

61 
	e_¢d_timî_˛ass
 {

62 
SND_TIMER_CLASS_NONE
 = -1,

63 
SND_TIMER_CLASS_SLAVE
 = 0,

64 
SND_TIMER_CLASS_GLOBAL
,

65 
SND_TIMER_CLASS_CARD
,

66 
SND_TIMER_CLASS_PCM
,

67 
SND_TIMER_CLASS_LAST
 = 
SND_TIMER_CLASS_PCM


68 } 
	t¢d_timî_˛ass_t
;

71 
	e_¢d_timî_¶ave_˛ass
 {

72 
SND_TIMER_SCLASS_NONE
 = 0,

73 
SND_TIMER_SCLASS_APPLICATION
,

74 
SND_TIMER_SCLASS_SEQUENCER
,

75 
SND_TIMER_SCLASS_OSS_SEQUENCER
,

76 
SND_TIMER_SCLASS_LAST
 = 
SND_TIMER_SCLASS_OSS_SEQUENCER


77 } 
	t¢d_timî_¶ave_˛ass_t
;

80 
	e_¢d_timî_evít
 {

81 
SND_TIMER_EVENT_RESOLUTION
 = 0,

82 
SND_TIMER_EVENT_TICK
,

83 
SND_TIMER_EVENT_START
,

84 
SND_TIMER_EVENT_STOP
,

85 
SND_TIMER_EVENT_CONTINUE
,

86 
SND_TIMER_EVENT_PAUSE
,

87 
SND_TIMER_EVENT_EARLY
,

88 
SND_TIMER_EVENT_SUSPEND
,

89 
SND_TIMER_EVENT_RESUME
,

91 
SND_TIMER_EVENT_MSTART
 = 
SND_TIMER_EVENT_START
 + 10,

92 
SND_TIMER_EVENT_MSTOP
 = 
SND_TIMER_EVENT_STOP
 + 10,

93 
SND_TIMER_EVENT_MCONTINUE
 = 
SND_TIMER_EVENT_CONTINUE
 + 10,

94 
SND_TIMER_EVENT_MPAUSE
 = 
SND_TIMER_EVENT_PAUSE
 + 10,

95 
SND_TIMER_EVENT_MSUSPEND
 = 
SND_TIMER_EVENT_SUSPEND
 + 10,

96 
SND_TIMER_EVENT_MRESUME
 = 
SND_TIMER_EVENT_RESUME
 + 10

97 } 
	t¢d_timî_evít_t
;

100 
	s_¢d_timî_ªad
 {

101 
ªsﬁuti⁄
;

102 
ticks
;

103 } 
	t¢d_timî_ªad_t
;

106 
	s_¢d_timî_åód
 {

107 
¢d_timî_evít_t
 
evít
;

108 
¢d_htime°amp_t
 
t°amp
;

109 
vÆ
;

110 } 
	t¢d_timî_åód_t
;

113 
	#SND_TIMER_GLOBAL_SYSTEM
 0

	)

115 
	#SND_TIMER_GLOBAL_RTC
 1

	)

117 
	#SND_TIMER_GLOBAL_HPET
 2

	)

119 
	#SND_TIMER_GLOBAL_HRTIMER
 3

	)

122 
	#SND_TIMER_OPEN_NONBLOCK
 (1<<0)

	)

124 
	#SND_TIMER_OPEN_TREAD
 (1<<1)

	)

127 
	e_¢d_timî_ty≥
 {

129 
SND_TIMER_TYPE_HW
 = 0,

131 
SND_TIMER_TYPE_SHM
,

133 
SND_TIMER_TYPE_INET


134 } 
	t¢d_timî_ty≥_t
;

137 
_¢d_timî_quîy
 
	t¢d_timî_quîy_t
;

139 
_¢d_timî
 
	t¢d_timî_t
;

142 
¢d_timî_quîy_›í
(
¢d_timî_quîy_t
 **
h™dÀ
, c⁄° *
«me
, 
mode
);

143 
¢d_timî_quîy_›í_lc⁄f
(
¢d_timî_quîy_t
 **
h™dÀ
, c⁄° *
«me
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

144 
¢d_timî_quîy_˛o£
(
¢d_timî_quîy_t
 *
h™dÀ
);

145 
¢d_timî_quîy_√xt_devi˚
(
¢d_timî_quîy_t
 *
h™dÀ
, 
¢d_timî_id_t
 *
tid
);

146 
¢d_timî_quîy_öfo
(
¢d_timî_quîy_t
 *
h™dÀ
, 
¢d_timî_göfo_t
 *
öfo
);

147 
¢d_timî_quîy_∑øms
(
¢d_timî_quîy_t
 *
h™dÀ
, 
¢d_timî_g∑øms_t
 *
∑øms
);

148 
¢d_timî_quîy_°©us
(
¢d_timî_quîy_t
 *
h™dÀ
, 
¢d_timî_g°©us_t
 *
°©us
);

150 
¢d_timî_›í
(
¢d_timî_t
 **
h™dÀ
, c⁄° *
«me
, 
mode
);

151 
¢d_timî_›í_lc⁄f
(
¢d_timî_t
 **
h™dÀ
, c⁄° *
«me
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

152 
¢d_timî_˛o£
(
¢d_timî_t
 *
h™dÀ
);

153 
¢d_async_add_timî_h™dÀr
(
¢d_async_h™dÀr_t
 **
h™dÀr
, 
¢d_timî_t
 *
timî
,

154 
¢d_async_ˇŒback_t
 
ˇŒback
, *
¥iv©e_d©a
);

155 
¢d_timî_t
 *
¢d_async_h™dÀr_gë_timî
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

156 
¢d_timî_pﬁl_des¸ùt‹s_cou¡
(
¢d_timî_t
 *
h™dÀ
);

157 
¢d_timî_pﬁl_des¸ùt‹s
(
¢d_timî_t
 *
h™dÀ
, 
pﬁlfd
 *
pfds
, 
•a˚
);

158 
¢d_timî_pﬁl_des¸ùt‹s_ªvíts
(
¢d_timî_t
 *
timî
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

159 
¢d_timî_öfo
(
¢d_timî_t
 *
h™dÀ
, 
¢d_timî_öfo_t
 *
timî
);

160 
¢d_timî_∑øms
(
¢d_timî_t
 *
h™dÀ
, 
¢d_timî_∑øms_t
 *
∑øms
);

161 
¢d_timî_°©us
(
¢d_timî_t
 *
h™dÀ
, 
¢d_timî_°©us_t
 *
°©us
);

162 
¢d_timî_°¨t
(
¢d_timî_t
 *
h™dÀ
);

163 
¢d_timî_°›
(
¢d_timî_t
 *
h™dÀ
);

164 
¢d_timî_c⁄töue
(
¢d_timî_t
 *
h™dÀ
);

165 
ssize_t
 
¢d_timî_ªad
(
¢d_timî_t
 *
h™dÀ
, *
buf„r
, 
size_t
 
size
);

167 
size_t
 
¢d_timî_id_sizeof
();

169 
	#¢d_timî_id_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_id
)

	)

170 
¢d_timî_id_mÆloc
(
¢d_timî_id_t
 **
±r
);

171 
¢d_timî_id_‰ì
(
¢d_timî_id_t
 *
obj
);

172 
¢d_timî_id_c›y
(
¢d_timî_id_t
 *
d°
, c⁄° snd_timî_id_à*
§c
);

174 
¢d_timî_id_£t_˛ass
(
¢d_timî_id_t
 *
id
, 
dev_˛ass
);

175 
¢d_timî_id_gë_˛ass
(
¢d_timî_id_t
 *
id
);

176 
¢d_timî_id_£t_s˛ass
(
¢d_timî_id_t
 *
id
, 
dev_s˛ass
);

177 
¢d_timî_id_gë_s˛ass
(
¢d_timî_id_t
 *
id
);

178 
¢d_timî_id_£t_ˇrd
(
¢d_timî_id_t
 *
id
, 
ˇrd
);

179 
¢d_timî_id_gë_ˇrd
(
¢d_timî_id_t
 *
id
);

180 
¢d_timî_id_£t_devi˚
(
¢d_timî_id_t
 *
id
, 
devi˚
);

181 
¢d_timî_id_gë_devi˚
(
¢d_timî_id_t
 *
id
);

182 
¢d_timî_id_£t_subdevi˚
(
¢d_timî_id_t
 *
id
, 
subdevi˚
);

183 
¢d_timî_id_gë_subdevi˚
(
¢d_timî_id_t
 *
id
);

185 
size_t
 
¢d_timî_göfo_sizeof
();

187 
	#¢d_timî_göfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_göfo
)

	)

188 
¢d_timî_göfo_mÆloc
(
¢d_timî_göfo_t
 **
±r
);

189 
¢d_timî_göfo_‰ì
(
¢d_timî_göfo_t
 *
obj
);

190 
¢d_timî_göfo_c›y
(
¢d_timî_göfo_t
 *
d°
, c⁄° snd_timî_göfo_à*
§c
);

192 
¢d_timî_göfo_£t_tid
(
¢d_timî_göfo_t
 *
obj
, 
¢d_timî_id_t
 *
tid
);

193 
¢d_timî_id_t
 *
¢d_timî_göfo_gë_tid
(
¢d_timî_göfo_t
 *
obj
);

194 
¢d_timî_göfo_gë_Êags
(
¢d_timî_göfo_t
 *
obj
);

195 
¢d_timî_göfo_gë_ˇrd
(
¢d_timî_göfo_t
 *
obj
);

196 *
¢d_timî_göfo_gë_id
(
¢d_timî_göfo_t
 *
obj
);

197 *
¢d_timî_göfo_gë_«me
(
¢d_timî_göfo_t
 *
obj
);

198 
¢d_timî_göfo_gë_ªsﬁuti⁄
(
¢d_timî_göfo_t
 *
obj
);

199 
¢d_timî_göfo_gë_ªsﬁuti⁄_mö
(
¢d_timî_göfo_t
 *
obj
);

200 
¢d_timî_göfo_gë_ªsﬁuti⁄_max
(
¢d_timî_göfo_t
 *
obj
);

201 
¢d_timî_göfo_gë_˛õ¡s
(
¢d_timî_göfo_t
 *
obj
);

203 
size_t
 
¢d_timî_öfo_sizeof
();

205 
	#¢d_timî_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_öfo
)

	)

206 
¢d_timî_öfo_mÆloc
(
¢d_timî_öfo_t
 **
±r
);

207 
¢d_timî_öfo_‰ì
(
¢d_timî_öfo_t
 *
obj
);

208 
¢d_timî_öfo_c›y
(
¢d_timî_öfo_t
 *
d°
, c⁄° snd_timî_öfo_à*
§c
);

210 
¢d_timî_öfo_is_¶ave
(
¢d_timî_öfo_t
 * 
öfo
);

211 
¢d_timî_öfo_gë_ˇrd
(
¢d_timî_öfo_t
 * 
öfo
);

212 c⁄° *
¢d_timî_öfo_gë_id
(
¢d_timî_öfo_t
 * 
öfo
);

213 c⁄° *
¢d_timî_öfo_gë_«me
(
¢d_timî_öfo_t
 * 
öfo
);

214 
¢d_timî_öfo_gë_ªsﬁuti⁄
(
¢d_timî_öfo_t
 * 
öfo
);

216 
size_t
 
¢d_timî_∑øms_sizeof
();

218 
	#¢d_timî_∑øms_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_∑øms
)

	)

219 
¢d_timî_∑øms_mÆloc
(
¢d_timî_∑øms_t
 **
±r
);

220 
¢d_timî_∑øms_‰ì
(
¢d_timî_∑øms_t
 *
obj
);

221 
¢d_timî_∑øms_c›y
(
¢d_timî_∑øms_t
 *
d°
, c⁄° snd_timî_∑øms_à*
§c
);

223 
¢d_timî_∑øms_£t_auto_°¨t
(
¢d_timî_∑øms_t
 * 
∑øms
, 
auto_°¨t
);

224 
¢d_timî_∑øms_gë_auto_°¨t
(
¢d_timî_∑øms_t
 * 
∑øms
);

225 
¢d_timî_∑øms_£t_ex˛usive
(
¢d_timî_∑øms_t
 * 
∑øms
, 
ex˛usive
);

226 
¢d_timî_∑øms_gë_ex˛usive
(
¢d_timî_∑øms_t
 * 
∑øms
);

227 
¢d_timî_∑øms_£t_óæy_evít
(
¢d_timî_∑øms_t
 * 
∑øms
, 
óæy_evít
);

228 
¢d_timî_∑øms_gë_óæy_evít
(
¢d_timî_∑øms_t
 * 
∑øms
);

229 
¢d_timî_∑øms_£t_ticks
(
¢d_timî_∑øms_t
 * 
∑øms
, 
ticks
);

230 
¢d_timî_∑øms_gë_ticks
(
¢d_timî_∑øms_t
 * 
∑øms
);

231 
¢d_timî_∑øms_£t_queue_size
(
¢d_timî_∑øms_t
 * 
∑øms
, 
queue_size
);

232 
¢d_timî_∑øms_gë_queue_size
(
¢d_timî_∑øms_t
 * 
∑øms
);

233 
¢d_timî_∑øms_£t_fûãr
(
¢d_timî_∑øms_t
 * 
∑øms
, 
fûãr
);

234 
¢d_timî_∑øms_gë_fûãr
(
¢d_timî_∑øms_t
 * 
∑øms
);

236 
size_t
 
¢d_timî_°©us_sizeof
();

238 
	#¢d_timî_°©us_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_°©us
)

	)

239 
¢d_timî_°©us_mÆloc
(
¢d_timî_°©us_t
 **
±r
);

240 
¢d_timî_°©us_‰ì
(
¢d_timî_°©us_t
 *
obj
);

241 
¢d_timî_°©us_c›y
(
¢d_timî_°©us_t
 *
d°
, c⁄° snd_timî_°©us_à*
§c
);

243 
¢d_htime°amp_t
 
¢d_timî_°©us_gë_time°amp
(
¢d_timî_°©us_t
 * 
°©us
);

244 
¢d_timî_°©us_gë_ªsﬁuti⁄
(
¢d_timî_°©us_t
 * 
°©us
);

245 
¢d_timî_°©us_gë_lo°
(
¢d_timî_°©us_t
 * 
°©us
);

246 
¢d_timî_°©us_gë_ovîrun
(
¢d_timî_°©us_t
 * 
°©us
);

247 
¢d_timî_°©us_gë_queue
(
¢d_timî_°©us_t
 * 
°©us
);

250 
¢d_timî_öfo_gë_ticks
(
¢d_timî_öfo_t
 * 
öfo
);

254 #ifde‡
__˝lu•lus


	@/usr/include/alsa/version.h

5 
	#SND_LIB_MAJOR
 1

	)

6 
	#SND_LIB_MINOR
 0

	)

7 
	#SND_LIB_SUBMINOR
 26

	)

8 
	#SND_LIB_EXTRAVER
 1000000

	)

10 
	#SND_LIB_VERSION
 ((
SND_LIB_MAJOR
<<16)|\

11 (
SND_LIB_MINOR
<<8)|\

12 
SND_LIB_SUBMINOR
)

	)

14 
	#SND_LIB_VERSION_STR
 "1.0.26.34.g49dde"

	)

	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

70 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

75 
__löe
,

76 
__c⁄°
 *
__fun˘i⁄
)

77 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

82 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

86 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/asterisk/astmm.h

23 #i‚de‡
_ASTERISK_ASTMM_H


24 
	#_ASTERISK_ASTMM_H


	)

26 
	#__AST_DEBUG_MALLOC


	)

28 
	~"a°îisk.h
"

31 
	~<sys/ty≥s.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<°dio.h
>

35 
	~<°d¨g.h
>

38 #unde‡
mÆloc


39 #unde‡
ˇŒoc


40 #unde‡
ªÆloc


41 #unde‡
°rdup


42 #unde‡
°∫dup


43 #unde‡
a•rötf


44 #unde‡
va•rötf


46 *
__a°_ˇŒoc
(
size_t
 
nmemb
, size_à
size
, c⁄° *
fûe
, 
löío
, c⁄° *
func
);

47 *
__a°_ˇŒoc_ˇche
(
size_t
 
nmemb
, size_à
size
, c⁄° *
fûe
, 
löío
, c⁄° *
func
);

48 *
__a°_mÆloc
(
size_t
 
size
, c⁄° *
fûe
, 
löío
, c⁄° *
func
);

49 
__a°_‰ì
(*
±r
, c⁄° *
fûe
, 
löío
, c⁄° *
func
);

50 *
__a°_ªÆloc
(*
±r
, 
size_t
 
size
, c⁄° *
fûe
, 
löío
, c⁄° *
func
);

51 *
__a°_°rdup
(c⁄° *
s
, c⁄° *
fûe
, 
löío
, c⁄° *
func
);

52 *
__a°_°∫dup
(c⁄° *
s
, 
size_t
 
n
, c⁄° *
fûe
, 
löío
, c⁄° *
func
);

53 
__a°_a•rötf
(c⁄° *
fûe
, 
löío
, c⁄° *
func
, **
°Ω
, c⁄° *
f‹m©
, ...);

54 
__a°_va•rötf
(**
°Ω
, c⁄° *
f‹m©
, 
va_li°
 
≠
, c⁄° *
fûe
, 
löío
, c⁄° *
func
);

56 
__a°_mm_öô
();

60 
	#ˇŒoc
(
a
,
b
) \

61 
	`__a°_ˇŒoc
(
a
,
b
,
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

63 
	#a°_ˇŒoc_ˇche
(
a
,
b
) \

64 
	`__a°_ˇŒoc_ˇche
(
a
,
b
,
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

66 
	#mÆloc
(
a
) \

67 
	`__a°_mÆloc
(
a
,
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

69 
	#‰ì
(
a
) \

70 
	`__a°_‰ì
(
a
,
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

72 
	#ªÆloc
(
a
,
b
) \

73 
	`__a°_ªÆloc
(
a
,
b
,
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

75 
	#°rdup
(
a
) \

76 
	`__a°_°rdup
(
a
,
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

78 
	#°∫dup
(
a
,
b
) \

79 
	`__a°_°∫dup
(
a
,
b
,
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

81 
	#a•rötf
(
a
, 
b
, 
c
...) \

82 
	`__a°_a•rötf
(
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, 
a
, 
b
, 
c
)

	)

84 
	#va•rötf
(
a
,
b
,
c
) \

85 
	`__a°_va•rötf
(
a
,
b
,
c
,
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

	@/usr/include/asterisk/autoconfig.h

4 #i‚de‡
ASTERISK_AUTOCONFIG_H


5 
	#ASTERISK_AUTOCONFIG_H


	)

7 
	~"a°îisk/buûd›ts.h
"

23 
	#HAVE_ALLOCA
 1

	)

27 
	#HAVE_ALLOCA_H
 1

	)

30 
	#HAVE_ALSA
 1

	)

33 
	#HAVE_ARPA_INET_H
 1

	)

36 
	#HAVE_ARPA_NAMESER_H
 1

	)

39 
	#HAVE_ASPRINTF
 1

	)

42 
	#HAVE_ATEXIT
 1

	)

49 
	#HAVE_ATTRIBUTE_c⁄°
 1

	)

52 
	#HAVE_ATTRIBUTE_dïªˇãd
 1

	)

55 
	#HAVE_ATTRIBUTE_mÆloc
 1

	)

58 
	#HAVE_ATTRIBUTE_puª
 1

	)

61 
	#HAVE_ATTRIBUTE_unu£d
 1

	)

64 
	#HAVE_BZERO
 1

	)

70 
	#HAVE_CHOWN
 1

	)

73 
	#HAVE_CURL
 1

	)

76 
	#HAVE_CURSES
 1

	)

86 
	#HAVE_DIRENT_H
 1

	)

92 
	#HAVE_DUP2
 1

	)

95 
	#HAVE_ENDPWENT
 1

	)

98 
	#HAVE_FCNTL_H
 1

	)

104 
	#HAVE_FORK
 1

	)

110 
	#HAVE_FSEEKO
 1

	)

113 
	#HAVE_FTRUNCATE
 1

	)

116 
	#HAVE_GCC_ATOMICS
 1

	)

119 
	#HAVE_GETCWD
 1

	)

122 
	#HAVE_GETHOSTBYNAME
 1

	)

128 
	#HAVE_GETHOSTBYNAME_R_6
 1

	)

131 
	#HAVE_GETHOSTNAME
 1

	)

134 
	#HAVE_GETIFADDRS
 1

	)

137 
	#HAVE_GETIFADDRS_VERSION


	)

140 
	#HAVE_GETLOADAVG
 1

	)

143 
	#HAVE_GETPAGESIZE
 1

	)

146 
	#HAVE_GETTIMEOFDAY
 1

	)

158 
	#HAVE_GSM_HEADER
 1

	)

164 
	#HAVE_GTK2
 1

	)

177 
	#HAVE_INET_NTOA
 1

	)

180 
	#HAVE_INTTYPES_H
 1

	)

183 
	#HAVE_IP_MTU_DISCOVER
 1

	)

186 
	#HAVE_ISASCII
 1

	)

192 
	#HAVE_LIBINTL_H
 1

	)

198 
	#HAVE_LIMITS_H
 1

	)

204 
	#HAVE_LOCALE_H
 1

	)

207 
	#HAVE_LOCALTIME_R
 1

	)

213 
	#HAVE_MALLOC_H
 1

	)

216 
	#HAVE_MEMCHR
 1

	)

219 
	#HAVE_MEMMOVE
 1

	)

222 
	#HAVE_MEMORY_H
 1

	)

225 
	#HAVE_MEMSET
 1

	)

231 
	#HAVE_MKDIR
 1

	)

234 
	#HAVE_MMAP
 1

	)

237 
	#HAVE_MUNMAP
 1

	)

243 
	#HAVE_NCURSES
 1

	)

249 
	#HAVE_NETDB_H
 1

	)

252 
	#HAVE_NETINET_IN_H
 1

	)

258 
	#HAVE_NEWT
 1

	)

267 
	#HAVE_OPENSSL
 1

	)

273 
	#HAVE_OSS
 1

	)

288 
	#HAVE_PRI
 1

	)

291 
	#HAVE_PRI_INBANDDISCONNECT
 1

	)

294 
	#HAVE_PRI_VERSION
 1

	)

297 
	#HAVE_PTHREAD
 1

	)

300 
	#HAVE_PTHREAD_RWLOCK_INITIALIZER
 1

	)

303 
	#HAVE_PTHREAD_RWLOCK_PREFER_WRITER_NP
 1

	)

306 
	#HAVE_PTRDIFF_T
 1

	)

309 
	#HAVE_PUTENV
 1

	)

318 
	#HAVE_REGCOMP
 1

	)

324 
	#HAVE_RES_NINIT
 1

	)

327 
	#HAVE_RE_COMP
 1

	)

334 
	#HAVE_RTLD_NOLOAD
 1

	)

340 
	#HAVE_SELECT
 1

	)

343 
	#HAVE_SETENV
 1

	)

346 
	#HAVE_SOCKET
 1

	)

371 
	#HAVE_STDBOOL_H
 1

	)

374 
	#HAVE_STDDEF_H
 1

	)

377 
	#HAVE_STDINT_H
 1

	)

380 
	#HAVE_STDLIB_H
 1

	)

383 
	#HAVE_STRCASECMP
 1

	)

386 
	#HAVE_STRCASESTR
 1

	)

389 
	#HAVE_STRCHR
 1

	)

393 
	#HAVE_STRCOLL
 1

	)

396 
	#HAVE_STRCSPN
 1

	)

399 
	#HAVE_STRDUP
 1

	)

402 
	#HAVE_STRERROR
 1

	)

405 
	#HAVE_STRFTIME
 1

	)

408 
	#HAVE_STRINGS_H
 1

	)

411 
	#HAVE_STRING_H
 1

	)

420 
	#HAVE_STRNCASECMP
 1

	)

423 
	#HAVE_STRNDUP
 1

	)

426 
	#HAVE_STRNLEN
 1

	)

429 
	#HAVE_STRRCHR
 1

	)

432 
	#HAVE_STRSEP
 1

	)

435 
	#HAVE_STRSPN
 1

	)

438 
	#HAVE_STRSTR
 1

	)

441 
	#HAVE_STRTOL
 1

	)

444 
	#HAVE_STRTOQ
 1

	)

447 
	#HAVE_STRUCT_STAT_ST_BLKSIZE
 1

	)

453 
	#HAVE_SYSLOG_H
 1

	)

460 
	#HAVE_SYS_FILE_H
 1

	)

463 
	#HAVE_SYS_IOCTL_H
 1

	)

470 
	#HAVE_SYS_PARAM_H
 1

	)

473 
	#HAVE_SYS_SELECT_H
 1

	)

476 
	#HAVE_SYS_SOCKET_H
 1

	)

479 
	#HAVE_SYS_STAT_H
 1

	)

482 
	#HAVE_SYS_TIME_H
 1

	)

485 
	#HAVE_SYS_TYPES_H
 1

	)

488 
	#HAVE_SYS_WAIT_H
 1

	)

491 
	#HAVE_TERMCAP
 1

	)

494 
	#HAVE_TERMIOS_H
 1

	)

497 
	#HAVE_TINFO
 1

	)

500 
	#HAVE_TONEZONE
 1

	)

503 
	#HAVE_UNISTD_H
 1

	)

509 
	#HAVE_UNSETENV
 1

	)

512 
	#HAVE_USB
 1

	)

515 
	#HAVE_UTIME
 1

	)

518 
	#HAVE_UTIME_H
 1

	)

521 
	#HAVE_UTIME_NULL
 1

	)

524 
	#HAVE_VASPRINTF
 1

	)

527 
	#HAVE_VFORK
 1

	)

539 
	#HAVE_VPRINTF
 1

	)

542 
	#HAVE_WORKING_FORK
 1

	)

545 
	#HAVE_WORKING_VFORK
 1

	)

548 
	#HAVE_ZAPTEL
 1

	)

551 
	#HAVE_ZAPTEL_CHANALARMS
 1

	)

554 
	#HAVE_ZLIB
 1

	)

557 
	#HAVE__BOOL
 1

	)

561 
	#LSTAT_FOLLOWS_SLASHED_SYMLINK
 1

	)

567 
	#PACKAGE_BUGREPORT
 "www.a°îisk.‹g"

	)

570 
	#PACKAGE_NAME
 "a°îisk"

	)

573 
	#PACKAGE_STRING
 "a°îisk 1.4"

	)

576 
	#PACKAGE_TARNAME
 "a°îisk"

	)

579 
	#PACKAGE_VERSION
 "1.4"

	)

582 
	#PROTOTYPES
 1

	)

589 
	#RETSIGTYPE
 

	)

592 
	#SELECT_TYPE_ARG1
 

	)

595 
	#SELECT_TYPE_ARG234
 (
fd_£t
 *)

	)

598 
	#SELECT_TYPE_ARG5
 (
timevÆ
 *)

	)

606 
	#SIZEOF_INT
 4

	)

617 
	#STDC_HEADERS
 1

	)

620 
	#TIME_WITH_SYS_TIME
 1

	)

628 #i‚de‡
_ALL_SOURCE


636 #i‚de‡
_GNU_SOURCE


637 
	#_GNU_SOURCE
 1

	)

657 #i‚de‡
__EXTENSIONS__


658 
	#__EXTENSIONS__
 1

	)

660 #i‚de‡
_POSIX_PTHREAD_SEMANTICS


661 
	#_POSIX_PTHREAD_SEMANTICS
 1

	)

663 #i‚de‡
_TANDEM_SOURCE


664 
	#_TANDEM_SOURCE
 1

	)

668 
	#__PROTOTYPES
 1

	)

678 #i‚de‡
__˝lu•lus


	@/usr/include/asterisk/cdr.h

23 #i‚de‡
_ASTERISK_CDR_H


24 
	#_ASTERISK_CDR_H


	)

26 
	~<sys/time.h
>

29 
	#AST_CDR_FLAG_KEEP_VARS
 (1 << 0)

	)

30 
	#AST_CDR_FLAG_POSTED
 (1 << 1)

	)

31 
	#AST_CDR_FLAG_LOCKED
 (1 << 2)

	)

32 
	#AST_CDR_FLAG_CHILD
 (1 << 3)

	)

33 
	#AST_CDR_FLAG_POST_DISABLED
 (1 << 4)

	)

34 
	#AST_CDR_FLAG_BRIDGED
 (1 << 5)

	)

35 
	#AST_CDR_FLAG_MAIN
 (1 << 6)

	)

36 
	#AST_CDR_FLAG_ENABLE
 (1 << 7)

	)

37 
	#AST_CDR_FLAG_ANSLOCKED
 (1 << 8)

	)

38 
	#AST_CDR_FLAG_DONT_TOUCH
 (1 << 9)

	)

39 
	#AST_CDR_FLAG_DIALED
 (1 << 10)

	)

42 
	#AST_CDR_NULL
 0

	)

43 
	#AST_CDR_FAILED
 (1 << 0)

	)

44 
	#AST_CDR_BUSY
 (1 << 1)

	)

45 
	#AST_CDR_NOANSWER
 (1 << 2)

	)

46 
	#AST_CDR_ANSWERED
 (1 << 3)

	)

49 
	#AST_CDR_OMIT
 (1)

	)

50 
	#AST_CDR_BILLING
 (2)

	)

51 
	#AST_CDR_DOCUMENTATION
 (3)

	)

53 
	#AST_MAX_USER_FIELD
 256

	)

54 
	#AST_MAX_ACCOUNT_CODE
 20

	)

57 
	~"a°îisk/ch™√l.h
"

58 
	~"a°îisk/utûs.h
"

61 
	sa°_cdr
 {

63 
	m˛id
[
AST_MAX_EXTENSION
];

65 
	m§c
[
AST_MAX_EXTENSION
];

67 
	md°
[
AST_MAX_EXTENSION
];

69 
	mdc⁄ãxt
[
AST_MAX_EXTENSION
];

71 
	mch™√l
[
AST_MAX_EXTENSION
];

73 
	md°ch™√l
[
AST_MAX_EXTENSION
];

75 
	mœ°≠p
[
AST_MAX_EXTENSION
];

77 
	mœ°d©a
[
AST_MAX_EXTENSION
];

79 
timevÆ
 
	m°¨t
;

81 
timevÆ
 
	m™swî
;

83 
timevÆ
 
	míd
;

85 
	mduøti⁄
;

87 
	mbûl£c
;

89 
	mdi•osôi⁄
;

91 
	mamaÊags
;

93 
	maccou¡code
[
AST_MAX_ACCOUNT_CODE
];

95 
	mÊags
;

97 
	muniqueid
[32];

99 
	mu£rfõld
[
AST_MAX_USER_FIELD
];

102 
v¨shód
 
	mv¨shód
;

104 
a°_cdr
 *
	m√xt
;

107 
a°_cdr_is£t_u«nswîed
();

108 
a°_cdr_gëv¨
(
a°_cdr
 *
cdr
, c⁄° *
«me
, **
ªt
, *
w‹k•a˚
, 
w‹k•a˚Àn
, 
ªcur
, 
øw
);

109 
a°_cdr_£tv¨
(
a°_cdr
 *
cdr
, c⁄° *
«me
, c⁄° *
vÆue
, 
ªcur
);

110 
a°_cdr_£rülize_v¨übÀs
(
a°_cdr
 *
cdr
, *
buf
, 
size_t
 
size
, 
dñim
, 
£p
, 
ªcur
);

111 
a°_cdr_‰ì_v¨s
(
a°_cdr
 *
cdr
, 
ªcur
);

112 
a°_cdr_c›y_v¨s
(
a°_cdr
 *
to_cdr
, a°_cd∏*
‰om_cdr
);

114 (*
	ta°_cdrbe
)(
	ta°_cdr
 *
	tcdr
);

119 
a°_cdr
 *
	`a°_cdr_Æloc
();

124 
a°_cdr
 *
	`a°_cdr_dup
(a°_cd∏*
cdr
);

130 
	`a°_cdr_‰ì
(
a°_cdr
 *
cdr
);

136 
	`a°_cdr_disˇrd
(
a°_cdr
 *
cdr
);

144 
	`a°_cdr_öô
(
a°_cdr
 *
cdr
, 
a°_ch™√l
 *
ch™
);

153 
	`a°_cdr_£tcid
(
a°_cdr
 *
cdr
, 
a°_ch™√l
 *
ch™
);

163 
	`a°_cdr_ªgi°î
(c⁄° *
«me
, c⁄° *
desc
, 
a°_cdrbe
 
be
);

170 
	`a°_cdr_uƒegi°î
(c⁄° *
«me
);

178 
	`a°_cdr_°¨t
(
a°_cdr
 *
cdr
);

186 
	`a°_cdr_™swî
(
a°_cdr
 *
cdr
);

195 
	`a°_cdr_nﬂnswî
(
a°_cdr
 *
cdr
);

205 
	`a°_cdr_busy
(
a°_cdr
 *
cdr
);

215 
	`a°_cdr_Áûed
(
a°_cdr
 *
cdr
);

223 
	`a°_cdr_di•osôi⁄
(
a°_cdr
 *
cdr
, 
ˇu£
);

231 
	`a°_cdr_íd
(
a°_cdr
 *
cdr
);

240 
	`a°_cdr_dëach
(
a°_cdr
 *
cdr
);

248 
	`a°_cdr_submô_b©ch
(
shutdown
);

257 
	`a°_cdr_£tde°ch™
(
a°_cdr
 *
cdr
, c⁄° *
ch™
);

267 
	`a°_cdr_£èµ
(
a°_cdr
 *
cdr
, *
≠p
, *
d©a
);

275 
	`a°_cdr_amaÊags2öt
(c⁄° *
Êag
);

283 *
	`a°_cdr_di•2°r
(
di•osôi⁄
);

291 
	`a°_cdr_ª£t
(
a°_cdr
 *
cdr
, 
a°_Êags
 *
Êags
);

299 
	`a°_cdr_•ecülized_ª£t
(
a°_cdr
 *
cdr
, 
a°_Êags
 *
Êags
);

307 *
	`a°_cdr_Êags2°r
(
Êags
);

313 
	`a°_cdr_mîge
(
a°_cdr
 *
to
, a°_cd∏*
‰om
);

315 
	`a°_cdr_£èccou¡
(
a°_ch™√l
 *
ch™
, c⁄° *
accou¡
);

316 
	`a°_cdr_£èmaÊags
(
a°_ch™√l
 *
ch™
, c⁄° *
amaÊags
);

319 
	`a°_cdr_£tu£rfõld
(
a°_ch™√l
 *
ch™
, c⁄° *
u£rfõld
);

320 
	`a°_cdr_≠≥ndu£rfõld
(
a°_ch™√l
 *
ch™
, c⁄° *
u£rfõld
);

324 
	`a°_cdr_upd©e
(
a°_ch™√l
 *
ch™
);

327 
a°_deÁu…_amaÊags
;

329 
a°_deÁu…_accou¡code
[
AST_MAX_ACCOUNT_CODE
];

331 
a°_cdr
 *
	`a°_cdr_≠≥nd
(a°_cd∏*
cdr
, a°_cd∏*
√wcdr
);

334 
	`a°_cdr_ígöe_ªlﬂd
();

337 
	`a°_cdr_ígöe_öô
();

340 
	`a°_cdr_ígöe_ãrm
();

	@/usr/include/asterisk/chanvars.h

23 #i‚de‡
_ASTERISK_CHANVARS_H


24 
	#_ASTERISK_CHANVARS_H


	)

26 
	~"a°îisk/lökedli°s.h
"

28 
	sa°_v¨_t
 {

29 
AST_LIST_ENTRY
(
a°_v¨_t
Ë
	míåõs
;

30 *
	mvÆue
;

31 
	m«me
[0];

34 
AST_LIST_HEAD_NOLOCK
(
v¨shód
, 
a°_v¨_t
);

36 
a°_v¨_t
 *
a°_v¨_assign
(c⁄° *
«me
, c⁄° *
vÆue
);

37 
a°_v¨_dñëe
(
a°_v¨_t
 *
v¨
);

38 c⁄° *
a°_v¨_«me
(c⁄° 
a°_v¨_t
 *
v¨
);

39 c⁄° *
a°_v¨_fuŒ_«me
(c⁄° 
a°_v¨_t
 *
v¨
);

40 c⁄° *
a°_v¨_vÆue
(c⁄° 
a°_v¨_t
 *
v¨
);

	@/usr/include/asterisk/compat.h

16 #i‚de‡
_COMPAT_H


17 
	#_COMPAT_H


	)

19 
	~"a°îisk/autoc⁄fig.h
"

20 
	~<öây≥s.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<°d¨g.h
>

24 #i‡!
deföed
(
HAVE_ASPRINTF
Ë&& !deföed(
__AST_DEBUG_MALLOC
)

25 
a•rötf
(**
°r
, c⁄° *
fmt
, ...);

28 #i‚de‡
HAVE_GETLOADAVG


29 
gëlﬂdavg
(*
li°
, 
√Àm
);

32 #i‚de‡
HAVE_SETENV


33 
£ãnv
(c⁄° *
«me
, c⁄° *
vÆue
, 
ovîwrôe
);

36 #i‚de‡
HAVE_STRCASESTR


37 *
°rˇ£°r
(const *, const *);

40 #i‡!
deföed
(
HAVE_STRNDUP
Ë&& !deföed(
__AST_DEBUG_MALLOC
)

41 *
°∫dup
(c⁄° *, 
size_t
);

44 #i‚de‡
HAVE_STRNLEN


45 
size_t
 
°∫Àn
(const *, size_t);

48 #i‚de‡
HAVE_STRSEP


49 * 
°r£p
(** 
°r
, c⁄° * 
dñims
);

52 #i‚de‡
HAVE_STRTOQ


53 
uöt64_t
 
°πoq
(c⁄° *
≈å
, **
íd±r
, 
ba£
);

56 #i‚de‡
HAVE_UNSETENV


57 
un£ãnv
(c⁄° *
«me
);

60 #i‡!
deföed
(
HAVE_VASPRINTF
Ë&& !deföed(
__AST_DEBUG_MALLOC
)

61 
va•rötf
(**
°Ω
, c⁄° *
fmt
, 
va_li°
 
≠
);

64 #i‚de‡
HAVE_STRLCAT


65 
size_t
 
°æˇt
(*
d°
, c⁄° *
§c
, size_à
siz
);

68 #i‚de‡
HAVE_STRLCPY


69 
size_t
 
°æ˝y
(*
d°
, c⁄° *
§c
, size_à
siz
);

72 #ifde‡
SOLARIS


73 
	#__BEGIN_DECLS


	)

74 
	#__END_DECLS


	)

76 #i‚de‡
__P


77 
	#__P
(
p
Ë
	)
p

80 
	~<Æloˇ.h
>

81 
	~<°rögs.h
>

82 
	~<°rög.h
>

83 
	~<±hªad.h
>

84 
	~<sys/°©.h
>

85 
	~<sig«l.h
>

86 
	~<√töë/ö.h
>

87 
	~<sys/lﬂdavg.h
>

88 
	~<d©/d©_∂©f‹m_•ecific.h
>

90 #i‚de‡
BYTE_ORDER


91 
	#LITTLE_ENDIAN
 1234

	)

92 
	#BIG_ENDIAN
 4321

	)

94 #ifde‡
__•¨c__


95 
	#BYTE_ORDER
 
BIG_ENDIAN


	)

97 
	#BYTE_ORDER
 
LITTLE_ENDIAN


	)

101 #i‚de‡
__BYTE_ORDER


102 
	#__LITTLE_ENDIAN
 
LITTLE_ENDIAN


	)

103 
	#__BIG_ENDIAN
 
BIG_ENDIAN


	)

104 
	#__BYTE_ORDER
 
BYTE_ORDER


	)

107 #i‚de‡
__BIT_TYPES_DEFINED__


108 
	#__BIT_TYPES_DEFINED__


	)

109 
	tu_öt8_t
;

110 
	tu_öt16_t
;

111 
	tu_öt32_t
;

112 
	tuöt
;

117 #ifde‡
__CYGWIN__


118 
	#_WIN32_WINNT
 0x0500

	)

119 #i‚de‡
INET_ADDRSTRLEN


120 
	#INET_ADDRSTRLEN
 16

	)

122 #i‚de‡
INET6_ADDRSTRLEN


123 
	#INET6_ADDRSTRLEN
 46

	)

127 #ifde‡
__CYGWIN__


128 
	tuöt64_t
;

	@/usr/include/asterisk/compiler.h

23 #i‚de‡
_ASTERISK_COMPILER_H


24 
	#_ASTERISK_COMPILER_H


	)

26 #ifde‡
HAVE_ATTRIBUTE_Æways_ölöe


27 
	#f‹˚_ölöe
 
	`__©åibuã__
((
Æways_ölöe
)Ë
ölöe


	)

29 
	#f‹˚_ölöe
 
ölöe


	)

32 #ifde‡
HAVE_ATTRIBUTE_puª


33 
	#©åibuã_puª
 
	`__©åibuã__
((
puª
))

	)

35 
	#©åibuã_puª


	)

38 #ifde‡
HAVE_ATTRIBUTE_c⁄°


39 
	#©åibuã_c⁄°
 
	`__©åibuã__
((c⁄°))

	)

41 
	#©åibuã_c⁄°


	)

44 #ifde‡
HAVE_ATTRIBUTE_unu£d


45 
	#©åibuã_unu£d
 
	`__©åibuã__
((
unu£d
))

	)

47 
	#©åibuã_unu£d


	)

50 #ifde‡
HAVE_ATTRIBUTE_mÆloc


51 
	#©åibuã_mÆloc
 
	`__©åibuã__
((
mÆloc
))

	)

53 
	#©åibuã_mÆloc


	)

56 #ifde‡
HAVE_ATTRIBUTE_dïªˇãd


57 
	#©åibuã_dïªˇãd
 
	`__©åibuã__
((
dïªˇãd
))

	)

59 
	#©åibuã_dïªˇãd


	)

	@/usr/include/asterisk/inline_api.h

19 #i‚de‡
__ASTERISK_INLINEAPI_H


20 
	#__ASTERISK_INLINEAPI_H


	)

46 #i‡!
deföed
(
LOW_MEMORY
)

48 #i‡!
deföed
(
AST_API_MODULE
)

49 
	#AST_INLINE_API
(
hdr
, 
body
Ëhdr; 
ölöe
 hd∏
	)
body

51 
	#AST_INLINE_API
(
hdr
, 
body
Ëhdr; hd∏
	)
body

56 #i‡!
deföed
(
AST_API_MODULE
)

57 
	#AST_INLINE_API
(
hdr
, 
body
Ëhdr;

	)

59 
	#AST_INLINE_API
(
hdr
, 
body
Ëhdr; hd∏
	)
body

64 #unde‡
AST_API_MODULE


	@/usr/include/asterisk/linkedlists.h

20 #i‚de‡
ASTERISK_LINKEDLISTS_H


21 
	#ASTERISK_LINKEDLISTS_H


	)

23 
	~"a°îisk/lock.h
"

38 
	#AST_LIST_LOCK
(
hód
) \

39 
	`a°_muãx_lock
(&(
hód
)->
lock
)

	)

49 
	#AST_RWLIST_WRLOCK
(
hód
) \

50 
	`a°_rwlock_wæock
(&(
hód
)->
lock
)

	)

60 
	#AST_RWLIST_RDLOCK
(
hód
) \

61 
	`a°_rwlock_rdlock
(&(
hód
)->
lock
)

	)

71 
	#AST_LIST_TRYLOCK
(
hód
) \

72 
	`a°_muãx_åylock
(&(
hód
)->
lock
)

	)

82 
	#AST_RWLIST_TRYWRLOCK
(
hód
) \

83 
	`a°_rwlock_åywæock
(&(
hód
)->
lock
)

	)

93 
	#AST_RWLIST_TRYRDLOCK
(
hód
) \

94 
	`a°_rwlock_åyrdlock
(&(
hód
)->
lock
)

	)

104 
	#AST_LIST_UNLOCK
(
hód
) \

105 
	`a°_muãx_u∆ock
(&(
hód
)->
lock
)

	)

115 
	#AST_RWLIST_UNLOCK
(
hód
) \

116 
	`a°_rwlock_u∆ock
(&(
hód
)->
lock
)

	)

137 
	#AST_LIST_HEAD
(
«me
, 
ty≥
) \

138 
	s«me
 { \

139 
ty≥
 *
fú°
; \

140 
ty≥
 *
œ°
; \

141 
a°_muãx_t
 
lock
; \

142 }

	)

163 
	#AST_RWLIST_HEAD
(
«me
, 
ty≥
) \

164 
	s«me
 { \

165 
ty≥
 *
fú°
; \

166 
ty≥
 *
œ°
; \

167 
a°_rwlock_t
 
lock
; \

168 }

	)

189 
	#AST_LIST_HEAD_NOLOCK
(
«me
, 
ty≥
) \

190 
	s«me
 { \

191 
ty≥
 *
fú°
; \

192 
ty≥
 *
œ°
; \

193 }

	)

198 
	#AST_LIST_HEAD_INIT_VALUE
 { \

199 .
fú°
 = 
NULL
, \

200 .
œ°
 = 
NULL
, \

201 .
lock
 = 
AST_MUTEX_INIT_VALUE
, \

202 }

	)

207 
	#AST_RWLIST_HEAD_INIT_VALUE
 { \

208 .
fú°
 = 
NULL
, \

209 .
œ°
 = 
NULL
, \

210 .
lock
 = 
AST_RWLOCK_INIT_VALUE
, \

211 }

	)

216 
	#AST_LIST_HEAD_NOLOCK_INIT_VALUE
 { \

217 .
fú°
 = 
NULL
, \

218 .
œ°
 = 
NULL
, \

219 }

	)

238 #i‡
deföed
(
AST_MUTEX_INIT_W_CONSTRUCTORS
)

239 
	#AST_LIST_HEAD_STATIC
(
«me
, 
ty≥
) \

240 
	s«me
 { \

241 
ty≥
 *
fú°
; \

242 
ty≥
 *
œ°
; \

243 
a°_muãx_t
 
lock
; \

244 } 
«me
; \

245 
	`__©åibuã__
 ((
c⁄°ru˘‹
)Ë
öô_
##
	`«me
() \

247 
	`AST_LIST_HEAD_INIT
(&
«me
); \

249 
	`__©åibuã__
 ((
de°ru˘‹
)Ë
föi_
##
	`«me
() \

251 
	`AST_LIST_HEAD_DESTROY
(&
«me
); \

253 
__dummy_
##
«me


	)

255 
	#AST_LIST_HEAD_STATIC
(
«me
, 
ty≥
) \

256 
	s«me
 { \

257 
ty≥
 *
fú°
; \

258 
ty≥
 *
œ°
; \

259 
a°_muãx_t
 
lock
; \

260 } 
«me
 = 
AST_LIST_HEAD_INIT_VALUE


	)

280 #i‚de‡
AST_RWLOCK_INIT_VALUE


281 
	#AST_RWLIST_HEAD_STATIC
(
«me
, 
ty≥
) \

282 
	s«me
 { \

283 
ty≥
 *
fú°
; \

284 
ty≥
 *
œ°
; \

285 
a°_rwlock_t
 
lock
; \

286 } 
«me
; \

287 
	`__©åibuã__
 ((
c⁄°ru˘‹
)Ë
öô_
##
	`«me
() \

289 
	`AST_RWLIST_HEAD_INIT
(&
«me
); \

291 
	`__©åibuã__
 ((
de°ru˘‹
)Ë
föi_
##
	`«me
() \

293 
	`AST_RWLIST_HEAD_DESTROY
(&
«me
); \

295 
__dummy_
##
«me


	)

297 
	#AST_RWLIST_HEAD_STATIC
(
«me
, 
ty≥
) \

298 
	s«me
 { \

299 
ty≥
 *
fú°
; \

300 
ty≥
 *
œ°
; \

301 
a°_rwlock_t
 
lock
; \

302 } 
«me
 = 
AST_RWLIST_HEAD_INIT_VALUE


	)

310 
	#AST_LIST_HEAD_NOLOCK_STATIC
(
«me
, 
ty≥
) \

311 
	s«me
 { \

312 
ty≥
 *
fú°
; \

313 
ty≥
 *
œ°
; \

314 } 
«me
 = 
AST_LIST_HEAD_NOLOCK_INIT_VALUE


	)

324 
	#AST_LIST_HEAD_SET
(
hód
, 
íåy
) do { \

325 (
hód
)->
fú°
 = (
íåy
); \

326 (
hód
)->
œ°
 = (
íåy
); \

327 
	`a°_muãx_öô
(&(
hód
)->
lock
); \

328 } 0)

	)

338 
	#AST_RWLIST_HEAD_SET
(
hód
, 
íåy
) do { \

339 (
hód
)->
fú°
 = (
íåy
); \

340 (
hód
)->
œ°
 = (
íåy
); \

341 
	`a°_rwlock_öô
(&(
hód
)->
lock
); \

342 } 0)

	)

352 
	#AST_LIST_HEAD_SET_NOLOCK
(
hód
, 
íåy
) do { \

353 (
hód
)->
fú°
 = (
íåy
); \

354 (
hód
)->
œ°
 = (
íåy
); \

355 } 0)

	)

374 
	#AST_LIST_ENTRY
(
ty≥
) \

376 
ty≥
 *
√xt
; \

377 }

	)

379 
	#AST_RWLIST_ENTRY
 
AST_LIST_ENTRY


	)

385 
	#AST_LIST_FIRST
(
hód
Ë((hód)->
fú°
)

	)

387 
	#AST_RWLIST_FIRST
 
AST_LIST_FIRST


	)

393 
	#AST_LIST_LAST
(
hód
Ë((hód)->
œ°
)

	)

395 
	#AST_RWLIST_LAST
 
AST_LIST_LAST


	)

403 
	#AST_LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
√xt
)

	)

405 
	#AST_RWLIST_NEXT
 
AST_LIST_NEXT


	)

413 
	#AST_LIST_EMPTY
(
hód
Ë(
	`AST_LIST_FIRST
(hódË=
NULL
)

	)

415 
	#AST_RWLIST_EMPTY
 
AST_LIST_EMPTY


	)

453 
	#AST_LIST_TRAVERSE
(
hód
,
v¨
,
fõld
) \

454 (
v¨
Ë(
hód
)->
fú°
; (v¨); (v¨Ë(v¨)->
fõld
.
√xt
)

	)

456 
	#AST_RWLIST_TRAVERSE
 
AST_LIST_TRAVERSE


	)

491 
	#AST_LIST_TRAVERSE_SAFE_BEGIN
(
hód
, 
v¨
, 
fõld
) { \

492 
	`ty≥of
((
hód
)->
fú°
Ë
__li°_√xt
; \

493 
	`ty≥of
((
hód
)->
fú°
Ë
__li°_¥ev
 = 
NULL
; \

494 
	`ty≥of
((
hód
)->
fú°
Ë
__√w_¥ev
 = 
NULL
; \

495 (
v¨
Ë(
hód
)->
fú°
, 
__√w_¥ev
 = (var), \

496 
__li°_√xt
 = (
v¨
Ë? (v¨)->
fõld
.
√xt
 : 
NULL
; \

497 (
v¨
); \

498 
__li°_¥ev
 = 
__√w_¥ev
, (
v¨
Ë
__li°_√xt
, \

499 
__√w_¥ev
 = (
v¨
), \

500 
__li°_√xt
 = (
v¨
Ë? (v¨)->
fõld
.
√xt
 : 
NULL
 \

501 )

	)

503 
	#AST_RWLIST_TRAVERSE_SAFE_BEGIN
 
AST_LIST_TRAVERSE_SAFE_BEGIN


	)

516 
	#AST_LIST_REMOVE_CURRENT
(
hód
, 
fõld
) do { \

517 
__√w_¥ev
->
fõld
.
√xt
 = 
NULL
; \

518 
__√w_¥ev
 = 
__li°_¥ev
; \

519 i‡(
__li°_¥ev
) \

520 
__li°_¥ev
->
fõld
.
√xt
 = 
__li°_√xt
; \

522 (
hód
)->
fú°
 = 
__li°_√xt
; \

523 i‡(!
__li°_√xt
) \

524 (
hód
)->
œ°
 = 
__li°_¥ev
; \

525 } 0)

	)

527 
	#AST_RWLIST_REMOVE_CURRENT
 
AST_LIST_REMOVE_CURRENT


	)

539 
	#AST_LIST_INSERT_BEFORE_CURRENT
(
hód
, 
ñm
, 
fõld
) do { \

540 i‡(
__li°_¥ev
) { \

541 (
ñm
)->
fõld
.
√xt
 = 
__li°_¥ev
->field.next; \

542 
__li°_¥ev
->
fõld
.
√xt
 = 
ñm
; \

544 (
ñm
)->
fõld
.
√xt
 = (
hód
)->
fú°
; \

545 (
hód
)->
fú°
 = (
ñm
); \

547 
__√w_¥ev
 = (
ñm
); \

548 } 0)

	)

550 
	#AST_RWLIST_INSERT_BEFORE_CURRENT
 
AST_LIST_INSERT_BEFORE_CURRENT


	)

555 
	#AST_LIST_TRAVERSE_SAFE_END
 }

	)

557 
	#AST_RWLIST_TRAVERSE_SAFE_END
 
AST_LIST_TRAVERSE_SAFE_END


	)

566 
	#AST_LIST_HEAD_INIT
(
hód
) { \

567 (
hód
)->
fú°
 = 
NULL
; \

568 (
hód
)->
œ°
 = 
NULL
; \

569 
	`a°_muãx_öô
(&(
hód
)->
lock
); \

570 }

	)

579 
	#AST_RWLIST_HEAD_INIT
(
hód
) { \

580 (
hód
)->
fú°
 = 
NULL
; \

581 (
hód
)->
œ°
 = 
NULL
; \

582 
	`a°_rwlock_öô
(&(
hód
)->
lock
); \

583 }

	)

593 
	#AST_LIST_HEAD_DESTROY
(
hód
) { \

594 (
hód
)->
fú°
 = 
NULL
; \

595 (
hód
)->
œ°
 = 
NULL
; \

596 
	`a°_muãx_de°roy
(&(
hód
)->
lock
); \

597 }

	)

607 
	#AST_RWLIST_HEAD_DESTROY
(
hód
) { \

608 (
hód
)->
fú°
 = 
NULL
; \

609 (
hód
)->
œ°
 = 
NULL
; \

610 
	`a°_rwlock_de°roy
(&(
hód
)->
lock
); \

611 }

	)

621 
	#AST_LIST_HEAD_INIT_NOLOCK
(
hód
) { \

622 (
hód
)->
fú°
 = 
NULL
; \

623 (
hód
)->
œ°
 = 
NULL
; \

624 }

	)

635 
	#AST_LIST_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

636 (
ñm
)->
fõld
.
√xt
 = (
li°ñm
)->field.next; \

637 (
li°ñm
)->
fõld
.
√xt
 = (
ñm
); \

638 i‡((
hód
)->
œ°
 =(
li°ñm
)) \

639 (
hód
)->
œ°
 = (
ñm
); \

640 } 0)

	)

642 
	#AST_RWLIST_INSERT_AFTER
 
AST_LIST_INSERT_AFTER


	)

651 
	#AST_LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

652 (
ñm
)->
fõld
.
√xt
 = (
hód
)->
fú°
; \

653 (
hód
)->
fú°
 = (
ñm
); \

654 i‡(!(
hód
)->
œ°
) \

655 (
hód
)->
œ°
 = (
ñm
); \

656 } 0)

	)

658 
	#AST_RWLIST_INSERT_HEAD
 
AST_LIST_INSERT_HEAD


	)

671 
	#AST_LIST_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

672 i‡(!(
hód
)->
fú°
) { \

673 (
hód
)->
fú°
 = (
ñm
); \

674 (
hód
)->
œ°
 = (
ñm
); \

676 (
hód
)->
œ°
->
fõld
.
√xt
 = (
ñm
); \

677 (
hód
)->
œ°
 = (
ñm
); \

679 } 0)

	)

681 
	#AST_RWLIST_INSERT_TAIL
 
AST_LIST_INSERT_TAIL


	)

693 
	#AST_LIST_APPEND_LIST
(
hód
, 
li°
, 
fõld
) do { \

694 i‡(!(
hód
)->
fú°
) { \

695 (
hód
)->
fú°
 = (
li°
)->first; \

696 (
hód
)->
œ°
 = (
li°
)->last; \

698 (
hód
)->
œ°
->
fõld
.
√xt
 = (
li°
)->
fú°
; \

699 (
hód
)->
œ°
 = (
li°
)->last; \

701 (
li°
)->
fú°
 = 
NULL
; \

702 (
li°
)->
œ°
 = 
NULL
; \

703 } 0)

	)

705 
	#AST_RWLIST_APPEND_LIST
 
AST_LIST_APPEND_LIST


	)

716 
	#AST_LIST_REMOVE_HEAD
(
hód
, 
fõld
) ({ \

717 
	`ty≥of
((
hód
)->
fú°
Ë
cur
 = (head)->first; \

718 i‡(
cur
) { \

719 (
hód
)->
fú°
 = 
cur
->
fõld
.
√xt
; \

720 
cur
->
fõld
.
√xt
 = 
NULL
; \

721 i‡((
hód
)->
œ°
 =
cur
) \

722 (
hód
)->
œ°
 = 
NULL
; \

724 
cur
; \

725 })

	)

727 
	#AST_RWLIST_REMOVE_HEAD
 
AST_LIST_REMOVE_HEAD


	)

737 
	#AST_LIST_REMOVE
(
hód
, 
ñm
, 
fõld
) ({ \

738 
	`__ty≥of
(
ñm
Ë
__ªs
 = 
NULL
; \

739 i‡((
hód
)->
fú°
 =(
ñm
)) { \

740 
__ªs
 = (
hód
)->
fú°
; \

741 (
hód
)->
fú°
 = (
ñm
)->
fõld
.
√xt
; \

742 i‡((
hód
)->
œ°
 =(
ñm
)) \

743 (
hód
)->
œ°
 = 
NULL
; \

745 
	`ty≥of
(
ñm
Ë
cuªlm
 = (
hód
)->
fú°
; \

746 
cuªlm
 && (cuªlm->
fõld
.
√xt
 !(
ñm
))) \

747 
cuªlm
 = cuªlm->
fõld
.
√xt
; \

748 i‡(
cuªlm
) { \

749 
__ªs
 = (
ñm
); \

750 
cuªlm
->
fõld
.
√xt
 = (
ñm
)->field.next; \

751 i‡((
hód
)->
œ°
 =(
ñm
)) \

752 (
hód
)->
œ°
 = 
cuªlm
; \

755 (
ñm
)->
fõld
.
√xt
 = 
NULL
; \

756 (
__ªs
); \

757 })

	)

759 
	#AST_RWLIST_REMOVE
 
AST_LIST_REMOVE


	)

	@/usr/include/asterisk/localtime.h

24 #i‚de‡
_ASTERISK_LOCALTIME_H


25 
	#_ASTERISK_LOCALTIME_H


	)

27 
tm
 *
a°_loˇ…ime
(c⁄° 
time_t
 *
timï
, tm *
p_tm
, c⁄° *
z⁄e
);

28 
time_t
 
a°_mktime
(
tm
 * c⁄° 
tmp
, c⁄° *
z⁄e
);

	@/usr/include/asterisk/paths.h

18 #i‚de‡
_ASTERISK_PATHS_H


19 
	#_ASTERISK_PATHS_H


	)

21 
	~<limôs.h
>

23 
a°_c⁄fig_AST_CONFIG_DIR
[
PATH_MAX
];

24 
a°_c⁄fig_AST_CONFIG_FILE
[
PATH_MAX
];

25 
a°_c⁄fig_AST_MODULE_DIR
[
PATH_MAX
];

26 
a°_c⁄fig_AST_SPOOL_DIR
[
PATH_MAX
];

27 
a°_c⁄fig_AST_MONITOR_DIR
[
PATH_MAX
];

28 
a°_c⁄fig_AST_VAR_DIR
[
PATH_MAX
];

29 
a°_c⁄fig_AST_DATA_DIR
[
PATH_MAX
];

30 
a°_c⁄fig_AST_LOG_DIR
[
PATH_MAX
];

31 
a°_c⁄fig_AST_AGI_DIR
[
PATH_MAX
];

32 
a°_c⁄fig_AST_DB
[
PATH_MAX
];

33 
a°_c⁄fig_AST_KEY_DIR
[
PATH_MAX
];

34 
a°_c⁄fig_AST_PID
[
PATH_MAX
];

35 
a°_c⁄fig_AST_SOCKET
[
PATH_MAX
];

36 
a°_c⁄fig_AST_RUN_DIR
[
PATH_MAX
];

37 
a°_c⁄fig_AST_CTL_PERMISSIONS
[
PATH_MAX
];

38 
a°_c⁄fig_AST_CTL_OWNER
[
PATH_MAX
];

39 
a°_c⁄fig_AST_CTL_GROUP
[
PATH_MAX
];

40 
a°_c⁄fig_AST_CTL
[
PATH_MAX
];

41 
a°_c⁄fig_AST_SYSTEM_NAME
[20];

	@/usr/include/asterisk/poll-compat.h

79 #i‚de‡
_POLL_EMUL_H_


80 
	#_POLL_EMUL_H_


	)

82 
	#POLLIN
 0x01

	)

83 
	#POLLPRI
 0x02

	)

84 
	#POLLOUT
 0x04

	)

85 
	#POLLERR
 0x08

	)

86 
	#POLLHUP
 0x10

	)

87 
	#POLLNVAL
 0x20

	)

89 
	spﬁlfd


91 
	mfd
;

92 
	mevíts
;

93 
	mªvíts
;

96 #ifde‡
__˝lu•lus


101 #i‡(
__STDC__
 > 0Ë|| 
deföed
(
__˝lu•lus
)

102 
pﬁl
 (
pﬁlfd
 *
pAºay
, 
n_fds
, 
timeout
);

104 
pﬁl
();

107 #ifde‡
__˝lu•lus


	@/usr/include/asterisk/sched.h

23 #i‚de‡
_ASTERISK_SCHED_H


24 
	#_ASTERISK_SCHED_H


	)

26 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

36 
	#SCHED_MAX_CACHE
 128

	)

50 
	#AST_SCHED_DEL
(
sched
, 
id
) \

52 
_cou¡
 = 0; \

53 
_sched_ªs
 = -1; \

54 
id
 > -1 && (
_sched_ªs
 = 
	`a°_sched_dñ
(
sched
, id)Ë&& ++
_cou¡
 < 10) \

55 
	`u¶ìp
(1); \

56 i‡(
_cou¡
 =10 && 
›ti⁄_debug
 > 2) { \

57 
	`a°_log
(
LOG_DEBUG
, "U«bÀÅÿˇn˚»scheduÀ ID %d.\n", 
id
); \

59 
id
 = -1; \

60 (
_sched_ªs
); \

61 })

	)

63 
	#AST_SCHED_DEL_SPINLOCK
(
sched
, 
id
, 
lock
) \

65 
_cou¡
 = 0; \

66 
_sched_ªs
 = -1; \

67 
id
 > -1 && (
_sched_ªs
 = 
	`a°_sched_dñ
(
sched
, id)Ë&& ++
_cou¡
 < 10) { \

68 
	`a°_muãx_u∆ock
(
lock
); \

69 
	`u¶ìp
(1); \

70 
	`a°_muãx_lock
(
lock
); \

72 i‡(
_cou¡
 =10 && 
›ti⁄_debug
 > 2) { \

73 
	`a°_log
(
LOG_DEBUG
, "U«bÀÅÿˇn˚»scheduÀ ID %d.\n", 
id
); \

75 
id
 = -1; \

76 (
_sched_ªs
); \

77 })

	)

79 
sched_c⁄ãxt
;

85 
sched_c⁄ãxt
 *
sched_c⁄ãxt_¸óã
();

92 
sched_c⁄ãxt_de°roy
(
sched_c⁄ãxt
 *
c
);

99 (*
a°_sched_cb
)(c⁄° *
	td©a
);

100 
	#AST_SCHED_CB
(
a
Ë((
a°_sched_cb
)◊))

	)

113 
a°_sched_add
(
sched_c⁄ãxt
 *
c⁄
, 
whí
, 
a°_sched_cb
 
ˇŒback
, c⁄° *
d©a
);

128 
a°_sched_add_v¨übÀ
(
sched_c⁄ãxt
 *
c⁄
, 
whí
, 
a°_sched_cb
 
ˇŒback
, c⁄° *
d©a
, 
v¨übÀ
);

137 #i‚de‡
AST_DEVMODE


138 
a°_sched_dñ
(
sched_c⁄ãxt
 *
c⁄
, 
id
);

140 
_a°_sched_dñ
(
sched_c⁄ãxt
 *
c⁄
, 
id
, c⁄° *
fûe
, 
löe
, c⁄° *
fun˘i⁄
);

141 
	#a°_sched_dñ
(
a
, 
b
Ë
	`_a°_sched_dñ
◊, b, 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
)

	)

153 
a°_sched_waô
(
sched_c⁄ãxt
 *
c⁄
);

162 
a°_sched_runq
(
sched_c⁄ãxt
 *
c⁄
);

168 
a°_sched_dump
(c⁄° 
sched_c⁄ãxt
 *
c⁄
);

174 
a°_sched_whí
(
sched_c⁄ãxt
 *
c⁄
,
id
);

180 
	#a°_sched_add_obje˘
(
obj
,
c⁄
,
whí
,
ˇŒback
Ë
	`a°_sched_add
((c⁄),(whí),(ˇŒback), 
	`ASTOBJ_REF
((obj)))

	)

186 
	#a°_sched_dñ_obje˘
(
obj
,
de°ru˘‹
,
c⁄
,
id
) do { \

187 i‡((
id
) > -1) { \

188 
	`a°_sched_dñ
((
c⁄
),(
id
)); \

189 (
id
) = -1; \

190 
	`ASTOBJ_UNREF
((
obj
),(
de°ru˘‹
)); \

192 } 0)

	)

194 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

	@/usr/include/asterisk/strings.h

23 #i‚de‡
_ASTERISK_STRINGS_H


24 
	#_ASTERISK_STRINGS_H


	)

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<°d¨g.h
>

30 
	~"a°îisk/ölöe_≠i.h
"

31 
	~"a°îisk/compûî.h
"

32 
	~"a°îisk/com∑t.h
"

34 
f‹˚_ölöe
 
	$a°_°æí_zîo
(c⁄° *
s
)

36  (!
s
 || (*s == '\0'));

37 
	}
}

42 
	#S_OR
(
a
, 
b
Ë(!
	`a°_°æí_zîo
◊Ë? (aË: (b))

	)

50 
AST_INLINE_API
(

51 *
a°_skù_bœnks
(c⁄° *
°r
),

53 *
°r
 && (() *str) < 33)

54 
°r
++;

55  (*)
°r
;

65 
AST_INLINE_API
(

66 *
a°_åim_bœnks
(*
°r
),

68 *
w‹k
 = 
°r
;

70 i‡(
w‹k
) {

71 
w‹k
 +
°æí
(work) - 1;

78 (
w‹k
 >
°r
) && (() *work) < 33)

79 *(
w‹k
--) = '\0';

81  
°r
;

91 
AST_INLINE_API
(

92 *
a°_skù_n⁄bœnks
(*
°r
),

94 *
°r
 && (() *str) > 32)

95 
°r
++;

96  
°r
;

109 
AST_INLINE_API
(

110 *
a°_°rù
(*
s
),

112 
s
 = 
a°_skù_bœnks
(s);

113 i‡(
s
)

114 
a°_åim_bœnks
(
s
);

115  
s
;

143 *
a°_°rù_quŸed
(*
s
, c⁄° *
beg_quŸes
, c⁄° *
íd_quŸes
);

150 *
a°_u√sˇ≥_£micﬁ⁄
(*
s
);

168 
AST_INLINE_API
(

169 
a°_c›y_°rög
(*
d°
, c⁄° *
§c
, 
size_t
 
size
),

171 *
§c
 && 
size
) {

172 *
d°
++ = *
§c
++;

173 
size
--;

175 i‡(
__buûtö_ex≥˘
(!
size
, 0))

176 
d°
--;

177 *
d°
 = '\0';

193 
	$a°_buûd_°rög
(**
buf„r
, 
size_t
 *
•a˚
, c⁄° *
fmt
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, 3, 4)));

207 
	`a°_buûd_°rög_va
(**
buf„r
, 
size_t
 *
•a˚
, c⁄° *
fmt
, 
va_li°
 
≠
);

216 
	`a°_åue
(c⁄° *
vÆ
);

225 
	`a°_Ál£
(c⁄° *
vÆ
);

237 
	`a°_joö
(*
s
, 
size_t
 
Àn
, * c⁄° 
w
[]);

247 
	`a°_gë_time_t
(c⁄° *
§c
, 
time_t
 *
d°
,Åime_à
_deÁu…
, *
c⁄sumed
);

251 
	sa°_ªÆloˇ
 {

252 *
±r
;

253 
Ælo˛í
;

256 
	#a°_ª°rdu∑
(
ø
, 
s
) \

258 i‡((
ø
)->
±r
 && 
	`°æí
(
s
Ë+ 1 < (ø)->
Ælo˛í
) { \

259 
	`°r˝y
((
ø
)->
±r
, 
s
); \

261 (
ø
)->
±r
 = 
	`Æloˇ
(
	`°æí
(
s
Ë+ 1 - (ø)->
Ælo˛í
); \

262 i‡((
ø
)->
±r
Ë‘a)->
Ælo˛í
 = 
	`°æí
(
s
) + 1; \

264 (
ø
)->
±r
; \

265 
	}
})

	)

275 
f‹˚_ölöe
 
	$a°_°r_hash
(c⁄° *
°r
)

277 
hash
 = 5381;

279 *
°r
)

280 
hash
 = hash * 33 ^ *
°r
++;

282  
	`abs
(
hash
);

283 
	}
}

	@/usr/include/asterisk/time.h

23 #i‚de‡
_ASTERISK_TIME_H


24 
	#_ASTERISK_TIME_H


	)

26 
	~<sys/time.h
>

27 
	~<°dlib.h
>

29 
	~"a°îisk/ölöe_≠i.h
"

34 
timevÆ
 
tv
;

35 
	$ty≥of
(
	ttv
.
	ttv_£c
Ë
	ta°_time_t
;

36 
	$ty≥of
(
	ttv
.
	ttv_u£c
Ë
	ta°_su£c⁄ds_t
;

44 
	`AST_INLINE_API
(

45 
	`a°_tvdiff_ms
(
timevÆ
 
íd
, timevÆ 
°¨t
),

52  ((
íd
.
tv_£c
 - 
°¨t
.tv_sec) * 1000) +

53 (((1000000 + 
íd
.
tv_u£c
 - 
°¨t
.tv_usec) / 1000) - 1000);

54 
	}
}

60 
AST_INLINE_API
(

61 
a°_tvzîo
(c⁄° 
timevÆ
 
t
),

63  (
t
.
tv_£c
 =0 &&Å.
tv_u£c
 == 0);

71 
AST_INLINE_API
(

72 
a°_tvcmp
(
timevÆ
 
_a
, timevÆ 
_b
),

74 i‡(
_a
.
tv_£c
 < 
_b
.tv_sec)

76 i‡(
_a
.
tv_£c
 > 
_b
.tv_sec)

79 i‡(
_a
.
tv_u£c
 < 
_b
.tv_usec)

81 i‡(
_a
.
tv_u£c
 > 
_b
.tv_usec)

90 
AST_INLINE_API
(

91 
a°_tveq
(
timevÆ
 
_a
, timevÆ 
_b
),

93  (
_a
.
tv_£c
 =
_b
.tv_£¯&& _a.
tv_u£c
 == _b.tv_usec);

100 
AST_INLINE_API
(

101 
timevÆ
 
a°_tvnow
(),

103 
timevÆ
 
t
;

104 
gëtimeofday
(&
t
, 
NULL
);

105  
t
;

112 
timevÆ
 
a°_tvadd
(timevÆ 
a
, timevÆ 
b
);

117 
timevÆ
 
a°_tvsub
(timevÆ 
a
, timevÆ 
b
);

122 
AST_INLINE_API
(

123 
timevÆ
 
a°_tv
(
a°_time_t
 
£c
, 
a°_su£c⁄ds_t
 
u£c
),

125 
timevÆ
 
t
;

126 
t
.
tv_£c
 = 
£c
;

127 
t
.
tv_u£c
 = 
u£c
;

128  
t
;

137 
AST_INLINE_API
(

138 
timevÆ
 
a°_ßmp2tv
(
_nßmp
, 
_øã
),

140  
a°_tv
(
_nßmp
 / 
_øã
, (_nsamp % _rate) * (1000000 / _rate));

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

21 #i‚def 
_FCNTL_H


25 
	~<sys/ty≥s.h
>

26 
	~<bôs/w‹dsize.h
>

27 #ifde‡
__USE_GNU


28 
	~<bôs/uio.h
>

34 
	#O_ACCMODE
 0003

	)

35 
	#O_RDONLY
 00

	)

36 
	#O_WRONLY
 01

	)

37 
	#O_RDWR
 02

	)

38 
	#O_CREAT
 0100

	)

39 
	#O_EXCL
 0200

	)

40 
	#O_NOCTTY
 0400

	)

41 
	#O_TRUNC
 01000

	)

42 
	#O_APPEND
 02000

	)

43 
	#O_NONBLOCK
 04000

	)

44 
	#O_NDELAY
 
O_NONBLOCK


	)

45 
	#O_SYNC
 04010000

	)

46 
	#O_FSYNC
 
O_SYNC


	)

47 
	#O_ASYNC
 020000

	)

49 #ifde‡
__USE_XOPEN2K8


50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_CLOEXEC
 02000000

	)

54 #ifde‡
__USE_GNU


55 
	#O_DIRECT
 040000

	)

56 
	#O_NOATIME
 01000000

	)

57 
	#O_PATH
 010000000

	)

63 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


64 
	#O_DSYNC
 010000

	)

65 
	#O_RSYNC
 
O_SYNC


	)

68 #ifde‡
__USE_LARGEFILE64


69 #i‡
__WORDSIZE
 == 64

70 
	#O_LARGEFILE
 0

	)

72 
	#O_LARGEFILE
 0100000

	)

77 
	#F_DUPFD
 0

	)

78 
	#F_GETFD
 1

	)

79 
	#F_SETFD
 2

	)

80 
	#F_GETFL
 3

	)

81 
	#F_SETFL
 4

	)

82 #i‡
__WORDSIZE
 == 64

83 
	#F_GETLK
 5

	)

84 
	#F_SETLK
 6

	)

85 
	#F_SETLKW
 7

	)

87 
	#F_GETLK64
 5

	)

88 
	#F_SETLK64
 6

	)

89 
	#F_SETLKW64
 7

	)

91 #i‚de‡
__USE_FILE_OFFSET64


92 
	#F_GETLK
 5

	)

93 
	#F_SETLK
 6

	)

94 
	#F_SETLKW
 7

	)

96 
	#F_GETLK
 
F_GETLK64


	)

97 
	#F_SETLK
 
F_SETLK64


	)

98 
	#F_SETLKW
 
F_SETLKW64


	)

100 
	#F_GETLK64
 12

	)

101 
	#F_SETLK64
 13

	)

102 
	#F_SETLKW64
 14

	)

105 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


106 
	#F_SETOWN
 8

	)

107 
	#F_GETOWN
 9

	)

110 #ifde‡
__USE_GNU


111 
	#F_SETSIG
 10

	)

112 
	#F_GETSIG
 11

	)

113 
	#F_SETOWN_EX
 15

	)

114 
	#F_GETOWN_EX
 16

	)

117 #ifde‡
__USE_GNU


118 
	#F_SETLEASE
 1024

	)

119 
	#F_GETLEASE
 1025

	)

120 
	#F_NOTIFY
 1026

	)

121 
	#F_SETPIPE_SZ
 1031

	)

122 
	#F_GETPIPE_SZ
 1032

	)

124 #ifde‡
__USE_XOPEN2K8


125 
	#F_DUPFD_CLOEXEC
 1030

	)

130 
	#FD_CLOEXEC
 1

	)

133 
	#F_RDLCK
 0

	)

134 
	#F_WRLCK
 1

	)

135 
	#F_UNLCK
 2

	)

138 
	#F_EXLCK
 4

	)

139 
	#F_SHLCK
 8

	)

141 #ifde‡
__USE_BSD


143 
	#LOCK_SH
 1

	)

144 
	#LOCK_EX
 2

	)

145 
	#LOCK_NB
 4

	)

147 
	#LOCK_UN
 8

	)

150 #ifde‡
__USE_GNU


151 
	#LOCK_MAND
 32

	)

152 
	#LOCK_READ
 64

	)

153 
	#LOCK_WRITE
 128

	)

154 
	#LOCK_RW
 192

	)

157 #ifde‡
__USE_GNU


159 
	#DN_ACCESS
 0x00000001

	)

160 
	#DN_MODIFY
 0x00000002

	)

161 
	#DN_CREATE
 0x00000004

	)

162 
	#DN_DELETE
 0x00000008

	)

163 
	#DN_RENAME
 0x00000010

	)

164 
	#DN_ATTRIB
 0x00000020

	)

165 
	#DN_MULTISHOT
 0x80000000

	)

168 
	sÊock


170 
	ml_ty≥
;

171 
	ml_whí˚
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
__off_t
 
	ml_°¨t
;

174 
__off_t
 
	ml_Àn
;

176 
__off64_t
 
	ml_°¨t
;

177 
__off64_t
 
	ml_Àn
;

179 
__pid_t
 
	ml_pid
;

182 #ifde‡
__USE_LARGEFILE64


183 
	sÊock64


185 
	ml_ty≥
;

186 
	ml_whí˚
;

187 
__off64_t
 
	ml_°¨t
;

188 
__off64_t
 
	ml_Àn
;

189 
__pid_t
 
	ml_pid
;

193 #ifde‡
__USE_GNU


195 
	e__pid_ty≥


197 
	mF_OWNER_TID
 = 0,

198 
	mF_OWNER_PID
,

199 
	mF_OWNER_PGRP
,

200 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


204 
	sf_ow√r_ex


206 
__pid_ty≥
 
	mty≥
;

207 
__pid_t
 
	mpid
;

213 #ifdef 
__USE_BSD


214 
	#FAPPEND
 
O_APPEND


	)

215 
	#FFSYNC
 
O_FSYNC


	)

216 
	#FASYNC
 
O_ASYNC


	)

217 
	#FNONBLOCK
 
O_NONBLOCK


	)

218 
	#FNDELAY
 
O_NDELAY


	)

222 #ifde‡
__USE_XOPEN2K


223 
	#POSIX_FADV_NORMAL
 0

	)

224 
	#POSIX_FADV_RANDOM
 1

	)

225 
	#POSIX_FADV_SEQUENTIAL
 2

	)

226 
	#POSIX_FADV_WILLNEED
 3

	)

227 
	#POSIX_FADV_DONTNEED
 4

	)

228 
	#POSIX_FADV_NOREUSE
 5

	)

232 #ifde‡
__USE_GNU


234 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

237 
	#SYNC_FILE_RANGE_WRITE
 2

	)

240 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

245 
	#SPLICE_F_MOVE
 1

	)

246 
	#SPLICE_F_NONBLOCK
 2

	)

249 
	#SPLICE_F_MORE
 4

	)

250 
	#SPLICE_F_GIFT
 8

	)

254 
	sfûe_h™dÀ


256 
	mh™dÀ_byãs
;

257 
	mh™dÀ_ty≥
;

259 
	mf_h™dÀ
[0];

263 
	#MAX_HANDLE_SZ
 128

	)

266 
	g__BEGIN_DECLS


268 #ifde‡
__USE_GNU


271 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

272 
__THROW
;

279 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

280 
__Êags
);

287 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

288 
size_t
 
__cou¡
, 
__Êags
);

294 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

295 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

296 
__Êags
);

302 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

303 
__Êags
);

309 #i‚de‡
__USE_FILE_OFFSET64


310 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

312 #ifde‡
__REDIRECT


313 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

314 
__off64_t
 
__Àn
),

315 
ÁŒoˇã64
);

317 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

320 #ifde‡
__USE_LARGEFILE64


321 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

322 
__off64_t
 
__Àn
);

327 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

328 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

329 
__Êags
Ë
__THROW
;

335 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

336 
__Êags
);

340 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/huge_val.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VAL
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

37 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

41 
	~<ídün.h
>

43 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

45 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

48 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


49 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

52 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

53 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VALF
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

37 { 
__l
: 0x7f800000UL }).
__d
)

	)

41 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

50 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

51 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

28 
	#HUGE_VALL
 ((Ë
HUGE_VAL
)

	)

	@/usr/include/bits/inf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#INFINITY
 (
	`__buûtö_öff
())

	)

29 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/math-finite.h

20 #i‚de‡
_MATH_H


25 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

26 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

27 #ifde‡
__MATH_DECLARE_LDOUBLE


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

31 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


33 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

34 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

35 #ifde‡
__MATH_DECLARE_LDOUBLE


36 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

41 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

42 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

43 #ifde‡
__MATH_DECLARE_LDOUBLE


44 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

48 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

49 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 
__REDIRECT_NTH
 (
©™2l
, (, ),

52 
__©™2l_föôe
);

55 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


57 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

58 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

59 #ifde‡
__MATH_DECLARE_LDOUBLE


60 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

65 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

66 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

67 #ifde‡
__MATH_DECLARE_LDOUBLE


68 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

72 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

73 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

74 #ifde‡
__MATH_DECLARE_LDOUBLE


75 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

78 #ifde‡
__USE_GNU


80 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

81 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

82 #ifde‡
__MATH_DECLARE_LDOUBLE


83 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

87 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

88 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

89 #ifde‡
__MATH_DECLARE_LDOUBLE


90 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

94 #ifde‡
__USE_ISOC99


96 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

97 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

104 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

105 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

106 #ifde‡
__MATH_DECLARE_LDOUBLE


107 
__REDIRECT_NTH
 (
fmodl
, (, ),

108 
__fmodl_föôe
);

111 #ifde‡
__USE_ISOC99


113 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

114 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

115 #ifde‡
__MATH_DECLARE_LDOUBLE


116 
__REDIRECT_NTH
 (
hypŸl
, (, ),

117 
__hypŸl_föôe
);

121 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


123 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

124 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

125 #ifde‡
__MATH_DECLARE_LDOUBLE


126 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

130 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

131 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

132 #ifde‡
__MATH_DECLARE_LDOUBLE


133 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

137 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

138 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

139 #ifde‡
__MATH_DECLARE_LDOUBLE


140 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

144 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

145 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

151 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

152 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

153 #ifde‡
__MATH_DECLARE_LDOUBLE


154 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

158 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

159 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

165 #ifde‡
__USE_MISC


167 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

168 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

169 #ifde‡
__MATH_DECLARE_LDOUBLE


170 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

171 
__lgammÆ_r_föôe
);

175 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


177 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

179 #ifde‡
__USE_ISOC99


180 
__loˇl_signgam
 = 0;

181  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

183  
	`lgamma_r
 (
__d
, &
signgam
);

185 
	}
}

186 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

188 #ifde‡
__USE_ISOC99


189 
__loˇl_signgam
 = 0;

190  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

192  
	`lgammaf_r
 (
__d
, &
signgam
);

194 
	}
}

195 #ifde‡
__MATH_DECLARE_LDOUBLE


196 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

198 #ifde‡
__USE_ISOC99


199 
__loˇl_signgam
 = 0;

200  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

202  
	`lgammÆ_r
 (
__d
, &
signgam
);

204 
	}
}

208 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


210 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

212 #ifde‡
__USE_ISOC99


213 
__loˇl_signgam
 = 0;

214  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

216  
	`lgamma_r
 (
__d
, &
signgam
);

218 
	}
}

219 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

221 #ifde‡
__USE_ISOC99


222 
__loˇl_signgam
 = 0;

223  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

225  
	`lgammaf_r
 (
__d
, &
signgam
);

227 
	}
}

228 #ifde‡
__MATH_DECLARE_LDOUBLE


229 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

231 #ifde‡
__USE_ISOC99


232 
__loˇl_signgam
 = 0;

233  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

235  
	`lgammÆ_r
 (
__d
, &
signgam
);

237 
	}
}

242 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

243 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

244 #ifde‡
__MATH_DECLARE_LDOUBLE


245 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

249 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

250 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

251 #ifde‡
__MATH_DECLARE_LDOUBLE


252 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

255 #ifde‡
__USE_ISOC99


257 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

258 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

259 #ifde‡
__MATH_DECLARE_LDOUBLE


260 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

265 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

266 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

267 #ifde‡
__MATH_DECLARE_LDOUBLE


268 
__REDIRECT_NTH
 (
powl
, (, ),

269 
__powl_föôe
);

273 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

274 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

275 #ifde‡
__MATH_DECLARE_LDOUBLE


276 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

277 
__ªmaödîl_föôe
);

280 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


282 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

283 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

284 #ifde‡
__MATH_DECLARE_LDOUBLE


285 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

286 
__sˇlbl_föôe
);

291 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

292 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

293 #ifde‡
__MATH_DECLARE_LDOUBLE


294 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

298 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

299 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

300 #ifde‡
__MATH_DECLARE_LDOUBLE


301 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

304 #ifde‡
__USE_ISOC99


306 
__gamma_r_föôe
 (, *);

307 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

309 
__loˇl_signgam
 = 0;

310 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

311  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

312 
	}
}

313 
__gammaf_r_föôe
 (, *);

314 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

316 
__loˇl_signgam
 = 0;

317 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

318  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

319 
	}
}

320 #ifde‡
__MATH_DECLARE_LDOUBLE


321 
__gammÆ_r_föôe
 (, *);

322 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

324 
__loˇl_signgam
 = 0;

325 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

326  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

327 
	}
}

	@/usr/include/bits/mathcalls.h

46 #i‚de‡
_MATH_H


53 
_MdoubÀ_BEGIN_NAMESPACE


55 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

57 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

59 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

61 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

64 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

66 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

68 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

73 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

75 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

77 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

78 
	g_MdoubÀ_END_NAMESPACE


80 #ifde‡
__USE_GNU


82 
__MATHDECL
 (,
söcos
,,

83 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

86 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


87 
__BEGIN_NAMESPACE_C99


89 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

91 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

93 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

94 
	g__END_NAMESPACE_C99


99 
_MdoubÀ_BEGIN_NAMESPACE


101 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

104 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

107 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

110 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

113 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

116 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
))

117 
__©åibuã__
 ((
__n⁄nuŒ__
 (2)));

118 
	g_MdoubÀ_END_NAMESPACE


120 #ifde‡
__USE_GNU


122 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

124 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

127 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


128 
__BEGIN_NAMESPACE_C99


130 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

133 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

136 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

137 
	g__END_NAMESPACE_C99


140 #ifde‡
__USE_ISOC99


141 
__BEGIN_NAMESPACE_C99


143 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

146 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

147 
	g__END_NAMESPACE_C99


153 
_MdoubÀ_BEGIN_NAMESPACE


155 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

158 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

159 
	g_MdoubÀ_END_NAMESPACE


161 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


162 
__BEGIN_NAMESPACE_C99


164 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

165 
	g__END_NAMESPACE_C99


168 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


169 
__BEGIN_NAMESPACE_C99


171 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

172 
	g__END_NAMESPACE_C99


178 
_MdoubÀ_BEGIN_NAMESPACE


180 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

183 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

186 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

189 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

194 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

198 
	g_MdoubÀ_END_NAMESPACE


200 #ifde‡
__USE_MISC


203 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

206 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

209 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

213 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

216 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


217 
__BEGIN_NAMESPACE_C99


219 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

220 
	g__END_NAMESPACE_C99


223 #ifde‡
__USE_ISOC99


224 
__BEGIN_NAMESPACE_C99


226 
__MATHCALLX
 (
«n
,, (
__c⁄°
 *
__ègb
), (
__c⁄°__
));

227 
	g__END_NAMESPACE_C99


232 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

234 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


236 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

239 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

241 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

242 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

244 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

248 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


249 
__BEGIN_NAMESPACE_C99


251 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

253 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

254 
	g__END_NAMESPACE_C99


257 #ifde‡
__USE_ISOC99


258 
__BEGIN_NAMESPACE_C99


260 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

261 
	g__END_NAMESPACE_C99


264 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


266 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

269 #ifde‡
__USE_MISC


273 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

277 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


278 
__BEGIN_NAMESPACE_C99


281 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

284 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

285 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


286 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

290 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

292 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


294 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

298 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

301 #ifde‡
__USE_ISOC99


303 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

307 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

311 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

315 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

320 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

327 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

328 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

333 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

337 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

340 
__MATHCALL
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

343 
__MATHCALL
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

347 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

348 
__©åibuã__
 ((
__c⁄°__
));

351 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

352 
__©åibuã__
 ((
__c⁄°__
));

356 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

359 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


360 
	g__END_NAMESPACE_C99


363 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


365 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

19 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


23 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


24 
	#_MATH_H_MATHDEF
 1

	)

26 
	~<bôs/w‹dsize.h
>

28 #i‡
__WORDSIZE
 =64 || (
deföed
 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

31 
	tÊﬂt_t
;

32 
	tdoubÀ_t
;

38 
	tÊﬂt_t
;

40 
	tdoubÀ_t
;

45 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

46 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

50 #i‡
__FP_FAST_FMA


51 
	#FP_FAST_FMA
 1

	)

54 #i‡
__FP_FAST_FMAF


55 
	#FP_FAST_FMAF
 1

	)

58 #i‡
__FP_FAST_FMAL


59 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

20 #i‚de‡
_MATH_H


24 
	~<bôs/w‹dsize.h
>

26 #i‚de‡
__exã∫_Æways_ölöe


27 
	#__MATH_INLINE
 
__ölöe


	)

29 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

35 #i‡
__GNUC_PREREQ
 (2, 8Ë&& 
deföed
 
__USE_ISOC99


36 
__BEGIN_NAMESPACE_C99


39 
__MATH_INLINE
 

40 
__NTH
 (
	$__signbôf
 (
__x
))

42 #i‡
__WORDSIZE
 == 32

43 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

44  
__u
.
__i
 < 0;

46 
__m
;

47 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

48  
__m
 & 0x8;

50 
	}
}

51 
__MATH_INLINE
 

52 
__NTH
 (
	$__signbô
 (
__x
))

54 #i‡
__WORDSIZE
 == 32

55 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

56  
__u
.
__i
[1] < 0;

58 
__m
;

59 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

60  
__m
 & 0x80;

62 
	}
}

63 
__MATH_INLINE
 

64 
__NTH
 (
	$__signbôl
 (
__x
))

66 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

67  (
__u
.
__i
[2] & 0x8000) != 0;

68 
	}
}

70 
	g__END_NAMESPACE_C99


74 #i‡(
__GNUC_PREREQ
 (2, 8Ë&& !
deföed
 
__NO_MATH_INLINES
 \

75 && 
deföed
 
	g__OPTIMIZE__
)

77 #ifde‡
__USE_ISOC99


78 
	g__BEGIN_NAMESPACE_C99


81 #i‡
__WORDSIZE
 =64 || 
deföed
 
__SSE_MATH__


82 
__MATH_INLINE
 

83 
__NTH
 (
	$Ãötf
 (
__x
))

85 
__ªs
;

86 
	`__asm
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

87  
__ªs
;

88 
	}
}

90 #i‡
__WORDSIZE
 =64 || 
deföed
 
__SSE2_MATH__


91 
__MATH_INLINE
 

92 
__NTH
 (
	$Ãöt
 (
__x
))

94 
__ªs
;

95 
	`__asm
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

96  
__ªs
;

97 
	}
}

99 #i‡
__WORDSIZE
 == 64

100 
__MATH_INLINE
 

101 
__NTH
 (
	$Œrötf
 (
__x
))

103 
__ªs
;

104 
	`__asm
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

105  
__ªs
;

106 
	}
}

107 
__MATH_INLINE
 

108 
__NTH
 (
	$Œröt
 (
__x
))

110 
__ªs
;

111 
	`__asm
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

112  
__ªs
;

113 
	}
}

116 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

117 && (
	g__WORDSIZE
 =64 || 
deföed
 
__SSE2_MATH__
)

119 
__MATH_INLINE
 

120 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

122 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

123  
__x
;

124 
	}
}

125 
__MATH_INLINE
 

126 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

128 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

129  
__x
;

130 
	}
}

133 
__MATH_INLINE
 

134 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

136 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

137  
__x
;

138 
	}
}

139 
__MATH_INLINE
 

140 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

142 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

143  
__x
;

144 
	}
}

147 
	g__END_NAMESPACE_C99


150 #i‡
deföed
 
__SSE4_1__
 && (
__WORDSIZE
 =64 || deföed 
__SSE2_MATH__
)

151 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


152 
__BEGIN_NAMESPACE_C99


155 
__MATH_INLINE
 

156 
__NTH
 (
	$röt
 (
__x
))

158 
__ªs
;

159 
	`__asm
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

160  
__ªs
;

161 
	}
}

162 
__MATH_INLINE
 

163 
__NTH
 (
	$rötf
 (
__x
))

165 
__ªs
;

166 
	`__asm
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

167  
__ªs
;

168 
	}
}

170 #ifde‡
__USE_ISOC99


172 
__MATH_INLINE
 

173 
__NTH
 (
	$√¨byöt
 (
__x
))

175 
__ªs
;

176 
	`__asm
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

177  
__ªs
;

178 
	}
}

179 
__MATH_INLINE
 

180 
__NTH
 (
	$√¨byötf
 (
__x
))

182 
__ªs
;

183 
	`__asm
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

188 
	g__END_NAMESPACE_C99


191 
__BEGIN_NAMESPACE_STD


193 
__MATH_INLINE
 

194 
__NTH
 (
	$˚û
 (
__x
))

196 
__ªs
;

197 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

198  
__ªs
;

199 
	}
}

200 
__END_NAMESPACE_STD


202 
__BEGIN_NAMESPACE_C99


203 
__MATH_INLINE
 

204 
__NTH
 (
	$˚ûf
 (
__x
))

206 
__ªs
;

207 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

208  
__ªs
;

209 
	}
}

210 
__END_NAMESPACE_C99


212 
__BEGIN_NAMESPACE_STD


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Êo‹
 (
__x
))

217 
__ªs
;

218 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

219  
__ªs
;

220 
	}
}

221 
__END_NAMESPACE_STD


223 
__BEGIN_NAMESPACE_C99


224 
__MATH_INLINE
 

225 
__NTH
 (
	$Êo‹f
 (
__x
))

227 
__ªs
;

228 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

229  
__ªs
;

230 
	}
}

231 
	g__END_NAMESPACE_C99


	@/usr/include/bits/nan.h

20 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

29 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#NAN
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7fc00000UL }).
__d
)

	)

40 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

49 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


50 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

51 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

193 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/stat.h

19 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_STAT_H


24 
	#_BITS_STAT_H
 1

	)

27 
	#_STAT_VER_KERNEL
 0

	)

29 #i‡
__WORDSIZE
 == 32

30 
	#_STAT_VER_SVR4
 2

	)

31 
	#_STAT_VER_LINUX
 3

	)

34 
	#_MKNOD_VER_LINUX
 1

	)

35 
	#_MKNOD_VER_SVR4
 2

	)

36 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‡
__WORDSIZE
 == 32

50 
	m__∑d1
;

52 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‡
__WORDSIZE
 == 32

58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #i‡
__WORDSIZE
 == 64

67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‡
__WORDSIZE
 == 32

71 
	m__∑d2
;

73 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
	m°_˘imí£c
;

105 #i‡
__WORDSIZE
 == 64

106 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #i‡
__WORDSIZE
 == 64

123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #i‡
__WORDSIZE
 == 64

135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

155 
	#°_©ime
 
°_©im
.
tv_£c


	)

156 
	#°_mtime
 
°_mtim
.
tv_£c


	)

157 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

159 
__time_t
 
	m°_©ime
;

160 
	m°_©imí£c
;

161 
__time_t
 
	m°_mtime
;

162 
	m°_mtimí£c
;

163 
__time_t
 
	m°_˘ime
;

164 
	m°_˘imí£c
;

166 #i‡
__WORDSIZE
 == 64

167 
	m__unu£d
[3];

169 
__öo64_t
 
	m°_öo
;

175 
	#_STATBUF_ST_BLKSIZE


	)

176 
	#_STATBUF_ST_RDEV


	)

178 
	#_STATBUF_ST_NSEC


	)

182 
	#__S_IFMT
 0170000

	)

185 
	#__S_IFDIR
 0040000

	)

186 
	#__S_IFCHR
 0020000

	)

187 
	#__S_IFBLK
 0060000

	)

188 
	#__S_IFREG
 0100000

	)

189 
	#__S_IFIFO
 0010000

	)

190 
	#__S_IFLNK
 0120000

	)

191 
	#__S_IFSOCK
 0140000

	)

195 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

196 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

197 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

201 
	#__S_ISUID
 04000

	)

202 
	#__S_ISGID
 02000

	)

203 
	#__S_ISVTX
 01000

	)

204 
	#__S_IREAD
 0400

	)

205 
	#__S_IWRITE
 0200

	)

206 
	#__S_IEXEC
 0100

	)

208 #ifde‡
__USE_ATFILE


209 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

210 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

24 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


25 #i‚de‡
_STRUCT_TIMEVAL


26 
	#_STRUCT_TIMEVAL
 1

	)

27 
	~<bôs/ty≥s.h
>

31 
	stimevÆ


33 
__time_t
 
	mtv_£c
;

34 
__su£c⁄ds_t
 
	mtv_u£c
;

39 #i‚de‡
__√ed_timevÆ


40 #i‚de‡
_BITS_TIME_H


41 
	#_BITS_TIME_H
 1

	)

49 
	#CLOCKS_PER_SEC
 1000000l

	)

51 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/dirent.h

24 #i‚def 
_DIRENT_H


25 
	#_DIRENT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifde‡
__USE_XOPEN


34 #i‚de‡
__öo_t_deföed


35 #i‚de‡
__USE_FILE_OFFSET64


36 
__öo_t
 
	töo_t
;

38 
__öo64_t
 
	töo_t
;

40 
	#__öo_t_deföed


	)

42 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


43 
__öo64_t
 
	töo64_t
;

44 
	#__öo64_t_deföed


	)

63 
	~<bôs/dúít.h
>

65 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


66 
	#d_öo
 
d_fûío


	)

83 #ifde‡
_DIRENT_HAVE_D_NAMLEN


84 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

85 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

87 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

88 #ifde‡
_DIRENT_HAVE_D_RECLEN


89 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

91 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

92 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

97 #ifde‡
__USE_BSD


101 
	mDT_UNKNOWN
 = 0,

102 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

103 
	mDT_FIFO
 = 1,

104 
	#DT_FIFO
 
DT_FIFO


	)

105 
	mDT_CHR
 = 2,

106 
	#DT_CHR
 
DT_CHR


	)

107 
	mDT_DIR
 = 4,

108 
	#DT_DIR
 
DT_DIR


	)

109 
	mDT_BLK
 = 6,

110 
	#DT_BLK
 
DT_BLK


	)

111 
	mDT_REG
 = 8,

112 
	#DT_REG
 
DT_REG


	)

113 
	mDT_LNK
 = 10,

114 
	#DT_LNK
 
DT_LNK


	)

115 
	mDT_SOCK
 = 12,

116 
	#DT_SOCK
 
DT_SOCK


	)

117 
	mDT_WHT
 = 14

118 
	#DT_WHT
 
DT_WHT


	)

122 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

123 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

129 
__dú°ªam
 
	tDIR
;

136 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

138 #ifde‡
__USE_XOPEN2K8


143 
DIR
 *
	`fd›ídú
 (
__fd
);

151 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

163 #i‚de‡
__USE_FILE_OFFSET64


164 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__REDIRECT


167 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

168 
	`__n⁄nuŒ
 ((1));

170 
	#ªaddú
 
ªaddú64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


184 #i‚de‡
__USE_FILE_OFFSET64


185 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

186 
dúít
 *
__ª°ri˘
 
__íåy
,

187 
dúít
 **
__ª°ri˘
 
__ªsu…
)

188 
	`__n⁄nuŒ
 ((1, 2, 3));

190 #ifde‡
__REDIRECT


191 
	`__REDIRECT
 (
ªaddú_r
,

192 (
DIR
 *
__ª°ri˘
 
__dúp
,

193 
dúít
 *
__ª°ri˘
 
__íåy
,

194 
dúít
 **
__ª°ri˘
 
__ªsu…
),

195 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

197 
	#ªaddú_r
 
ªaddú64_r


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

203 
dúít64
 *
__ª°ri˘
 
__íåy
,

204 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

205 
	`__n⁄nuŒ
 ((1, 2, 3));

210 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

212 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


213 
	~<bôs/ty≥s.h
>

216 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


225 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


228 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

231 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


232 #i‚de‡
MAXNAMLEN


234 
	~<bôs/posix1_lim.h
>

237 #ifde‡
NAME_MAX


238 
	#MAXNAMLEN
 
NAME_MAX


	)

240 
	#MAXNAMLEN
 255

	)

245 
	#__√ed_size_t


	)

246 
	~<°ddef.h
>

255 #i‚de‡
__USE_FILE_OFFSET64


256 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

257 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

258 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

259 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

260 
__c⁄°
 
dúít
 **))

261 
	`__n⁄nuŒ
 ((1, 2));

263 #ifde‡
__REDIRECT


264 
	`__REDIRECT
 (
sˇndú
,

265 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

266 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

267 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

268 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

269 
__c⁄°
 
dúít
 **)),

270 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

272 
	#sˇndú
 
sˇndú64


	)

276 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


279 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

280 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

281 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

282 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

283 
__c⁄°
 
dúít64
 **))

284 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__USE_GNU


293 #i‚de‡
__USE_FILE_OFFSET64


294 
	`sˇndú©
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

295 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

296 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

297 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

298 
__c⁄°
 
dúít
 **))

299 
	`__n⁄nuŒ
 ((2, 3));

301 #ifde‡
__REDIRECT


302 
	`__REDIRECT
 (
sˇndú©
,

303 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

304 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

305 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

306 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

307 
__c⁄°
 
dúít
 **)),

308 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

310 
	#sˇndú©
 
sˇndú©64


	)

316 
	`sˇndú©64
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

317 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

318 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

319 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

320 
__c⁄°
 
dúít64
 **))

321 
	`__n⁄nuŒ
 ((2, 3));

325 #i‚de‡
__USE_FILE_OFFSET64


326 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

327 
__c⁄°
 
dúít
 **
__e2
)

328 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

330 #ifde‡
__REDIRECT


331 
	`__REDIRECT_NTH
 (
Æphas‹t
,

332 (
__c⁄°
 
dúít
 **
__e1
,

333 
__c⁄°
 
dúít
 **
__e2
),

334 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 
	#Æphas‹t
 
Æphas‹t64


	)

340 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


341 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

342 
__c⁄°
 
dúít64
 **
__e2
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


353 #i‚de‡
__USE_FILE_OFFSET64


354 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

355 
size_t
 
__nbyãs
,

356 
__off_t
 *
__ª°ri˘
 
__ba£p
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

359 #ifde‡
__REDIRECT


360 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

361 (
__fd
, *
__ª°ri˘
 
__buf
,

362 
size_t
 
__nbyãs
,

363 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

364 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

366 
	#gëdúíåõs
 
gëdúíåõs64


	)

370 #ifde‡
__USE_LARGEFILE64


371 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

372 
size_t
 
__nbyãs
,

373 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

374 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

378 #ifde‡
__USE_GNU


380 #i‚de‡
__USE_FILE_OFFSET64


381 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

382 
__c⁄°
 
dúít
 **
__e2
)

383 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__REDIRECT


386 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

387 (
__c⁄°
 
dúít
 **
__e1
,

388 
__c⁄°
 
dúít
 **
__e2
),

389 
vîsi⁄s‹t64
)

390 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

392 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

396 #ifde‡
__USE_LARGEFILE64


397 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

398 
__c⁄°
 
dúít64
 **
__e2
)

399 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

403 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

313 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

314 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

315 #ñi‡!
__GNUC_PREREQ
 (4, 1)

316 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


317 #ñi‡
_FORTIFY_SOURCE
 > 1

318 
	#__USE_FORTIFY_LEVEL
 2

	)

320 
	#__USE_FORTIFY_LEVEL
 1

	)

323 #i‚de‡
__USE_FORTIFY_LEVEL


324 
	#__USE_FORTIFY_LEVEL
 0

	)

328 
	#__STDC_IEC_559__
 1

	)

329 
	#__STDC_IEC_559_COMPLEX__
 1

	)

332 
	#__STDC_ISO_10646__
 200009L

	)

340 #unde‡
__GNU_LIBRARY__


341 
	#__GNU_LIBRARY__
 6

	)

345 
	#__GLIBC__
 2

	)

346 
	#__GLIBC_MINOR__
 15

	)

348 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

349 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

352 #i‡
deföed
 
__GNUC__
 \

353 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

354 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

355 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

356 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

360 #i‚de‡
__ASSEMBLER__


361 #i‚de‡
_SYS_CDEFS_H


362 
	~<sys/cdefs.h
>

367 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


368 
	#__USE_LARGEFILE
 1

	)

369 
	#__USE_LARGEFILE64
 1

	)

375 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

376 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

377 && 
deföed
 
	g__exã∫_ölöe


378 
	#__USE_EXTERN_INLINES
 1

	)

386 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/patchkey.h

13 #i‚de‡
_LINUX_PATCHKEY_H_INDIRECT


17 #i‚de‡
_LINUX_PATCHKEY_H


18 
	#_LINUX_PATCHKEY_H


	)

21 
	~<ídün.h
>

23 #i‡
deföed
(
__BYTE_ORDER
)

24 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


25 
	#_PATCHKEY
(
id
Ë(0xfd00|id)

	)

26 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


27 
	#_PATCHKEY
(
id
Ë((id<<8)|0x00fd)

	)

	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 #ifde‡
__GNUC__


400 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

401 (
__exãnsi⁄__
 \

402 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

403 
__a
->
s6_addr32
[0] == 0 \

404 && 
__a
->
s6_addr32
[1] == 0 \

405 && 
__a
->
s6_addr32
[2] == 0 \

406 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

408 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

409 (
__exãnsi⁄__
 \

410 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

411 
__a
->
s6_addr32
[0] == 0 \

412 && 
__a
->
s6_addr32
[1] == 0 \

413 && 
__a
->
s6_addr32
[2] == 0 \

414 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

416 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

417 (
__exãnsi⁄__
 \

418 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

419 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

421 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

422 (
__exãnsi⁄__
 \

423 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

424 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

426 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

429 
__a
->
s6_addr32
[0] == 0 \

430 && 
__a
->
s6_addr32
[1] == 0 \

431 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

433 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

434 (
__exãnsi⁄__
 \

435 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

436 
__a
->
s6_addr32
[0] == 0 \

437 && 
__a
->
s6_addr32
[1] == 0 \

438 && 
__a
->
s6_addr32
[2] == 0 \

439 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

441 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

442 (
__exãnsi⁄__
 \

443 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

444 
__c⁄°
 
ö6_addr
 *
__b
 = (__c⁄° ö6_add∏*Ë(
b
); \

445 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

446 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

447 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

448 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

450 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

451 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

452 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

453 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

454 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

456 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

457 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

458 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

459 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

460 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

462 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

463 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

464 =
	`ht⁄l
 (0x„800000))

	)

466 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

467 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

468 =
	`ht⁄l
 (0x„c00000))

	)

470 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

471 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

472 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

473 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

475 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

476 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

477 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

478 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

479 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

481 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

482 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

483 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

484 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

485 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

488 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

490 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


492 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

495 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

496 
__THROW
;

500 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

501 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

502 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

504 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

505 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

506 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

508 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

509 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

510 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

512 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

513 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

514 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

516 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

517 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

518 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

521 #ifde‡
__USE_GNU


523 
	sö6_pktöfo


525 
ö6_addr
 
ùi6_addr
;

526 
ùi6_ifödex
;

530 
	sù6_mtuöfo


532 
sockaddr_ö6
 
ù6m_addr
;

533 
uöt32_t
 
ù6m_mtu
;

538 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

539 
__THROW
 
__©åibuã_dïªˇãd__
;

540 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

541 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

542 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

543 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

544 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

545 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

546 
__mu…x
, 
__∂usy
)

547 
__THROW
 
__©åibuã_dïªˇãd__
;

548 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

549 
uöt8_t
 **
__çåp
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

552 
uöt8_t
 **
__çåp
, 
__ty≥
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

557 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

558 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

559 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

560 **
__d©abuÂ
Ë
__THROW
;

561 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

562 
__THROW
;

563 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

564 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

565 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

566 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

567 **
__d©abuÂ
Ë
__THROW
;

568 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

569 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

570 **
__d©abuÂ
Ë
__THROW
;

571 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

572 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

577 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

578 
__£gmíts
Ë
__THROW
;

579 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

580 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

581 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

582 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

583 
__THROW
;

589 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

590 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

591 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

592 
__THROW
;

595 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

596 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

597 
uöt32_t
 
__num§c
,

598 
__c⁄°
 
ö_addr
 *
__¶i°
)

599 
__THROW
;

603 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

604 
__c⁄°
 
sockaddr
 *
__group
,

605 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

606 
uöt32_t
 *
__num§c
,

607 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

610 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

611 
__c⁄°
 
sockaddr
 *
__group
,

612 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

613 
uöt32_t
 
__num§c
,

614 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

617 
__END_DECLS


	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/sys/param.h

20 #i‚de‡
_SYS_PARAM_H


21 
	#_SYS_PARAM_H
 1

	)

23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<limôs.h
>

28 
	~<löux/limôs.h
>

29 
	~<löux/∑øm.h
>

32 #ifde‡
__undef_ARG_MAX


33 #unde‡
ARG_MAX


34 #unde‡
__undef_ARG_MAX


39 
	#NBBY
 
CHAR_BIT


	)

40 #i‚def 
NGROUPS


41 
	#NGROUPS
 
NGROUPS_MAX


	)

43 
	#MAXSYMLINKS
 20

	)

44 
	#CANBSIZ
 
MAX_CANON


	)

45 
	#MAXPATHLEN
 
PATH_MAX


	)

49 
	#NOFILE
 256

	)

50 
	#NCARGS
 131072

	)

53 
	~<sys/ty≥s.h
>

56 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

57 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

58 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

59 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

62 #i‚de‡
howm™y


63 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

65 #ifde‡
__GNUC__


66 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

67 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

68 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

70 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

72 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

75 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

76 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

80 
	#DEV_BSIZE
 512

	)

	@/usr/include/sys/poll.h

20 #i‚def 
_SYS_POLL_H


21 
	#_SYS_POLL_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/pﬁl.h
>

27 #ifde‡
__USE_GNU


29 
	~<bôs/sig£t.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

37 
	tnfds_t
;

40 
	spﬁlfd


42 
	mfd
;

43 
	mevíts
;

44 
	mªvíts
;

48 
__BEGIN_DECLS


58 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

60 #ifde‡
__USE_GNU


67 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

68 
__c⁄°
 
time•ec
 *
__timeout
,

69 
__c⁄°
 
__sig£t_t
 *
__ss
);

72 
	g__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


60 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

61 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

62 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

69 #ifde‡
__USE_XOPEN


70 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

71 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

73 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

74 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

76 } 
	tfd_£t
;

79 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

81 #ifde‡
__USE_MISC


83 
__fd_mask
 
	tfd_mask
;

86 
	#NFDBITS
 
__NFDBITS


	)

91 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

92 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

93 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

94 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

97 
__BEGIN_DECLS


107 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

108 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

109 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

110 
timevÆ
 *
__ª°ri˘
 
__timeout
);

112 #ifde‡
__USE_XOPEN2K


119 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

120 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

121 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

122 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

123 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


129 
	~<bôs/£À˘2.h
>

132 
	g__END_DECLS


	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asterisk/buildopts.h

6 
	#RADIO_RELAX
 1

	)

7 
	#LOADABLE_MODULES
 1

	)

8 
	#AST_BUILDOPT_SUM
 "5e1b415758be10e862e1496edef4d5d7"

	)

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/dirent.h

19 #i‚de‡
_DIRENT_H


23 
	sdúít


25 #i‚de‡
__USE_FILE_OFFSET64


26 
__öo_t
 
	md_öo
;

27 
__off_t
 
	md_off
;

29 
__öo64_t
 
	md_öo
;

30 
__off64_t
 
	md_off
;

32 
	md_ª˛í
;

33 
	md_ty≥
;

34 
	md_«me
[256];

37 #ifde‡
__USE_LARGEFILE64


38 
	sdúít64


40 
__öo64_t
 
	md_öo
;

41 
__off64_t
 
	md_off
;

42 
	md_ª˛í
;

43 
	md_ty≥
;

44 
	md_«me
[256];

48 
	#d_fûío
 
d_öo


	)

50 #unde‡
_DIRENT_HAVE_D_NAMLEN


51 
	#_DIRENT_HAVE_D_RECLEN


	)

52 
	#_DIRENT_HAVE_D_OFF


	)

53 
	#_DIRENT_HAVE_D_TYPE


	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


47 
	#MCAST_JOIN_GROUP
 42

	)

48 
	#MCAST_BLOCK_SOURCE
 43

	)

49 
	#MCAST_UNBLOCK_SOURCE
 44

	)

50 
	#MCAST_LEAVE_GROUP
 45

	)

51 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

52 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

53 
	#MCAST_MSFILTER
 48

	)

55 
	#MCAST_EXCLUDE
 0

	)

56 
	#MCAST_INCLUDE
 1

	)

59 
	#IP_ROUTER_ALERT
 5

	)

60 
	#IP_PKTINFO
 8

	)

61 
	#IP_PKTOPTIONS
 9

	)

62 
	#IP_PMTUDISC
 10

	)

63 
	#IP_MTU_DISCOVER
 10

	)

64 
	#IP_RECVERR
 11

	)

65 
	#IP_RECVTTL
 12

	)

66 
	#IP_RECVTOS
 13

	)

67 
	#IP_MTU
 14

	)

68 
	#IP_FREEBIND
 15

	)

69 
	#IP_IPSEC_POLICY
 16

	)

70 
	#IP_XFRM_POLICY
 17

	)

71 
	#IP_PASSSEC
 18

	)

72 
	#IP_TRANSPARENT
 19

	)

73 
	#IP_MULTICAST_ALL
 49

	)

76 
	#IP_ORIGDSTADDR
 20

	)

77 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

79 
	#IP_MINTTL
 21

	)

83 
	#IP_PMTUDISC_DONT
 0

	)

84 
	#IP_PMTUDISC_WANT
 1

	)

85 
	#IP_PMTUDISC_DO
 2

	)

86 
	#IP_PMTUDISC_PROBE
 3

	)

89 
	#SOL_IP
 0

	)

91 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

92 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

93 
	#IP_MAX_MEMBERSHIPS
 20

	)

95 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


99 
	sù_›ts


101 
ö_addr
 
	mù_d°
;

102 
	mù_›ts
[40];

106 
	sù_mªqn


108 
ö_addr
 
	mimr_mu…üddr
;

109 
ö_addr
 
	mimr_addªss
;

110 
	mimr_ifödex
;

114 
	sö_pktöfo


116 
	mùi_ifödex
;

117 
ö_addr
 
	mùi_•ec_d°
;

118 
ö_addr
 
	mùi_addr
;

125 
	#IPV6_ADDRFORM
 1

	)

126 
	#IPV6_2292PKTINFO
 2

	)

127 
	#IPV6_2292HOPOPTS
 3

	)

128 
	#IPV6_2292DSTOPTS
 4

	)

129 
	#IPV6_2292RTHDR
 5

	)

130 
	#IPV6_2292PKTOPTIONS
 6

	)

131 
	#IPV6_CHECKSUM
 7

	)

132 
	#IPV6_2292HOPLIMIT
 8

	)

134 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

136 
	#IPV6_NEXTHOP
 9

	)

137 
	#IPV6_AUTHHDR
 10

	)

138 
	#IPV6_UNICAST_HOPS
 16

	)

139 
	#IPV6_MULTICAST_IF
 17

	)

140 
	#IPV6_MULTICAST_HOPS
 18

	)

141 
	#IPV6_MULTICAST_LOOP
 19

	)

142 
	#IPV6_JOIN_GROUP
 20

	)

143 
	#IPV6_LEAVE_GROUP
 21

	)

144 
	#IPV6_ROUTER_ALERT
 22

	)

145 
	#IPV6_MTU_DISCOVER
 23

	)

146 
	#IPV6_MTU
 24

	)

147 
	#IPV6_RECVERR
 25

	)

148 
	#IPV6_V6ONLY
 26

	)

149 
	#IPV6_JOIN_ANYCAST
 27

	)

150 
	#IPV6_LEAVE_ANYCAST
 28

	)

151 
	#IPV6_IPSEC_POLICY
 34

	)

152 
	#IPV6_XFRM_POLICY
 35

	)

154 
	#IPV6_RECVPKTINFO
 49

	)

155 
	#IPV6_PKTINFO
 50

	)

156 
	#IPV6_RECVHOPLIMIT
 51

	)

157 
	#IPV6_HOPLIMIT
 52

	)

158 
	#IPV6_RECVHOPOPTS
 53

	)

159 
	#IPV6_HOPOPTS
 54

	)

160 
	#IPV6_RTHDRDSTOPTS
 55

	)

161 
	#IPV6_RECVRTHDR
 56

	)

162 
	#IPV6_RTHDR
 57

	)

163 
	#IPV6_RECVDSTOPTS
 58

	)

164 
	#IPV6_DSTOPTS
 59

	)

166 
	#IPV6_RECVTCLASS
 66

	)

167 
	#IPV6_TCLASS
 67

	)

170 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

171 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

172 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

173 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

176 
	#IPV6_PMTUDISC_DONT
 0

	)

177 
	#IPV6_PMTUDISC_WANT
 1

	)

178 
	#IPV6_PMTUDISC_DO
 2

	)

179 
	#IPV6_PMTUDISC_PROBE
 3

	)

182 
	#SOL_IPV6
 41

	)

183 
	#SOL_ICMPV6
 58

	)

186 
	#IPV6_RTHDR_LOOSE
 0

	)

187 
	#IPV6_RTHDR_STRICT
 1

	)

189 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/netdb.h

19 #i‚de‡
_NETDB_H


27 
	s√ã¡


29 *
	mn_«me
;

30 **
	mn_Æü£s
;

31 
	mn_addπy≥
;

32 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/poll.h

19 #i‚de‡
_SYS_POLL_H


26 
	#POLLIN
 0x001

	)

27 
	#POLLPRI
 0x002

	)

28 
	#POLLOUT
 0x004

	)

30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


32 
	#POLLRDNORM
 0x040

	)

33 
	#POLLRDBAND
 0x080

	)

34 
	#POLLWRNORM
 0x100

	)

35 
	#POLLWRBAND
 0x200

	)

38 #ifde‡
__USE_GNU


40 
	#POLLMSG
 0x400

	)

41 
	#POLLREMOVE
 0x1000

	)

42 
	#POLLRDHUP
 0x2000

	)

48 
	#POLLERR
 0x008

	)

49 
	#POLLHUP
 0x010

	)

50 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
) \

60 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

61 
	#__FD_CLR
(
d
, 
£t
) \

62 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

63 
	#__FD_ISSET
(
d
, 
£t
) \

64 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

20 #i‚de‡
_SYS_SELECT_H


25 
__fdñt_chk
 (
__d
);

26 
	$__fdñt_w¨n
 (
__d
)

27 
	`__w¨«âr
 ("bit outside of fd_set selected");

28 #unde‡
__FD_ELT


29 
	#__FD_ELT
(
d
) \

30 
__exãnsi⁄__
 \

31 ({ 
__d
 = (
d
); \

32 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

33 ? (
__d
 >
__FD_SETSIZE
 \

34 ? 
	`__fdñt_w¨n
 (
__d
Ë: (__d / 
__NFDBITS
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/timex.h

19 #i‚def 
_BITS_TIMEX_H


20 
	#_BITS_TIMEX_H
 1

	)

24 
	stimex


26 
	mmodes
;

27 
	moff£t
;

28 
	m‰eq
;

29 
	mmaxîr‹
;

30 
	me°îr‹
;

31 
	m°©us
;

32 
	mc⁄°™t
;

33 
	m¥ecisi⁄
;

34 
	mtﬁî™˚
;

35 
timevÆ
 
	mtime
;

36 
	mtick
;

38 
	mµs‰eq
;

39 
	mjôãr
;

40 
	mshi·
;

41 
	m°abû
;

42 
	mjô˙t
;

43 
	mˇl˙t
;

44 
	mîr˙t
;

45 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

52 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


53 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

55 
__BEGIN_DECLS


58 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, 
__c⁄°
 
iovec
 *
__lvec
,

59 
__liov˙t
,

60 
__c⁄°
 
iovec
 *
__rvec
,

61 
__riov˙t
,

62 
__Êags
)

63 
__THROW
;

66 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, 
__c⁄°
 
iovec
 *
__lvec
,

67 
__liov˙t
,

68 
__c⁄°
 
iovec
 *
__rvec
,

69 
__riov˙t
,

70 
__Êags
)

71 
__THROW
;

73 
__END_DECLS


	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/strings.h

20 #i‚def 
_STRINGS_H


21 
	#_STRINGS_H
 1

	)

26 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


28 
	~<„©uªs.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

33 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

34 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

37 
	g__BEGIN_DECLS


39 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


41 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

42 
__THROW
 
__©åibuã_puª__
;

45 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

48 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

51 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


54 *
	`ödex
 (*
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

56 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

59 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


60 
__exã∫_Æways_ölöe
 *

61 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
__exã∫_Æways_ölöe
 
__c⁄°
 *

67 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


69  
	`__buûtö_ödex
 (
__s
, 
__c
);

72 
	}
}

74 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

75 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


82 *
	`rödex
 (*
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

84 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

87 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


88 
__exã∫_Æways_ölöe
 *

89 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
__exã∫_Æways_ölöe
 
__c⁄°
 *

95 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


97  
	`__buûtö_rödex
 (
__s
, 
__c
);

100 
	}
}

102 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


110 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

114 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

115 
__THROW
 
__©åibuã_puª__
;

118 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

119 
__THROW
 
__©åibuã_puª__
;

121 #ifdef 
__USE_XOPEN2K8


125 
	~<xloˇÀ.h
>

129 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

130 
__loˇÀ_t
 
__loc
)

131 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

134 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


44 
	#__LEAF
 , 
__Àaf__


	)

45 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

47 
	#__LEAF


	)

48 
	#__LEAF_ATTR


	)

56 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

57 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

58 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

59 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

61 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

62 
	#__THROW
 
	`throw
 ()

	)

63 
	#__THROWNL
 
	`throw
 ()

	)

64 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

66 
	#__THROW


	)

67 
	#__THROWNL


	)

68 
	#__NTH
(
f˘
Ë
	)
fct

74 
	#__ölöe


	)

76 
	#__THROW


	)

77 
	#__THROWNL


	)

78 
	#__NTH
(
f˘
Ë
	)
fct

80 
	#__c⁄°
 c⁄°

	)

81 
	#__sig√d
 sig√d

	)

82 
	#__vﬁ©ûe
 vﬁ©ûe

	)

88 
	#__P
(
¨gs
Ë
	)
args

89 
	#__PMT
(
¨gs
Ë
	)
args

94 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

95 
	#__STRING
(
x
Ë#x

	)

98 
	#__±r_t
 *

	)

99 
	#__l⁄g_doubÀ_t
 

	)

103 #ifdef 
__˝lu•lus


104 
	#__BEGIN_DECLS
 "C" {

	)

105 
	#__END_DECLS
 }

	)

107 
	#__BEGIN_DECLS


	)

108 
	#__END_DECLS


	)

117 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


118 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

119 
	#__END_NAMESPACE_STD
 }

	)

120 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

121 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

122 
	#__END_NAMESPACE_C99
 }

	)

123 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

128 
	#__BEGIN_NAMESPACE_STD


	)

129 
	#__END_NAMESPACE_STD


	)

130 
	#__USING_NAMESPACE_STD
(
«me
)

	)

131 
	#__BEGIN_NAMESPACE_C99


	)

132 
	#__END_NAMESPACE_C99


	)

133 
	#__USING_NAMESPACE_C99
(
«me
)

	)

138 #i‚de‡
__BOUNDED_POINTERS__


139 
	#__bounded


	)

140 
	#__unbounded


	)

141 
	#__±rvÆue


	)

146 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

147 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

149 #i‡
__GNUC_PREREQ
 (4,3) \

150 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
	g__GNUC__
 == 4 \

151 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

152 && 
__GNUC_RH_RELEASE__
 >= 31)

153 
	#__w¨nde˛
(
«me
, 
msg
) \

154 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

155 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

156 
	#__îr‹de˛
(
«me
, 
msg
) \

157 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

159 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

160 
	#__w¨«âr
(
msg
)

	)

161 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

165 #i‡
__GNUC_PREREQ
 (2,97)

167 
	#__Êex¨r
 []

	)

169 #ifde‡
__GNUC__


170 
	#__Êex¨r
 [0]

	)

172 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

173 
	#__Êex¨r
 []

	)

176 
	#__Êex¨r
 [1]

	)

192 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

194 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

195 #ifde‡
__˝lu•lus


196 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

197 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

198 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

199 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

201 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

202 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

203 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

204 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

206 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

207 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

220 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

221 
	#__©åibuã__
(
xyz
Ë

	)

227 #i‡
__GNUC_PREREQ
 (2,96)

228 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

230 
	#__©åibuã_mÆloc__


	)

236 #i‡
__GNUC_PREREQ
 (2,96)

237 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

239 
	#__©åibuã_puª__


	)

243 #i‡
__GNUC_PREREQ
 (2,5)

244 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

246 
	#__©åibuã_c⁄°__


	)

252 #i‡
__GNUC_PREREQ
 (3,1)

253 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

254 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

256 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

257 
	#__©åibuã_noölöe__


	)

261 #i‡
__GNUC_PREREQ
 (3,2)

262 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

264 
	#__©åibuã_dïªˇãd__


	)

273 #i‡
__GNUC_PREREQ
 (2,8)

274 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

276 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

283 #i‡
__GNUC_PREREQ
 (2,97)

284 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

285 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

287 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

292 #i‡
__GNUC_PREREQ
 (3,3)

293 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

295 
	#__n⁄nuŒ
(
∑øms
)

	)

300 #i‡
__GNUC_PREREQ
 (3,4)

301 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

302 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

303 #i‡
__USE_FORTIFY_LEVEL
 > 0

304 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

307 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

309 #i‚de‡
__wur


310 
	#__wur


	)

314 #i‡
__GNUC_PREREQ
 (3,2)

315 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

317 
	#__Æways_ölöe
 
__ölöe


	)

322 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

323 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

324 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

325 && 
__GNUC_RH_RELEASE__
 >= 31)

326 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


327 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

328 #i‡
__GNUC_PREREQ
 (4,3) \

329 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

330 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

331 && 
__GNUC_RH_RELEASE__
 >= 31)

332 
	#__exã∫_Æways_ölöe
 \

333 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

335 
	#__exã∫_Æways_ölöe
 \

336 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

339 
	#__exã∫_ölöe
 
__ölöe


	)

340 #i‡
__GNUC_PREREQ
 (4,3)

341 
	#__exã∫_Æways_ölöe
 \

342 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

344 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

351 #i‡
__GNUC_PREREQ
 (4,3) \

352 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

353 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

354 && 
__GNUC_RH_RELEASE__
 >= 31)

355 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

356 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

363 #i‡!
__GNUC_PREREQ
 (2,8)

364 
	#__exãnsi⁄__


	)

368 #i‡!
__GNUC_PREREQ
 (2,92)

369 
	#__ª°ri˘


	)

375 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


376 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

378 #ifde‡
__GNUC__


379 
	#__ª°ri˘_¨r


	)

381 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

382 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

385 
	#__ª°ri˘_¨r


	)

390 
	~<bôs/w‹dsize.h
>

392 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


393 
	#__LDBL_COMPAT
 1

	)

394 #ifde‡
__REDIRECT


395 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

396 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

397 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

398 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

399 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

400 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

401 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

402 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

403 
	#__LDBL_REDIR_DECL
(
«me
) \

404 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

405 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

406 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

407 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

408 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

411 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


412 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

413 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

414 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

415 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

416 
	#__LDBL_REDIR_DECL
(
«me
)

	)

417 #ifde‡
__REDIRECT


418 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

419 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

420 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/socket.h

21 #i‚def 
_SYS_SOCKET_H


22 
	#_SYS_SOCKET_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


28 
	~<sys/uio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

31 #ifde‡
__USE_GNU


33 
	~<bôs/sig£t.h
>

40 
	~<bôs/sockë.h
>

42 #ifde‡
__USE_BSD


45 
	sosockaddr


47 
	mß_Ámûy
;

48 
	mß_d©a
[14];

56 
	mSHUT_RD
 = 0,

57 
	#SHUT_RD
 
SHUT_RD


	)

58 
	mSHUT_WR
,

59 
	#SHUT_WR
 
SHUT_WR


	)

60 
	mSHUT_RDWR


61 
	#SHUT_RDWR
 
SHUT_RDWR


	)

70 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


71 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

72 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

76 
	#__SOCKADDR_ALLTYPES
 \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

89 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

91 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

92 uni⁄ { 
	m__SOCKADDR_ALLTYPES


93 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

94 #unde‡
__SOCKADDR_ONETYPE


95 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

96 uni⁄ { 
	m__SOCKADDR_ALLTYPES


97 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

98 #unde‡
__SOCKADDR_ONETYPE


105 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

111 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

112 
__fds
[2]Ë
__THROW
;

115 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

116 
__THROW
;

119 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

120 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

129 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

133 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

134 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

141 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

148 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

155 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

156 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

157 
sockÀn_t
 
__addr_Àn
);

166 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

167 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

168 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

176 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

177 
__Êags
);

184 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

190 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

191 *
__ª°ri˘
 
__›tvÆ
,

192 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

197 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

198 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

204 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

214 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

215 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

217 #ifde‡
__USE_GNU


222 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

223 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

232 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

235 #ifde‡
__USE_XOPEN2K


237 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

241 #ifde‡
__USE_MISC


245 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


251 
	~<bôs/sockë2.h
>

254 
__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

149 #ñi‡
deföed
 
__USE_XOPEN2K


150 
	#S_ISSOCK
(
mode
Ë0

	)

157 #ifdef 
__USE_POSIX199309


158 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

159 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

160 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

166 
	#S_ISUID
 
__S_ISUID


	)

167 
	#S_ISGID
 
__S_ISGID


	)

169 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


171 
	#S_ISVTX
 
__S_ISVTX


	)

174 
	#S_IRUSR
 
__S_IREAD


	)

175 
	#S_IWUSR
 
__S_IWRITE


	)

176 
	#S_IXUSR
 
__S_IEXEC


	)

178 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

180 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


181 
	#S_IREAD
 
S_IRUSR


	)

182 
	#S_IWRITE
 
S_IWUSR


	)

183 
	#S_IEXEC
 
S_IXUSR


	)

186 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

187 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

188 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

190 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

192 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

193 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

194 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

196 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

199 #ifdef 
__USE_BSD


201 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

202 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

203 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

205 
	#S_BLKSIZE
 512

	)

209 #i‚de‡
__USE_FILE_OFFSET64


211 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

212 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

216 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

218 #ifde‡
__REDIRECT_NTH


219 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

220 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

221 
	`__n⁄nuŒ
 ((1, 2));

222 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

223 
	`__n⁄nuŒ
 ((2));

225 
	#°©
 
°©64


	)

226 
	#f°©
 
f°©64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

231 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

232 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

235 #ifde‡
__USE_ATFILE


239 #i‚de‡
__USE_FILE_OFFSET64


240 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

241 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

242 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

244 #ifde‡
__REDIRECT_NTH


245 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

246 
°©
 *
__ª°ri˘
 
__buf
,

247 
__Êag
),

248 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

250 
	#f°©©
 
f°©©64


	)

254 #ifde‡
__USE_LARGEFILE64


255 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

256 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

257 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

261 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


262 #i‚de‡
__USE_FILE_OFFSET64


265 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

266 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

268 #ifde‡
__REDIRECT_NTH


269 
	`__REDIRECT_NTH
 (
l°©
,

270 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

271 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 
	#l°©
 
l°©64


	)

277 #ifde‡
__USE_LARGEFILE64


278 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

279 
°©64
 *
__ª°ri˘
 
__buf
)

280 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_BSD


293 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


299 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

302 #ifde‡
__USE_ATFILE


305 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

306 
__Êag
)

307 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

314 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

316 #ifdef 
__USE_GNU


319 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

323 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

326 #ifde‡
__USE_ATFILE


330 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

331 
__THROW
 
	`__n⁄nuŒ
 ((2));

337 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


338 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1));

341 #ifde‡
__USE_ATFILE


345 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

346 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

352 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_ATFILE


359 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

360 
__THROW
 
	`__n⁄nuŒ
 ((2));

363 #ifde‡
__USE_ATFILE


366 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

367 
__c⁄°
 
time•ec
 
__times
[2],

368 
__Êags
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2));

372 #ifde‡
__USE_XOPEN2K8


374 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

392 #i‚de‡
_STAT_VER


393 
	#_STAT_VER
 0

	)

395 #i‚de‡
_MKNOD_VER


396 
	#_MKNOD_VER
 0

	)

400 #i‚de‡
__USE_FILE_OFFSET64


401 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

402 
__THROW
 
	`__n⁄nuŒ
 ((3));

403 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

407 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

408 
°©
 *
__°©_buf
, 
__Êag
)

409 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

411 #ifde‡
__REDIRECT_NTH


412 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

413 
°©
 *
__°©_buf
), 
__fx°©64
)

414 
	`__n⁄nuŒ
 ((3));

415 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__x°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

419 
°©
 *
__°©_buf
), 
__lx°©64
)

420 
	`__n⁄nuŒ
 ((2, 3));

421 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

422 
__c⁄°
 *
__fûíame
,

423 
°©
 *
__°©_buf
, 
__Êag
),

424 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

427 
	#__fx°©
 
__fx°©64


	)

428 
	#__x°©
 
__x°©64


	)

429 
	#__lx°©
 
__lx°©64


	)

433 #ifde‡
__USE_LARGEFILE64


434 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

435 
__THROW
 
	`__n⁄nuŒ
 ((3));

436 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

441 
°©64
 *
__°©_buf
, 
__Êag
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

444 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

445 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

447 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

448 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

449 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

451 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


454 
__exã∫_ölöe
 

455 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

457  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

458 
	}
}

460 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 
__exã∫_ölöe
 

462 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

464  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

465 
	}
}

468 
__exã∫_ölöe
 

469 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

471  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

472 
	}
}

474 #ifde‡
__USE_ATFILE


475 
__exã∫_ölöe
 

476 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

477 
__Êag
))

479  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

480 
	}
}

483 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


484 
__exã∫_ölöe
 

485 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

487  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

488 
	}
}

491 #ifde‡
__USE_ATFILE


492 
__exã∫_ölöe
 

493 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

494 
__dev_t
 
__dev
))

496  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

497 
	}
}

500 #i‡
deföed
 
__USE_LARGEFILE64
 \

501 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

502 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

503 
__exã∫_ölöe
 

504 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

506  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

507 
	}
}

509 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


510 
__exã∫_ölöe
 

511 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

513  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

514 
	}
}

517 
__exã∫_ölöe
 

518 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

520  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

521 
	}
}

523 #ifde‡
__USE_ATFILE


524 
__exã∫_ölöe
 

525 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

526 
__Êag
))

528  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

529 
	}
}

536 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__BEGIN_DECLS


32 
__exãnsi⁄__


33 
	$gnu_dev_maj‹
 (
__dev
)

34 
__THROW
 
__©åibuã_c⁄°__
;

35 
__exãnsi⁄__


36 
	$gnu_dev_mö‹
 (
__dev
)

37 
__THROW
 
__©åibuã_c⁄°__
;

38 
__exãnsi⁄__


39 
	$gnu_dev_makedev
 (
__maj‹
,

40 
__mö‹
)

41 
__THROW
 
__©åibuã_c⁄°__
;

43 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

47  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

53  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

54 
	}
}

56 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

57 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

59  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

60 | (((Ë(
__mö‹
 & ~0xff)) << 12)

61 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

62 
	}
}

64 
	g__END_DECLS


67 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

68 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

69 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

78 
	#FIONCLEX
 0x5450

	)

79 
	#FIOCLEX
 0x5451

	)

80 
	#FIOASYNC
 0x5452

	)

81 
	#TIOCSERCONFIG
 0x5453

	)

82 
	#TIOCSERGWILD
 0x5454

	)

83 
	#TIOCSERSWILD
 0x5455

	)

84 
	#TIOCGLCKTRMIOS
 0x5456

	)

85 
	#TIOCSLCKTRMIOS
 0x5457

	)

86 
	#TIOCSERGSTRUCT
 0x5458

	)

87 
	#TIOCSERGETLSR
 0x5459

	)

88 
	#TIOCSERGETMULTI
 0x545A

	)

89 
	#TIOCSERSETMULTI
 0x545B

	)

91 
	#TIOCMIWAIT
 0x545C

	)

92 
	#TIOCGICOUNT
 0x545D

	)

98 #i‚de‡
FIOQSIZE


99 
	#FIOQSIZE
 0x5460

	)

103 
	#TIOCPKT_DATA
 0

	)

104 
	#TIOCPKT_FLUSHREAD
 1

	)

105 
	#TIOCPKT_FLUSHWRITE
 2

	)

106 
	#TIOCPKT_STOP
 4

	)

107 
	#TIOCPKT_START
 8

	)

108 
	#TIOCPKT_NOSTOP
 16

	)

109 
	#TIOCPKT_DOSTOP
 32

	)

110 
	#TIOCPKT_IOCTL
 64

	)

112 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_GNU


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_GNU


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

97 
__END_DECLS


101 #i‡!
deföed
 
__deföed_sched∑øm
 \

102 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

103 
	#__deföed_sched∑øm
 1

	)

105 
	s__sched_∑øm


107 
__sched_¥i‹ôy
;

109 #unde‡
__√ed_sched∑øm


113 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


114 
	#__˝u_£t_t_deföed


	)

116 
	#__CPU_SETSIZE
 1024

	)

117 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

120 
	t__˝u_mask
;

123 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

124 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

129 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

130 } 
	t˝u_£t_t
;

133 #i‡
	`__GNUC_PREREQ
 (2, 91)

134 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

137 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

139 
size_t
 
__i
; \

140 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

141 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

142 
__i
 = 0; __ò< 
__imax
; ++__i) \

143 
__bôs
[
__i
] = 0; \

144 
	}
} 0)

	)

146 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

147 (
__exãnsi⁄__
 \

148 ({ 
size_t
 
__˝u
 = (
˝u
); \

149 
__˝u
 < 8 * (
£tsize
) \

150 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

151 |
	`__CPUMASK
 (
__˝u
)) \

152 : 0; }))

	)

153 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

154 (
__exãnsi⁄__
 \

155 ({ 
size_t
 
__˝u
 = (
˝u
); \

156 
__˝u
 < 8 * (
£tsize
) \

157 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

158 &~
	`__CPUMASK
 (
__˝u
)) \

159 : 0; }))

	)

160 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

161 (
__exãnsi⁄__
 \

162 ({ 
size_t
 
__˝u
 = (
˝u
); \

163 
__˝u
 < 8 * (
£tsize
) \

164 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

165 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

166 : 0; }))

	)

168 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

169 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

171 #i‡
__GNUC_PREREQ
 (2, 91)

172 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

173 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

175 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

176 (
__exãnsi⁄__
 \

177 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

178 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

179 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

180 
size_t
 
__i
; \

181 
__i
 = 0; __ò< 
__imax
; ++__i) \

182 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

184 
__i
 =
__imax
; }))

	)

187 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

188 (
__exãnsi⁄__
 \

189 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

190 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

191 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

192 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

193 
size_t
 
__i
; \

194 
__i
 = 0; __ò< 
__imax
; ++__i) \

195 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

196 
__de°
; }))

	)

198 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

199 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

200 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

201 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

203 
__BEGIN_DECLS


205 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

206 
__THROW
;

207 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

208 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

210 
__END_DECLS


	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

61 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


62 
	#SA_RESTART
 0x10000000

	)

63 
	#SA_NODEFER
 0x40000000

	)

65 
	#SA_RESETHAND
 0x80000000

	)

67 #ifde‡
__USE_MISC


68 
	#SA_INTERRUPT
 0x20000000

	)

71 
	#SA_NOMASK
 
SA_NODEFER


	)

72 
	#SA_ONESHOT
 
SA_RESETHAND


	)

73 
	#SA_STACK
 
SA_ONSTACK


	)

77 
	#SIG_BLOCK
 0

	)

78 
	#SIG_UNBLOCK
 1

	)

79 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/socket.h

21 #i‚de‡
__BITS_SOCKET_H


22 
	#__BITS_SOCKET_H


	)

24 #i‚de‡
_SYS_SOCKET_H


28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

34 #i‚de‡
__sockÀn_t_deföed


35 
__sockÀn_t
 
	tsockÀn_t
;

36 
	#__sockÀn_t_deföed


	)

40 
	e__sockë_ty≥


42 
	mSOCK_STREAM
 = 1,

44 
	#SOCK_STREAM
 
SOCK_STREAM


	)

45 
	mSOCK_DGRAM
 = 2,

47 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

48 
	mSOCK_RAW
 = 3,

49 
	#SOCK_RAW
 
SOCK_RAW


	)

50 
	mSOCK_RDM
 = 4,

51 
	#SOCK_RDM
 
SOCK_RDM


	)

52 
	mSOCK_SEQPACKET
 = 5,

54 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

55 
	mSOCK_DCCP
 = 6,

56 
	#SOCK_DCCP
 
SOCK_DCCP


	)

57 
	mSOCK_PACKET
 = 10,

60 
	#SOCK_PACKET
 
SOCK_PACKET


	)

65 
	mSOCK_CLOEXEC
 = 02000000,

67 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

68 
	mSOCK_NONBLOCK
 = 04000

70 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

74 
	#PF_UNSPEC
 0

	)

75 
	#PF_LOCAL
 1

	)

76 
	#PF_UNIX
 
PF_LOCAL


	)

77 
	#PF_FILE
 
PF_LOCAL


	)

78 
	#PF_INET
 2

	)

79 
	#PF_AX25
 3

	)

80 
	#PF_IPX
 4

	)

81 
	#PF_APPLETALK
 5

	)

82 
	#PF_NETROM
 6

	)

83 
	#PF_BRIDGE
 7

	)

84 
	#PF_ATMPVC
 8

	)

85 
	#PF_X25
 9

	)

86 
	#PF_INET6
 10

	)

87 
	#PF_ROSE
 11

	)

88 
	#PF_DEC√t
 12

	)

89 
	#PF_NETBEUI
 13

	)

90 
	#PF_SECURITY
 14

	)

91 
	#PF_KEY
 15

	)

92 
	#PF_NETLINK
 16

	)

93 
	#PF_ROUTE
 
PF_NETLINK


	)

94 
	#PF_PACKET
 17

	)

95 
	#PF_ASH
 18

	)

96 
	#PF_ECONET
 19

	)

97 
	#PF_ATMSVC
 20

	)

98 
	#PF_RDS
 21

	)

99 
	#PF_SNA
 22

	)

100 
	#PF_IRDA
 23

	)

101 
	#PF_PPPOX
 24

	)

102 
	#PF_WANPIPE
 25

	)

103 
	#PF_LLC
 26

	)

104 
	#PF_CAN
 29

	)

105 
	#PF_TIPC
 30

	)

106 
	#PF_BLUETOOTH
 31

	)

107 
	#PF_IUCV
 32

	)

108 
	#PF_RXRPC
 33

	)

109 
	#PF_ISDN
 34

	)

110 
	#PF_PHONET
 35

	)

111 
	#PF_IEEE802154
 36

	)

112 
	#PF_CAIF
 37

	)

113 
	#PF_ALG
 38

	)

114 
	#PF_NFC
 39

	)

115 
	#PF_MAX
 40

	)

118 
	#AF_UNSPEC
 
PF_UNSPEC


	)

119 
	#AF_LOCAL
 
PF_LOCAL


	)

120 
	#AF_UNIX
 
PF_UNIX


	)

121 
	#AF_FILE
 
PF_FILE


	)

122 
	#AF_INET
 
PF_INET


	)

123 
	#AF_AX25
 
PF_AX25


	)

124 
	#AF_IPX
 
PF_IPX


	)

125 
	#AF_APPLETALK
 
PF_APPLETALK


	)

126 
	#AF_NETROM
 
PF_NETROM


	)

127 
	#AF_BRIDGE
 
PF_BRIDGE


	)

128 
	#AF_ATMPVC
 
PF_ATMPVC


	)

129 
	#AF_X25
 
PF_X25


	)

130 
	#AF_INET6
 
PF_INET6


	)

131 
	#AF_ROSE
 
PF_ROSE


	)

132 
	#AF_DEC√t
 
PF_DEC√t


	)

133 
	#AF_NETBEUI
 
PF_NETBEUI


	)

134 
	#AF_SECURITY
 
PF_SECURITY


	)

135 
	#AF_KEY
 
PF_KEY


	)

136 
	#AF_NETLINK
 
PF_NETLINK


	)

137 
	#AF_ROUTE
 
PF_ROUTE


	)

138 
	#AF_PACKET
 
PF_PACKET


	)

139 
	#AF_ASH
 
PF_ASH


	)

140 
	#AF_ECONET
 
PF_ECONET


	)

141 
	#AF_ATMSVC
 
PF_ATMSVC


	)

142 
	#AF_RDS
 
PF_RDS


	)

143 
	#AF_SNA
 
PF_SNA


	)

144 
	#AF_IRDA
 
PF_IRDA


	)

145 
	#AF_PPPOX
 
PF_PPPOX


	)

146 
	#AF_WANPIPE
 
PF_WANPIPE


	)

147 
	#AF_LLC
 
PF_LLC


	)

148 
	#AF_CAN
 
PF_CAN


	)

149 
	#AF_TIPC
 
PF_TIPC


	)

150 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

151 
	#AF_IUCV
 
PF_IUCV


	)

152 
	#AF_RXRPC
 
PF_RXRPC


	)

153 
	#AF_ISDN
 
PF_ISDN


	)

154 
	#AF_PHONET
 
PF_PHONET


	)

155 
	#AF_IEEE802154
 
PF_IEEE802154


	)

156 
	#AF_CAIF
 
PF_CAIF


	)

157 
	#AF_ALG
 
PF_ALG


	)

158 
	#AF_NFC
 
PF_NFC


	)

159 
	#AF_MAX
 
PF_MAX


	)

165 
	#SOL_RAW
 255

	)

166 
	#SOL_DECNET
 261

	)

167 
	#SOL_X25
 262

	)

168 
	#SOL_PACKET
 263

	)

169 
	#SOL_ATM
 264

	)

170 
	#SOL_AAL
 265

	)

171 
	#SOL_IRDA
 266

	)

174 
	#SOMAXCONN
 128

	)

177 
	~<bôs/sockaddr.h
>

180 
	ssockaddr


182 
__SOCKADDR_COMMON
 (
ß_
);

183 
	mß_d©a
[14];

189 
	#__ss_Æig¡y≥
 

	)

190 
	#_SS_SIZE
 128

	)

191 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

193 
	ssockaddr_°‹age


195 
__SOCKADDR_COMMON
 (
ss_
);

196 
__ss_Æig¡y≥
 
	m__ss_Æign
;

197 
	m__ss_∑ddög
[
_SS_PADSIZE
];

204 
	mMSG_OOB
 = 0x01,

205 
	#MSG_OOB
 
MSG_OOB


	)

206 
	mMSG_PEEK
 = 0x02,

207 
	#MSG_PEEK
 
MSG_PEEK


	)

208 
	mMSG_DONTROUTE
 = 0x04,

209 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

210 #ifde‡
__USE_GNU


212 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

213 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

215 
	mMSG_CTRUNC
 = 0x08,

216 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

217 
	mMSG_PROXY
 = 0x10,

218 
	#MSG_PROXY
 
MSG_PROXY


	)

219 
	mMSG_TRUNC
 = 0x20,

220 
	#MSG_TRUNC
 
MSG_TRUNC


	)

221 
	mMSG_DONTWAIT
 = 0x40,

222 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

223 
	mMSG_EOR
 = 0x80,

224 
	#MSG_EOR
 
MSG_EOR


	)

225 
	mMSG_WAITALL
 = 0x100,

226 
	#MSG_WAITALL
 
MSG_WAITALL


	)

227 
	mMSG_FIN
 = 0x200,

228 
	#MSG_FIN
 
MSG_FIN


	)

229 
	mMSG_SYN
 = 0x400,

230 
	#MSG_SYN
 
MSG_SYN


	)

231 
	mMSG_CONFIRM
 = 0x800,

232 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

233 
	mMSG_RST
 = 0x1000,

234 
	#MSG_RST
 
MSG_RST


	)

235 
	mMSG_ERRQUEUE
 = 0x2000,

236 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

237 
	mMSG_NOSIGNAL
 = 0x4000,

238 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

239 
	mMSG_MORE
 = 0x8000,

240 
	#MSG_MORE
 
MSG_MORE


	)

241 
	mMSG_WAITFORONE
 = 0x10000,

242 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

244 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

247 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

253 
	smsghdr


255 *
	mmsg_«me
;

256 
sockÀn_t
 
	mmsg_«mñí
;

258 
iovec
 *
	mmsg_iov
;

259 
size_t
 
	mmsg_iovÀn
;

261 *
	mmsg_c⁄åﬁ
;

262 
size_t
 
	mmsg_c⁄åﬁÀn
;

267 
	mmsg_Êags
;

270 #ifde‡
__USE_GNU


272 
	smmsghdr


274 
msghdr
 
	mmsg_hdr
;

275 
	mmsg_Àn
;

280 
	scmsghdr


282 
size_t
 
	mcmsg_Àn
;

287 
	mcmsg_Àvñ
;

288 
	mcmsg_ty≥
;

289 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

290 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

295 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

296 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

298 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

300 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

301 
	#CMSG_FIRSTHDR
(
mhdr
) \

302 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

303 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

304 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

305 & (
size_t
Ë~( (size_tË- 1))

	)

306 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

307 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

308 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

310 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

311 
cmsghdr
 *
__cmsg
Ë
__THROW
;

312 #ifde‡
__USE_EXTERN_INLINES


313 #i‚de‡
_EXTERN_INLINE


314 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

316 
_EXTERN_INLINE
 
cmsghdr
 *

317 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

319 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

321  (
cmsghdr
 *) 0;

323 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

324 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

325 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


326 + 
__mhdr
->
msg_c⁄åﬁÀn
)

327 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

328 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

330  (
cmsghdr
 *) 0;

331  
__cmsg
;

332 
	}
}

339 
	mSCM_RIGHTS
 = 0x01

340 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

341 #ifde‡
__USE_GNU


342 , 
	mSCM_CREDENTIALS
 = 0x02

343 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

347 #ifde‡
__USE_GNU


349 
	su¸ed


351 
pid_t
 
	mpid
;

352 
uid_t
 
	muid
;

353 
gid_t
 
	mgid
;

358 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


359 #i‚de‡
FIOGETOWN


360 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

362 #i‚de‡
FIOSETOWN


363 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

365 #i‚de‡
SIOCATMARK


366 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

368 #i‚de‡
SIOCGPGRP


369 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

371 #i‚de‡
SIOCGSTAMP


372 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

374 #i‚de‡
SIOCGSTAMPNS


375 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

377 #i‚de‡
SIOCSPGRP


378 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

383 
	~<asm/sockë.h
>

385 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


386 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


387 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


388 #unde‡
FIOGETOWN


390 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


391 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


392 #unde‡
FIOSETOWN


394 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


395 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


396 #unde‡
SIOCATMARK


398 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


399 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


400 #unde‡
SIOCGPGRP


402 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


403 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


404 #unde‡
SIOCGSTAMP


406 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


407 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


408 #unde‡
SIOCGSTAMPNS


410 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


411 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


412 #unde‡
SIOCSPGRP


417 
	slögî


419 
	ml_⁄off
;

420 
	ml_lögî
;

424 
__BEGIN_DECLS


431 
ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

432 
__vÀn
, 
__Êags
,

433 
__c⁄°
 
time•ec
 *
__tmo
);

439 
£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

440 
__vÀn
, 
__Êags
);

442 
	g__END_DECLS


	@/usr/include/bits/socket2.h

20 #i‚de‡
_SYS_SOCKET_H


24 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

25 
__Êags
);

26 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__Êags
), 
ªcv
);

28 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

30 
__Êags
), 
__ªcv_chk
)

31 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

34 
__exã∫_Æways_ölöe
 
ssize_t


35 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

40  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

42 i‡(
__n
 > 
	`__bos0
 (
__buf
))

43  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

45  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

46 
	}
}

48 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

49 
size_t
 
__buÊí
, 
__Êags
,

50 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

55 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

56 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

57 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

58 
size_t
 
__buÊí
, 
__Êags
,

59 
__SOCKADDR_ARG
 
__addr
,

60 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

61 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

64 
__exã∫_Æways_ölöe
 
ssize_t


65 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

66 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

68 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

70 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

71  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

72 
__addr
, 
__addr_Àn
);

73 i‡(
__n
 > 
	`__bos0
 (
__buf
))

74  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

75 
__addr
, 
__addr_Àn
);

77  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

78 
	}
}

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

4 #i‚de‡
HZ


5 
	#HZ
 100

	)

8 #i‚de‡
EXEC_PAGESIZE


9 
	#EXEC_PAGESIZE
 4096

	)

12 #i‚de‡
NOGROUP


13 
	#NOGROUP
 (-1)

	)

16 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

27 #i‚de‡
SO_PASSCRED


28 
	#SO_PASSCRED
 16

	)

29 
	#SO_PEERCRED
 17

	)

30 
	#SO_RCVLOWAT
 18

	)

31 
	#SO_SNDLOWAT
 19

	)

32 
	#SO_RCVTIMEO
 20

	)

33 
	#SO_SNDTIMEO
 21

	)

37 
	#SO_SECURITY_AUTHENTICATION
 22

	)

38 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

39 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

41 
	#SO_BINDTODEVICE
 25

	)

44 
	#SO_ATTACH_FILTER
 26

	)

45 
	#SO_DETACH_FILTER
 27

	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@
1
.
1
/usr/include
196
5336
chan_usbradio.c
/usr/include/alsa/asoundlib.h
/usr/include/asterisk.h
/usr/include/asterisk/abstract_jb.h
/usr/include/asterisk/callerid.h
/usr/include/asterisk/causes.h
/usr/include/asterisk/channel.h
/usr/include/asterisk/cli.h
/usr/include/asterisk/config.h
/usr/include/asterisk/dsp.h
/usr/include/asterisk/endian.h
/usr/include/asterisk/frame.h
/usr/include/asterisk/lock.h
/usr/include/asterisk/logger.h
/usr/include/asterisk/module.h
/usr/include/asterisk/musiconhold.h
/usr/include/asterisk/options.h
/usr/include/asterisk/pbx.h
/usr/include/asterisk/stringfields.h
/usr/include/asterisk/utils.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/linux/parport.h
/usr/include/linux/ppdev.h
/usr/include/linux/soundcard.h
/usr/include/math.h
/usr/include/search.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/io.h
/usr/include/sys/ioctl.h
/usr/include/sys/soundcard.h
/usr/include/sys/time.h
/usr/include/unistd.h
/usr/include/usb.h
answer.h
ring10.h
xpmr/xpmr.c
xpmr/xpmr.h
/usr/include/alloca.h
/usr/include/alsa/asoundef.h
/usr/include/alsa/conf.h
/usr/include/alsa/control.h
/usr/include/alsa/error.h
/usr/include/alsa/global.h
/usr/include/alsa/hwdep.h
/usr/include/alsa/input.h
/usr/include/alsa/mixer.h
/usr/include/alsa/output.h
/usr/include/alsa/pcm.h
/usr/include/alsa/rawmidi.h
/usr/include/alsa/seq.h
/usr/include/alsa/seq_event.h
/usr/include/alsa/seq_midi_event.h
/usr/include/alsa/seqmid.h
/usr/include/alsa/timer.h
/usr/include/alsa/version.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/asterisk/astmm.h
/usr/include/asterisk/autoconfig.h
/usr/include/asterisk/cdr.h
/usr/include/asterisk/chanvars.h
/usr/include/asterisk/compat.h
/usr/include/asterisk/compiler.h
/usr/include/asterisk/inline_api.h
/usr/include/asterisk/linkedlists.h
/usr/include/asterisk/localtime.h
/usr/include/asterisk/paths.h
/usr/include/asterisk/poll-compat.h
/usr/include/asterisk/sched.h
/usr/include/asterisk/strings.h
/usr/include/asterisk/time.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/math-finite.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/posix_opt.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/dirent.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/limits.h
/usr/include/linux/ioctl.h
/usr/include/linux/patchkey.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/pthread.h
/usr/include/sys/param.h
/usr/include/sys/poll.h
/usr/include/sys/select.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/types.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/ioctl.h
/usr/include/asm/ioctls.h
/usr/include/asterisk/buildopts.h
/usr/include/bits/byteswap.h
/usr/include/bits/dirent.h
/usr/include/bits/endian.h
/usr/include/bits/in.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/netdb.h
/usr/include/bits/poll.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/setjmp.h
/usr/include/bits/siginfo.h
/usr/include/bits/sigset.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/gnu/stubs.h
/usr/include/inttypes.h
/usr/include/linux/errno.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/strings.h
/usr/include/sys/cdefs.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/sysmacros.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm/errno.h
/usr/include/asm/param.h
/usr/include/bits/libc-lock.h
/usr/include/bits/local_lim.h
/usr/include/bits/sched.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/signum.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/wchar.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/sys/ucontext.h
/usr/include/sys/uio.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/param.h
/usr/include/asm/socket.h
/usr/include/bits/sockaddr.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/socket.h
/usr/include/asm/sockios.h
/usr/include/asm-generic/sockios.h
